* WebSocket 환경 설정

1. Spring MVC 프로젝트 생성 및 의존성 추가
: Maven 또는 Gradle을 사용하여 Spring MVC 프로젝트를 생성하고, 
  설정 파일에 의존성(dependency)을 추가

o Maven을 사용하는 경우 (pom.xml 파일)
 : Maven 프로젝트의 경우, pom.xml 파일에 의존성을 추가
구문) <dependencies> 섹션 내에 필요한 라이브러리를 추가하고 Maven 프로젝트를 업데이트
<dependencies>
    <!-- Spring Web MVC -->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.3.10.RELEASE</version>
    </dependency>

    <!-- Spring WebSocket -->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-websocket</artifactId>
        <version><version>${org.springframework version}</version></version>
    </dependency>
</dependencies>


o WebSocket 핸들러 매핑을 Servlet Context XML 파일에 설정
 : <websocket:handlers> 요소를 사용하여 WebSocket 핸들러에 대한 매핑을 정의
	- <websocket:handlers>: WebSocket 핸들러에 대한 매핑을 정의
	- <websocket:mapping>: 특정 URL 패턴 (/chat-ws.do)을 핸들러(chatHandler)에 매핑
	- <beans:bean>: chatHandler라는 이름의 WebSocket 핸들러 빈을 정의
			com.ch.webSock.WebChatHandler 클래스를 사용하도록 설정
구문)
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc.xsd
           http://www.springframework.org/schema/websocket
           http://www.springframework.org/schema/websocket/spring-websocket.xsd">

    <!-- 다른 설정들 -->
    <!-- WebSocket 핸들러 설정 -->
    <websocket:handlers>
        <!-- WebSocket 매핑 설정 -->
        <websocket:mapping path="/chat-ws.do" handler="chatHandler"/>
    </websocket:handlers>

    <!-- WebSocket 핸들러 빈 설정 -->
    <beans:bean id="chatHandler" class="com.ch.webSock.WebChatHandler"/>
</beans>



2. WebSocket 핸들러 클래스 생성
o WebSocket 설정 클래스 생성
: WebSocket을 활성화하고 핸들러를 등록하는 설정 클래스를 생성
	- WebSocketConfigurer를 구현하거나 @EnableWebSocket 어노테이션을 사용

@Configuration
@EnableWebSocket
public class WebSocketConfig implements WebSocketConfigurer {

    @Autowired
    private WebChatHandler webChatHandler;

    @Override
    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
        registry.addHandler(webChatHandler, "/websocket/chat").setAllowedOrigins("*");
    }
}


o WebSocketHandler 빈 등록
: WebSocket 핸들러 클래스를 빈으로 등록(설정 클래스에서 사용됨)

@Bean
public WebChatHandler webChatHandler() {
    return new WebChatHandler();
}


o WebSocket 핸들러 클래스 정의
: 주어진 코드에서 WebChatHandler 클래스를 정의
	- TextWebSocketHandler를 상속하고 WebSocket 이벤트 처리를 위한 메서드를 오버라이드


o 클라이언트에서 WebSocket에 접속
: 클라이언트에서 WebSocket에 접속할 때는 설정 클래스에서 지정한 
  엔드포인트(/websocket/chat 등)를 이용하여 접속


