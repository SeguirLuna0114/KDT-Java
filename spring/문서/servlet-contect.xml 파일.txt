* "Servlet-context.xml" 파일
:  Spring MVC의 설정과 빈(Bean) 정의, 데이터베이스 연결, 뷰 리졸버 설정,
   컨트롤러 설정, 인터셉터 구성 및 기타 웹 애플리케이션 관련 설정을 포함

	- "servlet-context.xml" 파일은 웹 애플리케이션의 DispatcherServlet에 의해 사용되며,
	  이 DispatcherServlet은 웹 요청을 처리하고 Spring MVC와 관련된 설정을 로드함


1. ViewResolver 설정
: JSP, Thymeleaf, Freemarker 등의 뷰 리졸버 설정을 정의하여 컨트롤러 메서드의 뷰 선택과 연결
	- ViewResolver 
	 : Spring MVC에서 사용되는 뷰(View)를 찾고 렌더링하는 역할을 하는 빈(Bean)
	- 뷰 이름을 실제 뷰로 매핑하는 방식과 뷰의 위치를 지정

ex) JSP(JavaServer Pages) 뷰를 처리하는 InternalResourceViewResolver의 설정
	<!-- InternalResourceViewResolver를 빈으로 정의 -->
	<beans:bean 
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">

	    <!-- prefix 속성: 뷰 이름 앞에 추가되는 경로를 설정 -->
	    <beans:property name="prefix" value="/WEB-INF/views/" />

	    <!-- suffix 속성은 뷰 이름 뒤에 추가되는 확장자를 설정 -->
	    <beans:property name="suffix" value=".jsp" />
	</beans:bean>


2. HandlerMapping 설정
 : 컨트롤러의 URL 매핑 규칙 및 설정을 포함하여
   클라이언트 요청을 어떤 컨트롤러 메서드로 라우팅할지 결정
	- 일반적인 HandlerMapping 구현체 
	  = @RequestMapping 어노테이션을 기반으로 동작하는 DefaultAnnotationHandlerMapping
	- 다른 HandlerMapping 구현체로는 BeanNameUrlHandlerMapping,
	   SimpleUrlHandlerMapping 등

ex) DefaultAnnotationHandlerMapping을 사용하는 HandlerMapping 설정
	<!-- RequestMappingHandlerMapping 클래스를 사용하여 HandlerMapping을 설정 -->
	<beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
	    <!-- useDefaultSuffixPattern 속성: URL 패턴에서 기본 확장자를 사용할지 여부 설정 -->
	    <beans:property name="useDefaultSuffixPattern" value="false" />
	</beans:bean>


3. Interceptor 설정: 요청 전/후에 수행해야 하는 공통 작업을 정의하는 인터셉터 설정.
	- 클라이언트 요청을 가로채고 처리하는 데 사용되는 기능
	- 보안 검사, 로깅, 권한 부여, 세션 관리, 캐싱 등과 같은 공통 작업을 수행하는 데 사용됨
	- 각 인터셉터는 자체 클래스로 구현되며, HandlerInterceptor 인터페이스를 구현해야함

ex) Spring MVC에서 인터셉터를 설정
	<!-- DelegatingWebMvcConfiguration 클래스를 사용하여 인터셉터를 설정 -->
	<beans:bean class="org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration">

	    <!-- interceptors 속성: 요청 전/후에 수행될 인터셉터 빈(Bean) 목록을 설정 -->
	    <beans:property name="interceptors">
	        <beans:list>
	            <!-- SecurityInterceptor와 LoggingInterceptor 두 개의 인터셉터 설정 -->
	            <beans:bean class="com.example.interceptors.SecurityInterceptor" />
	            <beans:bean class="com.example.interceptors.LoggingInterceptor" />
	        </beans:list>
	    </beans:property>
	</beans:bean>






