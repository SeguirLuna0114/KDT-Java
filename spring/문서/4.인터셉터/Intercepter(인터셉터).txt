* 인터셉터(Interceptor)
: 웹 애플리케이션의 요청 처리 프로세스에 개입하여
  요청과 응답의 전처리 및 후처리 작업을 수행하는 기능을 제공하는 중요한 구성 요소

	- 필터(Filter)와 유사한 역할을 하지만,
	  Spring MVC 프레임워크 내에서 작동하며 Spring 컨텍스트와 통합됨


o 인터셉터를 Spring MVC에서 구현하는 방법
1. 커스텀 인터셉터를 개발하려면 HandlerInterceptor 인터페이스를 구현해야 함
	- HandlerInterceptor 인터페이스를 구현하는 커스텀 인터셉터 클래스를 생성
	- 이 인터페이스에는 preHandle, postHandle, afterCompletion 메서드가 정의되어 있음

o HandlerInterceptor 인터페이스 메소드
- preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
 : 컨트롤러 메서드가 호출되기 전에 실행되며, 요청의 전처리 작업을 수행
	- 이 메서드는 true 또는 false를 반환하여 요청의 처리를 계속할지 중단할지 결정

-postHandle(HttpServletRequest request, HttpServletResponse response,
	    Object handler, ModelAndView modelAndView)
 : 컨트롤러 메서드가 실행된 후에 호출되며, 뷰가 렌더링되기 전에 실행됨
	- 이 메서드를 사용하여 모델 객체를 수정하거나 추가 작업을 수행할 수 있음

- afterCompletion(HttpServletRequest request, HttpServletResponse response,
		   Object handler, Exception ex)
 : 뷰 렌더링 및 요청 처리가 완료된 후에 호출됨
	- 이 메서드는 예외 처리나 리소스 정리 작업을 수행할 때 사용됨

구문)	public class MyInterceptor implements HandlerInterceptor {

	    @Override
	    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
	        // preHandle 단계: 컨트롤러 메서드 실행 전에 수행할 작업
	        return true; // true를 반환하면 요청 처리를 계속하고, false를 반환하면 요청 처리를 중단
	    }

	    @Override
	    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
	       // postHandle 단계: 컨트롤러 메서드 실행 후, 뷰 렌더링 전에 수행할 작업
	   }

	   @Override
	   public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
	       // afterCompletion 단계: 뷰 렌더링 및 요청 처리 완료 후에 수행할 작업
	   }
	}



2. 인터셉터를 애플리케이션에 등록하고 설정하려면
     WebMvcConfigurer 인터페이스를 구현한 설정 클래스도 필요
 : WebMvcConfigurer 인터페이스를 구현한 설정 클래스를 생성하여 인터셉터를 등록하고,
   addInterceptors 메서드를 오버라이드하여 인터셉터를 등록하고 URL 패턴을 설정
	- Spring MVC 설정 클래스에서 addInterceptors 메서드를 오버라이드하여
   	   커스텀 인터셉터를 등록
		- InterceptorRegistry를 사용하여 인터셉터를 추가하고 설정
		- addPathPatterns : 특정 URL 패턴에 대해 인터셉터가 동작하도록 설정
		- excludePathPatterns : 특정 패턴의 URL을 인터셉터에서 제외하도록 설정
		=> 어떤 URL 패턴에 인터셉터를 적용하고, 제외할 URL 패턴을 설정

구문)	@Configuration
	@EnableWebMvc
	public class WebMvcConfig implements WebMvcConfigurer {

	    @Override
	    public void addInterceptors(InterceptorRegistry registry) {
	        registry.addInterceptor(new CustomInterceptor())
	                .addPathPatterns("/secure/**") // 특정 URL 패턴에만 인터셉터를 적용
	                .excludePathPatterns("/public/**"); // 제외할 URL 패턴을 지정
	    }
	}
		- CustomInterceptor: HandlerInterceptor 인터페이스를 구현한 커스텀 인터셉터



3. 설정 클래스를 스프링 컨텍스트에 등록
 : 메인 클래스나 @SpringBootApplication 어노테이션이 있는 클래스에
   @Import 어노테이션을 사용하여 위에서 생성한 설정 클래스를 스프링 컨텍스트에 등록

구문)	@SpringBootApplication
	@Import(WebMvcConfig.class)
	public class MyApplication {

	    public static void main(String[] args) {
	        SpringApplication.run(MyApplication.class, args);
	    }
	}




