* Spring Framework의 어노테이션을 사용하여 빈(Bean)을 설정하고 관리

o Spring Framework에서 사용되는 어노테이션(생략 가능)
: 빈(Bean)을 등록하기 위해 사용
	1) @Component 어노테이션
	: 가장 일반적인 빈 등록 어노테이션. 
	  IoC 컨테이너에서 해당 클래스를 빈으로 자동 등록

	2) @Service 어노테이션
	: 일반적으로 "서비스 클래스"를 @Service 어노테이션으로 표시
	  비즈니스 서비스 레이어에서 사용되는 빈을 등록하기 위해 사용

	3) @Repository 어노테이션
	: "데이터 액세스 객체(DAO) 클래스"에서 사용
	   데이터베이스와의 상호 작용을 처리하는 클래스를 @Repository 어노테이션으로 표시

	4) @Controller 어노테이션
	: Spring MVC 웹 애플리케이션에서 사용되는 "컨트롤러 클래스"를 나타냄
	 웹 요청을 처리하고 뷰와 모델을 조작하기 위한 클래스를 @Controller 어노테이션으로 표시



1. 스프링 프로젝트 설정
: 프로젝트에서 Spring Framework와 관련 라이브러리를 클래스패스에 추가

- 일반적으로 Maven을 사용하여 종속성 관리
 : Maven 프로젝트의 경우 pom.xml 파일을 열고 <dependencies> 섹션에 필요한 종속성을 추가
구문)	<dependencies>
	    <dependency>
	        <groupId>org.springframework</groupId>
        	artifactId>spring-context</artifactId>
	       <version>5.3.12.RELEASE</version>
	   </dependency>
	   <!-- 다른 종속성 추가 -->
	/dependencies>




2. 어노테이션 스캔을 활성화
: Spring 애플리케이션 컨텍스트를 구성하려면, Java 설정 클래스를 생성하거나
   XML 설정 파일에서 <context:component-scan> 요소를 사용하여
   어노테이션 스캔을 활성화해야 함
   => Spring은 어노테이션을 사용하여 빈을 자동으로 관리

o <context:component-scan> 요소
: 표시된 클래스를 스캔하고 자동으로 Spring빈으로 등록
	- Spring IoC 컨테이너에게 어느 패키지에서 컴포넌트를 스캔해야 하는지 알려줌
구문)	<context:component-scan base-package="com.example.package" />
		- base-package 속성: 어노테이션 스캔을 수행할 패키지의 경로를 지정
	=> 이 패키지와 그 하위 패키지에서 클래스를 스캔하고
	    @Component, @Service, @Repository, @Controller 등과 같은
	    Spring 관련 어노테이션을 사용하여 표시된 클래스를 찾아서 Spring 빈으로 등록


-1) XML 설정 파일을 사용하는 경우
: <context:component-scan> 요소를 사용하여 어노테이션 스캔을 활성화
구문)	<beans xmlns="http://www.springframework.org/schema/beans"
 	     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	      xmlns:context="http://www.springframework.org/schema/context"
	      xsi:schemaLocation="http://www.springframework.org/schema/beans
	        http://www.springframework.org/schema/beans/spring-beans.xsd
	        http://www.springframework.org/schema/context
	        http://www.springframework.org/schema/context/spring-context.xsd">
	
	   <!-- 어노테이션 스캔을 활성화 -->
	   <context:component-scan base-package="com.example.package" />

	   <!-- 다른 빈(Bean) 정의 및 설정 -->

	/beans>


-2) Java 설정 클래스를 사용하는 경우
구문)	import org.springframework.context.annotation.ComponentScan;
	import org.springframework.context.annotation.Configuration;

	@Configuration
	@ComponentScan(basePackages = "your.base.package")
	public class AppConfig {
	    // 추가 설정을 정의할 수 있음
	}




3. 빈(Bean) 클래스 생성
: Spring이 빈으로 관리할 클래스를 작성
	- 이 클래스에 @Component 어노테이션을 사용하여 Spring에게 이 클래스가 빈임을 알려줌

o @Component 어노테이션
: 클래스를 Spring의 IoC 컨테이너에서 빈(Bean)으로 등록하고 관리하는 데 사용됨
  이 어노테이션을 클래스에 부여하면 Spring은 해당 클래스를 스캔하고 자동으로 빈으로 등록함
  (ex. MyComponent 클래스는 "myComponent"라는 이름으로 빈으로 등록됨)

구문)	import org.springframework.stereotype.Component;

	@Component
	public class MyBean {
	    // 빈 클래스의 내용

	    private String message;

	    public MyBean() {
	        // 생성자
	    }

	    public void setMessage(String message) {
	        this.message = message;
	    }

	    public String getMessage() {
	        return message;
	    }
	}



4. 빈 주입 (Dependency Injection)
: 필요한 경우, 빈 사이의 의존성을 주입

o @Autowired 어노테이션
:  IoC 컨테이너가 클래스 내에서 필요한 의존성을 자동으로 주입하도록 지시
	- IoC 컨테이너가 해당 위치에 주석이 달린 필드, 생성자 또는 메서드 파라미터의
	  데이터 유형에 대한 빈을 찾아서 주입
	- @Autowired 어노테이션을 사용하면 IoC 컨테이너가 관리하는 다른 빈을
	  필드, 생성자 또는 세터 메서드를 통해 자동으로 주입할 수 있음
		- 필드 주입은 권장X
		- 생성자 주입은 빈 생성시 필수적인 의존성을 제공해야 할 때 유용
		- 세터 메서드 주입은 선택적 의존성을 주입하는 데 유용

구문)	import org.springframework.beans.factory.annotation.Autowired;

	@Component
	public class AnotherBean {
	    private MyBean myBean;

	    @Autowired
	    public AnotherBean(MyBean myBean) {
	        this.myBean = myBean;
	    }

	    // 나머지 코드
	}




5. Spring 애플리케이션 실행
: Spring IoC 컨테이너를 초기화하고 빈을 생성하기위해 Spring 애플리케이션 실행
	- AnnotationConfigApplicationContext 또는
	   ClassPathXmlApplicationContext를 사용하여 
	  컨텍스트를 초기화하고 빈을 가져옴
	- 컨텍스트를 초기화한 후에는 context.getBean(...)을 사용하여
	   빈을 가져와서 애플리케이션 로직을 실행


-1) Java 클래스를 사용한 애플리케이션 컨텍스트 초기화/설정
 	(AnnotationConfigApplicationContext클래스 사용)
구문)	import org.springframework.context.annotation.AnnotationConfigApplicationContext;

	public class Main {
	    public static void main(String[] args) {
		// Java 설정 클래스를 사용하여 애플리케이션 컨텍스트 초기화
		// AppConfig: Java 설정 클래스
	        AnnotationConfigApplicationContext context = 
			new AnnotationConfigApplicationContext(AppConfig.class);

		// 빈을 가져와서 애플리케이션 로직 실행
	        MyBean myBean = context.getBean(MyBean.class);
		myBean.doSomething();
	        AnotherBean anotherBean = context.getBean(AnotherBean.class);

		// 애플리케이션 컨텍스트 닫기 (선택 사항)
	        context.close();
	    }
	}



-2) XML 설정 파일을 기반으로  IoC 컨테이너 초기화
	(ClassPathXmlApplicationContext 클래스 사용)
구문)	import org.springframework.context.ApplicationContext;
	mport org.springframework.context.support.ClassPathXmlApplicationContext;

	public class Main {
	   public static void main(String[] args) {
	        // XML 설정 파일을 사용하여 애플리케이션 컨텍스트 초기화
		// applicationContext.xml: XML 설정 파일
	        ApplicationContext context 
			= new ClassPathXmlApplicationContext("applicationContext.xml");

        	// 빈을 가져와서 애플리케이션 로직 실행
	        MyBean myBean = context.getBean(MyBean.class);
	        myBean.doSomething();

	        // 애플리케이션 컨텍스트 닫기 (선택 사항)
	        context.close();
	    }
	}





