* Spring MVC (Model-View-Controller) Framework
: Java 기반 웹 애플리케이션을 개발하는 데 사용되는 프레임워크
	- Spring Framework의 일부
	- 웹 애플리케이션을 구축하고 관리하기 위한 기능을 제공
	- Spring MVC는 웹 애플리케이션의 아키텍처를 구축하고 구성하는 데 사용됨
	- 전통적인 MVC 패턴을 따름
	  : 애플리케이션의 데이터 모델(Model), 사용자 인터페이스 및 비즈니스 로직을 분리하여
	    유지 보수성과 확장성을 향상시킴


o Spring MVC의 주요 구성 요소
1) 모델 (Model)
 : 모델은 애플리케이션의 데이터와 비즈니스 로직을 나타냄
	- 데이터베이스에서 검색한 정보, 계산된 값을 포함할 수 있으며
	   클라이언트에 표시할 정보를 제공

2) 뷰 (View)
 : 뷰는 사용자에게 정보를 표시하는 역할
	-HTML 템플릿, JSP(JavaServer Pages), Thymeleaf 등의
	  템플릿 엔진을 사용하여 사용자 인터페이스를 생성
	- 뷰는 모델의 데이터를 표시하고 사용자의 입력을 컨트롤러로 전달

3) 컨트롤러 (Controller)
 : 컨트롤러는 모델과 뷰 간의 상호 작용을 관리하고 클라이언트의 요청을 처리
	- 클라이언트의 요청이 들어오면 컨트롤러가 적절한 모델을 호출하고
	  그 결과를 뷰로 전달하여 웹 페이지를 생성


o Spring MVC의 작동 방식

				----------------------> Handler Mapping

			 	----------------------> 
Client -->  Dispatcher Servlet	<-- Model And View------- Controller

				----------------------> ViewResolver
				----------------------> View

1. 클라이언트 요청 (Request)
 : 사용자(웹 브라우저, 모바일 앱 또는 다른 HTTP 클라이언트)가 
  웹 브라우저를 통해 웹 애플리케이션에  HTTP 요청을 보냄
	- 특정 URL을 통해 웹 애플리케이션에 접근하거나 특정 동작을 요청할 때 발생
	- 이 요청은 URL을 통해 특정 컨트롤러의 메서드에 연결됨


2. DispatcherServlet 요청 수신
 : Spring MVC 애플리케이션의 핵심 컴포넌트 중 하나인 DispatcherServlet이 요청을 수신
	- DispatcherServlet은 웹 애플리케이션의 진입점 역할
	  : 클라이언트 요청을 수신하고 해당 요청을 처리하기 위한 조정 및 조절을 담당

3. Handler Mapping
 : DispatcherServlet이 요청 URL에서 어떤 컨트롤러(또는 핸들러 메소드)를
    호출(매핑)해야 하는지 결정하는 역할	
	- Handler Mapping은 요청 URL과 어떤 컨트롤러 메서드를 매핑해야 하는지 결정

	o <annotation-driven> 요소
	 : Spring MVC의 애노테이션 기반 컨트롤러 설정을 활성화
		- @Controller, @RequestMapping, @Autowired 등과 같은 애노테이션을 사용하여
		  컨트롤러 및 빈을 정의하고 관리할 수 있음


4. Controller 호출
 : DispatcherServlet은 Handler Mapping을 통해
   어떤 컨트롤러와 메서드를 호출해야 하는지 결정한 후 해당 컨트롤러 메서드를 호출
	- DispatcherServlet에 의해 선택된 Controller의 메서드(핸들러 메서드)가 실행됨
	- Controller의 메서드는 클라이언트 요청을 처리하고 필요한 작업을 수행
	  : 데이터베이스 쿼리 실행, 비즈니스 로직 실행, 모델 생성, 다른 서비스와의 상호작용 등
	
	o @RequestMapping 어노테이션
	 : 클라이언트의 요청을 특정 컨트롤러 메서드와 매핑하고, 요청을 처리하는 메서드를 지정
		- Handler Mapping 단계에서 어떤 컨트롤러 메서드가
		  어떤 요청 URL과 HTTP 메서드에 매핑되는지 정의
		-> DispatcherServlet은 Handler Mapping을 사용하여
		   요청을 해당 컨트롤러 메서드로 라우팅하고 컨트롤러 메서드를 호출


5. 모델 생성
 : 컨트롤러 메서드는 필요한 비즈니스 로직을 실행하여 모델을 생성하거나 수정하여 데이터를 담고,
   이 모델은 이후 뷰에 전달되어 클라이언트에게 반환됨
	- 모델 = 클라이언트에 반환할 데이터를 포함하는 객체
	- 모델은 뷰가 사용하는 데이터를 포함

6. 뷰 선택
 : 모델이 생성되면 컨트롤러는 어떤 뷰를 사용하여 
  결과를 클라이언트에 표시할지 결정
	- 컨트롤러는 결과를 뷰로 전달
	- 뷰는 화면을 생성하는 역할


7. 모델 전달 및 뷰 렌더링
 : 모델과 선택된 뷰가 DispatcherServlet에 반환됨
	- DispatcherServlet은 뷰에 모델을 전달하고,
	  뷰는 모델의 데이터를 사용하여 HTML, JSON, XML 또는 다른 유저 인터페이스를 생성
	- 생성된 뷰는 클라이언트에 반환됨

8. 클라이언트 응답 (Response)
 : 생성된 뷰는 HTML 페이지 또는 다른 유저 인터페이스를 클라이언트에 반환됨
	- 이 페이지는 웹 브라우저에서 렌더링되어 사용자에게 표시됨












