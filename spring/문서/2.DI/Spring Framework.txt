* 스프링 프레임워크(Spring Framework)
: Java로 엔터프라이즈 애플리케이션을 개발하기 위한 포괄적인 오픈 소스 프레임워크
	- 다양한 기능과 기능을 제공하여
	  Java 기반 애플리케이션의 개발을 간편하게하고 가속화


o 스프링의 핵심 원칙 "IoC"
제어의 역전 (Inversion of Control 또는 IoC) 
: 어떤 작업의 실행 흐름을 개발자가 직접 제어하는 것이 아니라
  프레임워크나 컨테이너에게 위임하는 개념
	- 프로그램의 제어권이 바뀌는 원칙을 나타냄
	- 애플리케이션의 모듈화와 유연성을 증가시킬 수 있음
	- 소프트웨어 디자인 패턴 중 하나


o IoC 구현 방식
1. 의존성 주입 (Dependency Injection, DI)
: 객체가 필요로 하는 다른 객체에 대한 의존성을 직접 만들거나 제공하는 대신,
  외부에서 이러한 의존성을 주입받도록 하는 방식
	- IoC의 핵심 요소 중 하나
	- 객체 간의 느슨한 결합(Loose Coupling)을 유지하고,
	 변경이 쉬운 코드를 작성할 수 있음
	- 코드의 모듈화, 재사용성, 유지 보수성, 테스트 용이성 등을 향상시킬 수 있음

	o DI의 주요 개념
	1) 의존성 (Dependency)
	: 객체가 다른 객체 또는 서비스에 의존하는 것을 의미

	2) 의존성 주입 (Dependency Injection)
	: 객체가 직접 의존성을 생성하거나 서비스를 인스턴스화하지 않고,
	  객체가 필요로 하는 의존성을 외부에서 주입받는 것을 의미

	3) 주입 컨테이너 (Injection Container)
	: 주입 컨테이너는 의존성을 관리하고 주입하는 환경을 제공하는 도구나 프레임워크
		- 주로 Spring과 Guice와 같은 프레임워크가 주입 컨테이너를 제공

	4) 의존성 주입 방식 (Injection Methods)
		(1) 생성자 주입 (Constructor Injection)
		: 의존성을 객체 생성 시 생성자를 통해 주입하는 방식

		(2) 메서드 주입 (Method Injection)
		: 의존성을 메서드를 통해 주입하는 방식
		
		(3) 속성 주입 (Property Injection)
		: 의존성을 객체의 속성을 통해 주입하는 방식


	5) 인터페이스 (Interfaces)
	: 의존성 주입은 인터페이스를 통해 정의됨
	 클래스가 특정 인터페이스를 구현하거나 인터페이스를 상속받아야 하며,
 	 주입되는 객체는 이러한 인터페이스를 구현하여야 함

	6) 스코프 (Scope): 주입된 의존성의 수명 주기를 나타냄
		- 싱글톤(하나의 인스턴스가 공유) 또는
		  프로토타입(각 요청마다 새로운 인스턴스 생성) 스코프가 사용됨
	


2. 컨테이너 관리(Container Management)
: IoC 컨테이너는 애플리케이션의 구성 요소 (예: 객체)를 생성하고 관리
	- 객체의 생성, 관리, 의존성 주입을 담당
	  (객체의 생명주기를 관리하며, 필요한 객체를 요청할 때 해당 객체를 제공)

	o IoC 컨테이너 관리 주요 구현 방식
	1) Spring IoC 컨테이너
	: Spring Framework는 가장 많이 사용되는 Java 기반 IoC 컨테이너 중 하나
		- Spring IoC 컨테이너는 XML, 어노테이션 또는 자바 설정을 사용하여
		 객체의 라이프사이클을 관리하며 의존성 주입을 제공
		- Spring IoC 컨테이너는 다양한 스코프(싱글톤, 프로토타입 등)를 지원하고, 
		  AOP(Aspect-Oriented Programming)와의 통합을 통해 더 많은 기능을 제공

	2) Google Guice
	: Guice는 자바 기반의 경량 IoC 컨테이너
		- Guice는 어노테이션을 사용하여 객체의 의존성 주입을 구성하며,
		  컴파일 타임 의존성 검사를 지원

	3) Apache CDI (Contexts and Dependency Injection)
	: CDI는 자바 EE (Enterprise Edition)의 일부로 제공되며,
	 자바 기반 애플리케이션에서 IoC 컨테이너와 의존성 주입을 제공
		- CDI는 스코프 및 컴포넌트와 같은 컨텍스트 관리를 지원하며,
		 Java EE 애플리케이션과의 통합을 강화함



