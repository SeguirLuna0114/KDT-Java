*환경설정 파일

1. pom.xml (maven의 환경 설정 파일)
: 프로젝트가 어떤 라이브러리, 프레임워크, 플러그인 등을 사용하고 라이브러리의 버전을 명시하는데 사용
	- 프로젝트의 "의존성 관리"를 담당
	- 필요한 라이브러리를 중앙 저장소에서 다운로드하여 프로젝트 빌드에 포함
	- "프로젝트를 빌드하고 패키징"
	- 실행 가능한 JAR 또는 WAR 파일을 생성하는 데 필요한 정보를 정의


2. web.xml (project의 환경 설정 파일)
: Java 웹 애플리케이션 (Java EE 웹 애플리케이션)의 동작과 구성을 정의
	- 웹 애플리케이션의 구성, 서블릿 매핑, 리스너, 필터,
	 오류 페이지 및 기타 웹 구성 요소를 정의하는 데 사용

	1) web-app> 요소
	: web.xml 파일의 루트 요소로 웹 애플리케이션의 설정을 시작
	2) <servlet> 및 <servlet-mapping> 요소
	: 서블릿을 정의하고 서블릿 클래스와 URL 패턴을 매핑
	  이것은 HTTP 요청을 처리하는 Java 클래스를 구성하는 데 사용됨
	3) <filter> 및 <filter-mapping> 요소
	: 필터를 정의하고 필터 클래스 및 URL 패턴을 매핑
	  필터는 HTTP 요청 및 응답을 수정, 검사 또는 가로채는 데 사용됨
	4) context-param> 요소
  	 : 웹 애플리케이션의 컨텍스트 파라미터를 설정
	  이것은 웹 애플리케이션 수준의 설정을 제공


3. servlet-context.xml (spring spring의 환경 설정 파일)
: 웹 계층(웹 컨트롤러, 뷰 해석, 핸들러 매핑 등)과 관련된 설정을 담당
	- Spring의 DispatcherServlet과 관련된 설정을 정의
	- 웹 애플리케이션의 구성을 다룸

	1) 핸들러 매핑, 인터셉터, 리소스 핸들러와 같은 Spring MVC의 다양한 설정 요소 정의
	2) 파일 업로드 기능을 사용하려면 multipartResolver 빈을 설정하여 파일 업로드를 처리
	3) ViewResolver 설정
	 : JSP, Thymeleaf, FreeMarker 등 다양한 뷰 템플릿 엔진을 설정하고 뷰와 관련된 설정을 포함


4. root-context.xml (spring spring의 환경 설정 파일)
: Spring 빈(Bean)의 정의, 데이터베이스 연결, MyBatis와 통합 설정, 
  트랜잭션 관리 및 다른 Spring 관련 설정을 정의
	- "Spring 애플리케이션의 런타임 동작"과 관련된 "설정"을 다룸
	- Spring 컨테이너가 애플리케이션에서 사용할 빈들을 설정하고 관리하는 역할 수행
	- Spring 애플리케이션의 구성과 데이터베이스와의 상호 작용을 관리
	- 애플리케이션의 비즈니스 논리 및 데이터 액세스 레이어에 관한 설정을 제공


5. configuration.xml (mybatismybatis의 환경 설정 파일)
: MyBatis 프레임워크를 사용하여 데이터베이스와 상호 작용을 설정하는 MyBatis 설정 파일
	- MyBatis의 주요 구성 요소와 매퍼 파일의 위치를 정의하는데 사용
	- root-context.xml 파일에서 sqlSessionFactory 빈을 생성할 때
	    configLocation 속성을 사용하여 configuration.xml 파일의 경로를 지정
ex) 
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
    <!--  Java 클래스와 MyBatis 매퍼 XML 파일에서 사용되는 별칭을 정의-->
    <typeAliases>
        <!-- 클래스의 별칭 정의 -->
        <typeAlias alias="dept" type="myBatis2.model.Dept" />
        <typeAlias alias="emp" type="myBatis2.model.Emp" />
    </typeAliases>

   
    <!-- 매퍼 파일 위치 지정 -->
 <!--
   <mappers>
        <mapper resource="mybatis/mapper/UserMapper.xml" />
        <mapper resource="mybatis/mapper/ProductMapper.xml" />
    </mappers>
-->
</configuration>



6. Mapper파일 (Dept.xml, Emp.xml)
: MyBatis 프레임워크에서 SQL 쿼리를 정의하고 데이터베이스와 상호 작용을 수행하는 파일
	- xml 확장자를 가짐
	- SQL 쿼리를 정의하고, Java 모델 클래스와 데이터베이스 테이블 간의 매핑을 제공
	  =>  MyBatis는 데이터베이스 연동을 처리하고,
	    Java 객체를 데이터베이스 레코드와 매핑하여 데이터 액세스 작업을 쉽게 수행 가능

ex) Dept.xml (부서 정보에 대한 매퍼 파일)
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<1--<mapper namespace="myBatis2.mapper.DeptMapper">-->
<!-- 클래스의 별칭 정의했기에, 별칭명으로 접근 가능 -->
<mapper namespace="deptns">

    <!-- SQL 결과 집합의 열과 Java 객체의 필드 간의 매핑을 정의 -->    
    <resultMap id="deptResult"    type="dept">
    	<result property="deptno" column="deptno" />
    	<result property="dname"  column="dname" />
    	<result property="loc"	  column="loc" />
    </resultMap>

    <!-- 부서 정보 조회 쿼리 -->
    <select id="getDept" parameterType="int" resultType="myBatis2.model.Dept">
        SELECT DEPTNO, DNAME, LOC
        FROM DEPT
        WHERE DEPTNO = #{deptno}
    </select>
    
    <!-- 모든 부서 목록 조회 쿼리 -->
    <select id="getAllDepts" resultType="myBatis2.model.Dept">
        SELECT DEPTNO, DNAME, LOC
        FROM DEPT
    </select>
    
    <!-- 부서 정보 삽입 쿼리 -->
    <insert id="insertDept" parameterType="myBatis2.model.Dept">
        INSERT INTO DEPT (DEPTNO, DNAME, LOC)
        VALUES (#{deptno}, #{dname}, #{loc})
    </insert>
    
    <!-- 부서 정보 수정 쿼리 -->
    <update id="updateDept" parameterType="myBatis2.model.Dept">
        UPDATE DEPT
        SET DNAME = #{dname}, LOC = #{loc}
        WHERE DEPTNO = #{deptno}
    </update>
    
    <!-- 부서 정보 삭제 쿼리 -->
    <delete id="deleteDept" parameterType="int">
        DELETE FROM DEPT
        WHERE DEPTNO = #{deptno}
    </delete>
</mapper>


ex) Emp.xml (사원 정보에 대한 매퍼 파일)
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--<mapper namespace="myBatis2.mapper.EmpMapper">-->
<!-- 클래스의 별칭 정의했기에, 별칭명으로 접근 가능 -->
<mapper namespace="empns">

    <!-- SQL 결과 집합의 열과 Java 객체의 필드 간의 매핑을 정의 -->
    <resultMap id="empResult"    	type="emp">
    	<result property="empno" 	column="empno" />
    	<result property="ename"  	column="ename" />
    	<result property="job"		column="job" />
	<result property="mgr" 		column="mgr" />
    	<result property="hiredate" column="hiredate" />
    	<result property="sal"	  	column="sal" />
    	<result property="comm"	   	column="comm" />
    	<result property="deptno"   column="deptno" />
    	<result property="dname"	column="dname" />
    	<result property="loc"   	column="loc" />
    </resultMap>
    
    <!-- 사원 정보 조회 쿼리 -->
    <select id="getEmp" parameterType="int" resultType="myBatis2.model.Emp">
        SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO
        FROM EMP
        WHERE EMPNO = #{empno}
    </select>
    
    <!-- 모든 사원 목록 조회 쿼리 -->
    <select id="getAllEmps" resultType="myBatis2.model.Emp">
        SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO
        FROM EMP
    </select>
    
    <!-- 사원 정보 삽입 쿼리 -->
    <insert id="insertEmp" parameterType="myBatis2.model.Emp">
        INSERT INTO EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
        VALUES (#{empno}, #{ename}, #{job}, #{mgr}, #{hiredate}, #{sal}, #{comm}, #{deptno})
    </insert>
    
    <!-- 사원 정보 수정 쿼리 -->
    <update id="updateEmp" parameterType="myBatis2.model.Emp">
        UPDATE EMP
        SET ENAME = #{ename}, JOB = #{job}, MGR = #{mgr}, HIREDATE = #{hiredate}, SAL = #{sal}, COMM = #{comm}, DEPTNO = #{deptno}
        WHERE EMPNO = #{empno}
    </update>
    
    <!-- 사원 정보 삭제 쿼리 -->
    <delete id="deleteEmp" parameterType="int">
        DELETE FROM EMP
        WHERE EMPNO = #{empno}
    </delete>
</mapper>



