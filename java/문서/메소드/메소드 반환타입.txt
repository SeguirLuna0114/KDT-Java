#메소드 반환(리턴)타입
- 메소드를 실행한 후 (반환되는) 결과값의 데이터 타입
	- 리턴값이 없을수도 있음(void구문의 경우)
	- 리턴값이 있는 경우 리턴타입은 메소드 선언할때 지정
	   (일반적으로, 함수의 반환문에 해당하는 데이터 유형과 일치해야 함)
	ex) public int add(int a, int b) {
		// int: 메소드 리턴타입
    		return a + b;
	    }

-static으로 선언됨 => 클래스에 직접적으로 연결됨
  (클래스의 인스턴스 생성 없이도 check()메소드 호출 가능)


# 메소드 선언
[반환 유형] [메소드 이름]([매개변수 목록]) {
    // 메소드 구현
    // [반환 유형]에 해당하는 값 반환
}

1. 메소드 실행 시 리턴값X 경우 (void 타입)
- 반환타입 'void': 메소드가 반환하는 값이 없음. 
  		 void반환 타입을 가지는 메소드는 명시적으로 return구문 작성하지 않아도 됨
- 리턴값X = 호출자가 값을 받아서 활용X
    => 주로 작업을 실행하거나 처리하는 용도로 사용됨

ex) public void printMessage() {
    	System.out.println("Hello, world!");
    }

    //main메소드에서 호출하는 방법
      printMessage(); // 출력 결과: Hello, world!

2. 메소드 실행시 리턴값O 경우 (자료형/데이터타입)
- 리턴값이 있는 경우에는, 메소드의 반환유형(데이터타입)이 명시되어야 함
- return구문: 메소드를 호출한 곳에 값을 돌려주는 역할
	     메소드 가장 마지막줄에 사용해야 함

ex) public int add(int a, int b) {
    	return a + b;
    }

    //main메소드에서 호출하는 방법
    int result = add(5, 3);
    System.out.println(result); // 출력 결과: 8


# 메소드에 매개변수가 존재하는 경우(리턴값O)
1. 리턴값을 받을 변수를 생성하여 이를 메소드에 전달
ex)	int[] values1 = {1, 2, 3};	// int형식의 배열변수 생성 -> 요소 초기화
	int result1 = mycom.sum1(values1);	// values1배열을 sum1메소드에 전달하여 호출
	System.out.println("result1: "+result1);

2. 리턴값을 직접 메소드 호출시에 인라인으로 생성하여 전달
ex)	int result2 = mycom.sum1(new int[] {1,2,3,4,5});
	// 데이터형식의 배열을 직접 인라인으로 작성시, new연산자를 사용하여 메모리에 할당
	System.out.println("result2: "+result2);




