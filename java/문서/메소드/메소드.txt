* 메소드(Method) : 여러가지 코드를 묶어 놓은 식
- 사용 이유: 코드의 재사용을 위함
- 객체 지향 프로그래밍에서 클래스 내에 정의된 함수
    - 클래스의 특정한 동작이나 행위 나타냄
    - 인스턴스의 상태를 변경하거나 특정 작업 수행하는데 사용


접근제어자	          void
(접근지정자)     공유      자료형       메소드명(매개변수)

public          static     void         check(){

	 return   값;
}

-public 접근 제어자: 어떤 클래스에서든 접근 가능
   cf. 접근 제어자
       public, 생략(default접근제어자), private, protected

-static이 붙은 메서드 =  정적메서드(따로 객체 생성X, '클래스명.'이 생략됨)

-main메소드: 프로그램의 실행이 종료될때까지 동작
	-자바가상머신(JVM:java.exe)으로만 호출됨
	-프로그래머가 직접 호출X


- 이클립스에서 클래스의 메소드 자동 생성 기능
   : [오른쪽마우스]->[Source] ->[generate getters and setters]
     -> 'select all'(모두선택) ->[insertion point] 위치 선택
        -> [sort by] First getters, then setters (get 먼저 ->set) ->'Generate'

- [ctrl] + [메소드명] => 해당 메소드 위치로 바로 이동가능

- 역할) 일부 필드값을 개별적으로 수정/변경하거나 데이터를 반환하는 역할
1. (생성자에서 초기화된) 필드값 출력하는 역할
2. getters메소드(get으로 시작하는 메소드): 객체의 필드(인스턴스 변수)값을 조회
   - 메서드 호출한 곳에 필드값을 돌려주는(return) 역할
     - 객체의 캡슐화 유지하며 외부에서 해당 객체의 상태 조회 가능하게 함
	ex) public int getYear() {
    		 //인스턴스 변수 설정 로직
		 return year;
	    }

3. setters 메소드 : 매개변수를 통해 원하는 일부 필드값을 수정/변경
   - 객체의 캡슐화 유지하며 외부에서 해당 객체의 상태 조작 가능하게 함
	ex) public void setYear(type parameter) {
    		 //인스턴스 변수 설정 로직
		 this.parameter = parameter;
	    }


----------------------------------------------------------------------------------
1. 동작 정의: 메소드는 클래스의 동작을 정의함. 데이터를 처리하는 기능을 구현
2. 객체의 상태 변경: 클래스 내 인스턴스 변수를 조작하여 객체의 상태를 변경하는 역할(ex. 업데이트)
3. 정보 반환: 인스턴스 변수를 활용하여 계산/조회한 데이터를 반환
4. 코드 재사용
5. 접근 제어: 외부에서 해당 클래스 내부 상태를 조작하거나 정보 조회하기위한 "접근점"제공
     - 필드가 private 접근제어인 경우, 메소드를 사용해 클래스 내 접근 가능

