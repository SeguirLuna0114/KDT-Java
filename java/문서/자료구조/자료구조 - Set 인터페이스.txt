* 자료구조(Data Structure)
   java.util.*;

   ex) Set, List, Vector, Map, Queue, Stack etc

# 제네릭(Generic) <>
  : 데이터 타입을 일반화하여, 자료구조에 1가지 자료형의 데이터만 저장할 수 있도록 함

i. Set 인터페이스 - HashSet, TreeSet (상속받는 클래스)
	
   1. 여러가지 자료형의 Data를 모두 저장할 수 있다.
      ex) int, double, char, boolean, String etc
   2. 순서없이 입.출력 한다.(수학적인 집합과 유사한 개념)
   3. 중복된 Data를 저장하지 못한다.(중복된 값은 1번만 저장)
	- ***중복 알고리즘을 처리하는 경우 사용(중복 문제 해결 시 사용)
		"유일한 값을 갖는 자료구조로 사용됨"

# Set 인터페이스의 객체 생성
	Set set = new HashSet();	// 업캐스팅
		- Set은 인터페이스이기에, 자체적으로 객체 생성이 불가
		- Set 인터페이스의 구현체인 HashSet클래스를 사용하여 Set 객체 생성

	HashSet set = new HashSet();
		- set인터페이스의 하위상속을 받는 HashSet클래스만으로도 객체 생성 가능
	
# Set인터페이스의 주요 기능
	- boolean add(Object e): Set에 새로운 요소 추가(이미 존재하는 요소는 추가X)
	- boolean remove(Object e): Set에 특정 요소를 제거(요소 없는 경우 아무동작X)
	- int size(): set에 포함된 요소의 개수 반환
	- void clear(): Set의 모든 요소를 제거하여 비움
	- boolean isEmpty(): TreeSet이 비어있는지 여부 확인
		  	     비어있으면 true, 요소가 하나이상 존재하면 false


### Iterator 인터페이스
 : 여러요소를 담는 객체(List, Set, Map)를 순회하며 요소에 접근하는데 사용
# Iterator의 주요 사용 예시
- for - each 루프 : 객체 순회시 사용
- while 루프: 더 복잡한 조건 필요한 경우 hasNext()메소드 사용하여 객체 순회
- 요소 삭제: remove()메소드 사용하여 객체 요소 안전히 제거
# Iterator 인터페이스의 메소드
- boolean hasNext(): Iterator가 순회하면서 가져올 요소가 남아있는지 확인
		     남은 요소 있으면 true, 요소 모두 순회시 false 반환
- Object next(): Iterator가 다음 요소를 반환하는 메서드
		- hasNext()메소드로 확인한 후 호출
		- 남은 요소가 없는데 next()메소드 호출시, NoSuchElementException 예외발생
- void remove(): 현재 순회중인 요소 삭제하는 메소드
		- next()를 호출하여 순회중인 요소를 확인 후 제거해야 함
		- 같은 요소를 2번이상 삭제하려 하면 IllegalStateException 예외발생


### TreeSet 클래스
: 중복을 허용하지 않고 정렬된 순서로 요소를 저장하는 자료구조
	- Collection Framework에서 제공하는 클래스
	- Set의 대표적인 구현 클래스(HashSet, TreeSet, LinkedHashSet)

     1. 데이터를 오름차순으로 정렬해서 저장하고 출력하는 기능 제공
	- 정렬 기준을 커스텀하게 지정 가능
	  (Comparable 또는 Comparator인터페이스를 구현하여 정렬기준 제공)
	- 요소들이 정렬되었기에 순서를 유지하며 효율적으로 검색 가능
   2. 중복된 데이터를 저장할 수 없음(중복 허용X)
   3. Iterator를 통해 순회할 때 정렬된 순서로 요소들을 반환

# TreeSet클래스 객체 생성
	TreeSet hs = new TreeSet();
	- 빈 TreeSet객체를 생성. 기본적으로 오름차순 정렬됨

# TreeSet클래스의 주요 메소드
	- boolean add(E e): TreeSet에 요소 추가. 중복된 요소 허용X
			    삽입이 성공하면 true반환, 이미 존재하는 경우 false반환
	- boolean remove(Object o): 지정된 요소를 TreeSet에서 제거
				   요소를 제거하면 true, 요소 존재하지 않으면 false반환
	- int size(): TreeSet에 저장된 요소의 개수 반환
	- boolean isEmpty(): TreeSet이 비어있는지 여부 확인
		  	     비어있으면 true, 요소가 하나이상 존재하면 false
	- clear(): TreeSet의 모든 요소를 제거하여 비움
	- iterator(): TreeSet에 저장된 요소들을 순회하기 위한 Iterator 객체를 반환






