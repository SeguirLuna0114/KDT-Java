* 자료구조(Data Structure)
   java.util.*;

   ex) Set, List, Vector, Map, Queue, Stack etc

# 제네릭(Generic) <>
  : 데이터 타입을 일반화하여, 자료구조에 1가지 자료형의 데이터만 저장할 수 있도록 함
	-<E> : Object와 같은 의미를 가짐

ii. List 인터페이스 - ArrayList (상속받는 클래스)

    1. 여러가지 자료형의 Data를 모두 저장할 수 있다.
      ex) int, double, char, boolean, String etc
    2. 순서있는 입.출력 처리(index번호 순으로 저장됨)
	"순차적인 자료구조 => 순서대로(인덱스 번호 순으로) 데이터 저장"
	- 순서가 있는 데이터의 집합
	- 가변적인 크기를 가짐.(요소의 추가/삭제에 따라 크기 증감)
    3. 중복된 Data를 저장 할 수 있다.(중복 요소 허용)


# List 인터페이스의 객체 생성(구현한 대표적 클래스 ArrayList, LinkedList 활용)
	List list = new ArrayList();	// 업캐스팅
		- List은 인터페이스이기에, 자체적으로 객체 생성이 불가
		- List 인터페이스의 구현체인 ArrayList클래스를 사용하여 List객체 생성

	ArrayList list = new ArrayList();
		- List인터페이스의 하위상속을 받는 ArrayList클래스만으로도 객체 생성 가능


# List 인터페이스의 주요 기능
	1. 요소 추가
	- boolean add(Object e): List의 끝에 요소 추가(중복 가능)
	- void add(int index, Object e): 지정된 인덱스에 요소 추가

	2. 요소 반환/가져오는 기능(리스트 요소 출력하는 메소드)
	- Object get(int index): 지정된 인덱스에 있는 요소 반환

	3. 요소 삭제
	- boolean remove(Object e): List에 특정 요소를 제거. 삭제 성공시 true반환
	- Object remove(int index): 지정된 인덱스에 있는 요소 삭제하고, 삭제된 요소를 반환

	4. 그 외
	- int size(): List의 크기(요소의 개수) 반환
		-Collection.size(): 해당 컬렉션에 포함된 요소의 개수 반환
		- Array.length 속성: 배열의 크기를 나타내는 속성
		-String.lentgth()메소드: 문자열의 길이(문자열에 포함된 문자의 개수)반환

	- void clear(): List의 모든 요소를 제거하여 비움
	- boolean isEmpty(): List가 비어있는지 여부 확인
		  	     비어있으면 true, 요소가 하나이상 존재하면 false


# List 출력하는 방법
	1. Object get(int index)메소드를 활용하여, 지정된 인덱스에 있는 요소 반환
	   for문을 활용하여 출력
		List list = new ArrayList();

		for (int i = 0; i < list.size(); i++) {
			Object s = list.get(i);
			System.out.println(s);
		}
		
	2. 향상된 for문을 활용하여 출력
	   " for (변수타입   변수 : 순차적 자료구조) {...} "

		for (Object element : list) {
			System.out.print(element + "\t");
		}

	3. 반복자Iterator를 활용하여 출력
		Iterator elements = list.iterator();
		
		// boolean hasNext(): Iterator가 순회하면서 가져올 요소가 남아있는지 확인
		// 			가져올 데이터가 있을때만 true
		while (elements.hasNext()) {
			// Object next(): Iterator가 다음 요소를 1개씩 반환하는 메서드
			System.out.println("\t\t" + elements.next());
		}


## ArrayList 클래스
: 크기를 동적으로 조절할 수 있는 동적배열 자료구조를 구현한 클래스
- 배열의 크기를 미리 지정하지 않고 필요에 따라 요소 추가/삭제 가능


# ArrayList 객체생성
* 객체생성 : 클래스를 기반으로 해당 클래스의 인스턴스(객체)를 생성하는 과정
- ArrayList를 사용하기 위해선  new 연산자를 사용하여 객체를 생성해야 함

## 제네릭을 활용하여 객체 생성
- Generic(제네릭)클래스이기에, 생성자 호출 시, 타입파라미터를 지정하여 
  어떤 타입의 요소를 저장할 지 지정해줘야 함
- 타입 파라미터로는 '클래스 이름' 이나 '기본 데이터타입'등을 사용 가능

case1)	제네릭을 활용하여 객체생성
	(타입파라미터 - 'String 데이터타입')
ex)	String객체를 저장하는 ArrayList생성
	ArrayList<String> stringList = new ArrayList<String>();
	// ArrayList는 타입 파라미터로 지정된 데이터타입과 일치하는 요소만 저장 가능

case2)	기본데이터타입을 활용하여 객체 생성
	(타입파라미터 - '기본 데이터타입')
	- 기본 데이터타입을 사용하고 싶은 경우, 해당 데이터타입의 Wrapper클래스를 사용
ex)	int데이터타입을 저장하는 ArrayList를 생성하려면 Integer Wrapper클래스 사용
	ArrayList<Integer> intList = new ArrayList<Integer>();

case3)	클래스를 활용하여 객체 생성
	(타입파라미터 - '클래스')
	- 클래스를 활용하여, 기존에 정의된 클래스타입을 사용 가능
ex)	BoardVO클래스의 객체 생성
	1. 변수 선언 & 객체 생성 및 할당
	- BoardVO객체를 저장하기 위해 ArrayList<BoardVO>를 사용하여 ArrayList 생성
	- new키워드를 사용하여 ArrayList<>의 생성자 호출

	ArrayList<BoardVO> boardList = new ArrayList<BoardVO>();
	// BoardVO클래스 - 게시물 작성자, 제목, 이메일, 글내용, 비밀번호를 멤버변수로 갖고있음
	// ArrayList<BoardVO> boardList: ArrayList<BoardVO>타입의 boardList변수 선언
	// new ArrayList<BoardVO>() : 생성자를 호출하여 ArrayList 객체 생성

	2. -1) 변수 선언
	   -2) 객체 생성 및 할당
	ArrayList<BoardVO> boardList;
	// ArrayList객체를 참조하기 위한 boardList변수를 선언
	// 이때, 변수는 초기화되지 않은 상태, null값을 가짐

	boardList = new ArrayList<BoardVO>();
	// new연산자로 ArrayList 객체를 생성하고, 객체의 참조를 boardList변수에 할당
	=> boardList변수는 생성된 ArrayList객체를 참조


# ArrayList 주요 메소드
- boolean add(Object element): 리스트에 새로운 요소 추가
- boolean addAll(Collection<? extends E> c): 다른 컬렉션의 모든 요소를 리스트에 추가
	ex)	ArrayList<String> fruits = new ArrayList<>();
		fruits.add("apple");
		fruits.add("banana");

		list.addAll(fruits); // "apple"과 "banana"를 리스트에 추가

- Object get(int index): 주어진 인덱스에 해당하는 요소를 반환
- int indexOf(Object element): 주어진 객체가 리스트에서 처음으로 등장하는 인덱스를 반환
			      만일, 객체가 리스트에 없으면 -1을 반환
- void set(int index, E element): 주어진 인덱스에 해당하는 요소를 새로운 요소로 교체
- Object[] toArray(): 리스트의 요소들을 배열로 반환

- boolean remove(Object element): 주어진 객체와 동일한 첫번째 요소를 리스트에서 삭제
- boolean remove(int index): 주어진 인덱스에 해당하는 요소 삭제

- int size(): 리스트의 요소 개수를 반환
- boolean isEmpty(): 리스트가 비어있는지 여부를 반환. 요소가 있으면 false 없으면 true
- void clear(): 리스트의 모든 요소를 삭제하여 비움
- boolean contains(Object element): 주어진 객체가 리스트에 포함되어있는지 여부 반환




