* this와 super

" 객체 자신을 가리키는 키워드 this. "
this.  : 생성자와 메소드 안에서 멤버변수(인스턴스변수)와 (메서드의)매개변수 이름이
         동일한 경우에 주로 사용함. => this.을 통해 인스턴스변수를 구별 가능
	- 객체지향 프로그래밍에서 사용
	- 현재 실행중인 메서드나 생성자가 속한 객체 자신을 참조하는 경우 사용
	 ex) public Test(int a, int b){
		this.a = a;
		this.b = b;
	     }

" 생성자에서 다른 생성자를 호출하는데 사용되는 특수형태 키워드 this() "
this() : 같은 클래스안에 있는 생성자 내부에서, 다른 생성자를 호출할때 사용
	- 한 생성자에서 다른 생성자 호출시 코드의 중복을 줄이고,
	   초기화 로직을 재사용할 수 있도록 도와줌
	- this() 호출은 생성자의 첫 번째 문장으로 작성되어야 함
	ex)  public class Person {
	    	private String name;
	    	private int age;

		public Person() {	
			// this()를 통해 Person(String, int) 생성자 호출
        		this("John Doe", 30); // 다른 생성자를 호출하여 기본 값을 설정
    		}

    		public Person(String name, int age) {
			// this.
        		this.name = name;     // 매개변수와 인스턴스변수 같은경우 사용
        		this.age = age;
    		}
	     }

------------------------------------------------------------------------------------
<상속관계에서 사용되는 특수 키워드/메서드>

"상위 클래스의 필드(멤버)에 접근"
super. : 부모 클래스안에 있는 멤버변수와 메소드를 호출할때 사용
	- 하위(자식)클래스에서 상위(부모)클래스의 멤버(필드/메서드)에 접근하는데 사용
	- 하위 클래스는 부모 클래스로부터 상속받으며, 부모 클래스의 멤버를 사용할수 있어야 함
	- 하위 클래스에서 상위 클래스의 필드(멤버)와 동일한 이름의 필드(멤버)가 있을 수 있음
	  => 이때, super키워드를 사용하여 상위 클래스의 필드(멤버)에 접근 가능

          ex) super.x         super.parentPrn()
	ex) class Animal {
    		String sound = "Animal Sound";

    		void makeSound() {
        		System.out.println(sound);
    		}
	     }

	    class Dog extends Animal {
    		String sound = "Bark";

    		void makeSound() {
       			System.out.println(sound);      // 하위 클래스의 sound 출력
			// super.sound: 상위클래스(Animal)의 sound에 접근
        		System.out.println(super.sound); // 상위 클래스의 sound 출력
   		 }
	     }


"하위클래스의 생성자에서, 상위클래스의 생성자를 호출하는 특수 메서드"
super() : 하위클래스의 생성자에서, 상위클래스의 생성자를 호출하라는 의미
	- 하위클래스의 생성자는 상위 클래스의 생성자를 먼저 호출하여 상위클래스 필드 초기화
	    -> 하위클래스의 필드 초기화 (초기화작업 수행)
	- super()호출은 생성자의 첫번째 문장으로 작성해야 함
	ex) class Animal {
    		String sound;

    		Animal(String sound) {
        		this.sound = sound;
    		}
	    }

	    class Dog extends Animal {
    		String breed;

    		Dog(String sound, String breed) {
			// super(sound): Animal클래스의 생성자를 호출 
			    -> sound필드 초기화 -> Dog클래스의 breed필드 초기화
        		super(sound); // Animal 클래스의 생성자 호출
        		this.breed = breed;
    		}
	     }

