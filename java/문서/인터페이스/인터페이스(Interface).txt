인터페이스(Interface)
: 클래스들이 어떤 메소드들을 구현해야 하는지 정의하는 추상 형태의 참조 타입

- 상속받는 하위 클래스에서는 인터페이스를 구현해 추상메소드와 default메소드를 오버라이딩하고,
  정적메소드와 상수는 인터페이스 이름을 통해 "직접"호출하고 참조 가능

"인터페이스는 오로지 메소드와 상수만을 정의 가능"
- 구성)	1. 추상 메소드(Abstract Method) : 선언만 있고 구현은 없는 메소드
		- public abstract 생략 가능(모든 메서드는 암묵적으로 public이며 abstract)
	   	- 인터페이스를 구현하는 클래스에서 "반드시"구현되어야 함
	ex) interface MyInterface {
    		// 추상 메서드(public abstract 생략)
    		void abstractMethod();

	------------------------------------------------------------
	2. 디폴트 메소드(Default Method) : 인터페이스에 기본적인 구현을 가지는 메소드
		- 인터페이스를 구현한 클래스에서 오버라이딩 하지 않으면 기본 구현이 사용됨
		- 인터페이스를 상속받는 하위 클래스에서 디폴트 메서드를 오버라이딩하여 
		  해당 하위 클래스에서 독자적인 구현 가능
	ex)     // default 메서드
    		default void defaultMethod() {
        		System.out.println("This is a default method.");
    		}


	3. 정적 메소드(Static Method) : 인터페이스의 클래스 레벨에서 정적 메소드 정의 가능
		- 인터페이스 이름으로 직접 호출 가능
	ex)	// static 메서드
    		static void staticMethod() {
        		System.out.println("This is a static method.");
    		}

	4. 상수(Constant) : 모든 변수는 상수로 취급되며, (필드를 가질수X)
			   자동적으로 public static final 특성을 가짐(수정불가)
		- 인터페이스를 구현한 클래스에서 해당 상수를 사용할 수 있음
		- int, double, float, boolean 등을 직접 사용가능
	ex)	// 상수
		 int CONSTANT_VALUE = 42;


-인터페이스 선언 : "interface" 키워드 사용하여 정의
ex)	public interface MyInterface {


- 인터페이스 구현 : 'implements'키워드 사용하여 클래스에서 해당 인터페이스 구현
ex)	public class MyClass implements MyInterface {
		// 인터페이스를 구현하면, 인터페이스의 모든 추상 메서드를 반드시 구현해야 함
    		@Override
    		public void abstractMethod() {
        		// 구현 내용
    		}
	}

- 인터페이스끼리의 상속: 'extend'키워드로 상속받아야 함. 다중상속 가능
	- 인터페이스도 다른 인터페이스를 상속받을 수 있음
	- 상속을 위해 하위 인터페이스에서는 상위 인터페이스의 모든 "추상 메소드"를 상속받음
	   상위 인터페이스에서 선언된 메소드들을 하위 일반 구현 클래스에서 모두 구현


 역할: 클래스가 특정 메서드를 반드시 구현하도록 강제하는 역할
	(클래스가 가져야 하는 메서드의 규약 정의)

- 인터페이스를 구현하면, 인터페이스의 모든 추상 메서드를 반드시 구현해야 함
	* 다형성과 유연성을 제공: 클래스가 특정 인터페이스를 구현하면,
  			그 클래스는 인터페이스에 선언된 모든 메서드를 반드시 구현해야 함
  	 => 클래스들은 동일한 인터페이스를 구현하더라도 각자의 방식으로 메서드 구현이 가능


- 특징:
1. 추상클래스와 유사하지만, 추상클래스보다 더 추상화 된 형태
  => 인터페이스는 자체적으로 객체 생성을 할 수 없음(인터페이스로 객체생성X)
     따라서 일반 구현 클래스로 implements키워드를 통해 상속해서 사용해야 함
2. 메서드의 선언만 가능. 변수를 가질 수 없음
	- 해당 메서드를 실제로 구현하는 코드는 인터페이스를 상속받은 클래스에서 작성해야 함
3. 모든 메서드는 암묵적으로 public이며 abstract임 (public abstract 생략 가능)
	- 따라서 abstract키워드를 명시하지 않아도 됨
	(default 메서드와 static 메서드도 지원됨)

4. 다중 상속의 형태로 다중 인터페이스 구현이 가능 => 유연하고 확장가능한 코드 작성이 가능
	(다중 상속이 가능 => 여러 인터페이스를 동시에 구현 가능)
	- 인터페이스 2개를 상속받을 때, 상속받는 순서는 바뀌어도 상관X

5. 인터페이스에서 선언된 변수는 자동적으로 public, static, final 특성을 가짐

6. 인터페이스를 상속받은 일반 클래스는 인터페이스의 추상메소드를 반드시 메소드 오버라이딩 해야함
	-1) 추상메소드의 이름, 매개변수 타입, 반환타입이 모두 일치해야 함
	-2) public 접근제어자 - 인터페이스의 메서드와 동일한 접근제어자()를 가져야 함
	    (인터페이스의 메소드는 기본적으로 public이기에, 오버라이딩된 메소드도 public)
	-3) 클래스가 여러 인터페이스를 구현하는 경우, 같은 이름의 메소드를 오버라이딩 할수 있음

7. 추상클래스와 인터페이스를 모두 상속받는 경우에는 추상클래스를 먼저 상속받고, 
  인터페이스를 그 다음으로 상속받아야 함
  (자바에서 다중 상속을 지원하지 않기 때문)
ex)	abstract class AbstractClass {
    		// 추상클래스의 멤버들과 추상 메서드 정의
	}
	interface InterfaceA {
    		// 인터페이스A의 메서드 정의
	}
	interface InterfaceB {
    		// 인터페이스B의 메서드 정의
	}
	class MyClass extends AbstractClass implements InterfaceA, InterfaceB {
    		// MyClass에서 추상클래스와 인터페이스들의 메서드를 구현
	}






