* Socket 통신 "양방향 통신 구현"
* Socket 인터페이스
:  네트워크 통신을 위한 추상화된 인터페이스
- 소켓은 클라이언트와 서버 사이에서 데이터 통신을 가능하게 해주는 커뮤니케이션 엔드포인트
- 네트워크 소켓은 컴퓨터 네트워크를 통해 데이터를 전송하고 수신하는 데 사용
- 클라이언트-서버사이 네트워크 통신을 구현, peer-to-peer 통신 등 다양한 형태로 활용

- Socket 및 ServerSocket 클래스를 제공하여 소켓 프로그래밍을 지원


* 소켓의 유형
		"클라이언트와 서버간의 데이터교환"
	client					Server
1. Socker(ip주소, port번호)		1. Server Socket(port번호)	
2. 입출력 스트림 객체 생성		2. 입출력 스트림 객체 생성
3. 데이터 입출력 처리			3. 데이터 입출력 처리


1. 클라이언트 소켓(Client Socket)
	" 데이터를 서버로 전송 "
	- 클라이언트 프로그램이 서버로 연결하기 위해 사용하는 소켓
	- 서버의 IP 주소와 포트 번호를 지정하여 서버에 연결하고 데이터를 전송

2. 서버 소켓(Server Socket)
	" 클라이언트로부터 데이터를 수신 "
	- 서버 프로그램이 클라이언트의 연결 요청을 수락하고 
	  데이터를 교환하기 위해 사용하는 소켓
	- 특정 포트 번호를 바인딩하여 클라이언트의 연결을 기다림
	- 클라이언트가 연결되면 새로운 소켓을 생성하여 데이터 통신에 사용

-------------------------------------------------------------------------------------

o ServerSocket 클래스
: 서버 측에서 클라이언트의 연결을 수락하고, 데이터 통신을 위한 소켓을 생성하는 기능을 제공

- 클라이언트의 연결을 기다리고 수락하는 역할
- 연결이 수락되면 해당 클라이언트와 데이터 통신을 위한 Socket 객체를 생성


o 생성자
case)	ServerSocket(int port) 생성자
	- 포트 번호를 인자로 받음(특정 포트 번호에서 들어오는 클라이언트 연결을 수락)
		* 포트번호:  클라이언트가 서버에 접속할 때 사용하는 식별자

ex)	try {
    		ServerSocket serverSocket = new ServerSocket(1234);
   		System.out.println("Waiting for a client to connect...");
    
		// 클라이언트 연결을 수락하고 처리
    		Socket clientSocket = serverSocket.accept(); // 클라이언트 연결을 기다림
    		System.out.println("Client connected: " 
				+ clientSocket.getInetAddress().getHostAddress());

    		// 클라이언트와 통신을 위한 작업 수행
    
    		clientSocket.close(); // 클라이언트 소켓 닫기
		serverSocket.close(); // 서버 소켓 닫기


o 메소드와 기능
1. Socket accept()
	: 클라이언트의 연결을 기다리고, 연결이 수락(해당 클라이언트가 접속)되면 
	   해당 클라이언트와 통신을 위한 Socket 객체를 생성하고 반환
	- 블로킹 메서드로, 클라이언트가 연결될 때까지 대기
ex)	Socket clientSocket = serverSocket.accept(); 
	// 클라이언트 연결을 기다림


2. void close(): 서버 소켓을 닫음. 
		 이후에는 해당 포트 번호로 다른 클라이언트 연결을 수락할 수 없음
ex)	serverSocket.close(); // 서버 소켓 닫기


3. InetAddress getInetAddress(): 서버 소켓의 로컬 IP 주소를 반환
	String IPAddress = Socket.getInetAddress().getHostAddress();
	- getHostAddress() 메서드: InetAddress 객체에 사용되며, IP 주소를 문자열 형태로 반환

ex)	// Socket 객체를 통해 연결된 상대방의 IP 주소를 가져옴
	socket = serverSocket.accept();
	System.out.println("Clinet IP : " + socket.getInetAddress().getHostAddress());

ex)	// ServerSocket 객체를 통해 해당 서버 소켓이 바인딩 된 로컬 IP주소를 가져옴
	ServerSocket serverSocket = new ServerSocket(1234);
	InetAddress localAddress = serverSocket.getInetAddress();
	System.out.println("Local IP Address: " + localAddress.getHostAddress());

cf>	String IPAddress = Socket.getInputStream().readObject().toString();
	- getInputStream(): Socket 객체의 메서드.
			   클라이언트와 서버 간의 데이터를 읽어들일 수 있는 입력 스트림을 반환
	- readObject(): 입력 스트림에서 객체를 읽어옴. 객체를 역직렬화
	- toString(): 읽어온 객체를 문자열로 변환


4. getLocalPort(): 서버 소켓이 바인딩되어 있는 로컬 포트 번호를 반환
ex)	ServerSocket serverSocket = new ServerSocket(1234);
	int localPort = serverSocket.getLocalPort();
	System.out.println("Local Port: " + localPort);

5. isBound(): 서버 소켓이 바인딩되었는지 여부를 반환
ex)	ServerSocket serverSocket = new ServerSocket(1234);
	boolean isBound = serverSocket.isBound();
	System.out.println("Is Bound: " + isBound);

6. isClosed(): 서버 소켓이 닫혀있는지 여부를 반환
ex)	ServerSocket serverSocket = new ServerSocket(1234);
	boolean isClosed = serverSocket.isClosed();
	System.out.println("Is Closed: " + isClosed);


---------------------------------------------------------------------------------------

o Socket 클래스
" 클라이언트와 서버간의 통신을 담당하는 클래스"
: 네트워크 연결을 설정하고 데이터를 주고받을 수 있는 기능을 제공
- Socket 클래스는 TCP 프로토콜을 기반으로 동작하며, 클라이언트 측과 서버 측 양쪽에서 사용됨

	1. Socket 클래스를 사용하여 클라이언트는 서버에 연결을 설정
		- 네트워크를 통해 실제 데이터를 주고받을 수 있는 통로를 생성

	2. 입출력 스트림을 이용하여 데이터 송수신 가능
		- InputStream으로는 데이터를 읽어들이고, OutputStream으로는 데이터를 보냄

o 생성자를 이용해 객체생성
case)	Socket(String host, int port)생성자로 socket 객체 생성
	- 지정된 IP 주소와 포트 번호를 가진 서버에 접속하기 위한 Socket 객체를 생성
	- 생성된 소켓을 사용하여 데이터 송수신 등 작업 수행

ex)	// 서버에 연결하는 소켓 생성
	Socket socket = new Socket("192.168.1.100", 1234);
	

case2)	기본 생성자로 생성 후 connect() 메서드 사용
	- 서버의 IP주소와 포트번호 지정 가능
	- 기본 생성자로 Socket 객체를 생성한 후, connect() 메서드를 사용하여 연결
ex)	String serverIP = "192.168.1.100";
    	int serverPort = 1234;
    
    	// 서버에 연결하는 소켓 생성
    	Socket socket = new Socket();
    	socket.connect(new InetSocketAddress(serverIP, serverPort));


o Socket 클래스의 주요 메소드
1. getInputStream() 및 getOutputStream() 메서드
	: InputStream 객체와 OutputStream 객체를 반환하여 데이터를 읽고 쓸 수 있게 함
ex)	// 서버로부터 객체를 받기 위한 ObjectInputStream 객체를 선언
	// - ObjectInputStream은 직렬화된 객체를 읽어오기 때문에 
	// 	 해당 객체의 클래스 구조나 직렬화 버전 등의 일치가 필요
	ObjectInputStream ois;
	// 서버로 객체를 보내기 위한 ObjectOutputStream 객체를 선언
	ObjectOutputStream oos;

	// 서버로부터 객체를 받기 위한 ObjectInputStream 객체를 생성
	ois = new ObjectInputStream(socket.getInputStream());
	//  서버로 객체를 보내기 위한 ObjectOutputStream 객체를 생성
	oos = new ObjectOutputStream(socket.getOutputStream());

	// 클라이언트의 아이디를 서버로 전송
	String ID = "gemini";
	oos.writeObject(ID);

ex)	// 서버로 데이터를 보내기 위한 DataOutputStream 객체를 선언하고 초기화
	DataOutputStream dos = null;
	// 서버로부터 데이터를 받기 위한 DataInputStream 객체를 선언하고 초기화
	DataInputStream dis = null;

	// 서버와 데이터를 주고받기 위한 스트림 형성
	// - 서버로 데이터를 보내기 위한 DataOutputStream 객체를 생성
	dos = new DataOutputStream(socket.getOutputStream());
	// - 서버로부터 데이터를 받기 위한 DataInputStream 객체를 생성
	dis = new DataInputStream(socket.getInputStream());

	// 입력받은 메시지를 UTF-8 형식으로 인코딩하여 서버에 전송
	dos.writeUTF(message);

	// DataInputStream을 통해 서버로부터 받은 데이터를 읽어와 출력
	System.out.println("Server Message : " + dis.readUTF());


2. getInetAddress() 메서드
	: 연결된 상대방의 InetAddress 객체를 반환하여 원격 호스트의 IP 주소 정보 얻음
ex)	// 연결된 상대방의 IP주소 얻음
	InetAddress serverAddress = socket.getInetAddress();
	// 문자열로 출력
	String serverIPAddress = serverAddress.getHostAddress();
        System.out.println("Connected to server IP: " + serverIPAddress);


3. getPort() 메서드: Socket 객체가 연결된 원격 호스트의 포트 번호를 반환
	- 서버로부터 연결을 수락하거나, 클라이언트가 연결을 설정할 때 
	  원격 호스트의 포트 번호를 확인할 때 사용
	- 주로 서버측에서 클라이언트의 포트번호 확인을 위해 사용
ex)	// 클라이언트의 원격 포트 번호 얻기
	int remotePort = socket.getPort();

4. getLocalPort() 메서드: Socket 객체가 사용하는 로컬 포트 번호를 반환
	- 해당 소켓이 로컬에서 어떤 포트 번호로 통신하는지 확인
	- 주로 클라이언트 측에서 getLocalPort() 메서드를 사용하여 로컬 포트 번호를 확인
cf>	// 로컬 포트 번호 얻기
        int localPort = socket.getLocalPort();


5. close()메소드: 소켓 연결을 닫음

6. isConnected() 메서드: 소켓이 연결되어 있는지 여부를 반환
7. isClosed() 메서드: 소켓이 닫혀 있는지 여부를 반환






