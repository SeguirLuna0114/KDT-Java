Singleton(싱글톤)
: 특정 클래스의 인스턴스(객체) 생성이 1번만 수행되게 보장하는 패턴
- 해당 클래스의 객체를 하나의 인스턴스만 생성하고, 이를 여러곳에서 공유하며 사용

-이유	1. 여러 곳에서 동일 인스턴스를 사용해 공유 가능
	   ex) 로깅, 설정 정보, 데이터베이스 연결과 같은 공통자원을 싱글톤으로 관리
	2. 여러 객체간의 공유되는 전역 상태 효과
	3. 객체생성 비용 절감

- 싱글톤클래스의 정적메소드를 사용하여 유일한 인스턴스를 얻음
       싱글톤패턴구현 클래스		       싱글톤구현클래스에서 정의된 정적메소드
	SingletonClassName 변수명 = SingletonClassName.getInstance();

-패턴 구현 방법
1. 정적(Static)변수를 사용하여 인스턴스 저장
	private static Singleton s = new Singleton();
2. 생성자를 private로 선언하여 외부에서 객체생성 방지
	private Singleton() {};
3. 정적메소드를 사용하여 외부에서 해당 클래스의 유일한 인스턴스를 얻을 수 있게 함
	public static Singleton getInstance() {
		return s;	// Singleton객체 s 전달
	}

ex) public class Singleton {
    	// 정적 변수로 유일한 인스턴스를 저장합니다.
    	private static Singleton instance;

    	// private 생성자로 외부에서 객체를 생성하지 못하도록 합니다.
    	private Singleton() {};

    	// 정적 메소드를 사용하여 유일한 인스턴스를 반환합니다.
    	public static Singleton getInstance() {
        	if (instance == null) {
            	instance = new Singleton();
        	}
        	return instance;
    	}
    }

