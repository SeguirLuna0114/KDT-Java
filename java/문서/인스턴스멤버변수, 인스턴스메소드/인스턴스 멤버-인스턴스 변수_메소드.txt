멤버변수 - 인스턴스 멤버, 정적 멤버

#인스턴스 멤버 (Instance Member)
: 클래스로부터 생성된 객체의 인스턴스가 생성될 때마다 독립적으로 할당되는 변수
	Car(String model) {
		this.model = model	// this.인스턴스멤버
	}

-인스턴스 필드, 인스턴스 메소드 "호출시 객체 필요"

 1) 인스턴스 필드: 힙 영역의 객체마다 갖고있는 멤버, 객체마다 다른 데이터 저장
	-클래스 내부에서 선언됨. 객체가 생성될때마다 별도 인스턴스 필드 메모리가 할당됨
	-this키워드를 사용하여 정의. this를 통해 접근
	-메모리 저장 위치: 힙 메모리(Heap)에 저장
	-독립적인 값 유지: 각 인스턴스마다 다른 값을 가짐, 
			  객체마다 고유한 상태를 유지하는 데 사용

### 인스턴스 필드를 사용하는 경우
* 객체의 상태에 의존하여 각각의 객체 인스턴스에 고유한 값을 갖는 경우
  (객체마다 다른값이 필요한 경우)
ex) 사각형의 넓이 구하는 프로그램 - 사각형의 너비, 높이
	public class Rectangle {
    		private int width; // 인스턴스 필드: 사각형의 너비
   		 private int height; // 인스턴스 필드: 사각형의 높이
    	public Rectangle(int width, int height) {
        	this.width = width;
        	this.height = height;
    	}

  2) 인스턴스 메소드: 객체가 있어야 호출 가능한 메소드
	-형식) public void 인스턴스메소드명() {...}
		-public 키워드 사용하여, 공개적으로 접근 가능하게 할 수 있음

	-객체의 인스턴스 멤버변수에 접근하기 위해 this키워드 사용 가능
	-클래스로부터 생성된 개별 객체(인스턴스)의 동작을 정의
		ClassName obj = new ClassName();  // 객체 생성
		obj.instanceMethod();            // 인스턴스 메서드 호출
	-인스턴스 메소드내에서는 정적필드도 사용 가능(인스턴스필드O, 정적필드O)


### 인스턴스 메소드를 사용하는 경우
* 객체의 상태를 변경하거나 조회하는 동작 수행시 사용
   - 인스턴스 메소드는 객체의 인스턴스에 속함 => 객체관련 동작 수행에 사용
ex)	// 인스턴스 메소드: 카운트 증가 기능
    	public void increment() {
        	count++;
    	}
   	 // 인스턴스 메소드: 현재 카운트 값 반환 기능
     	public int getCount() {
        	return count;
    	}

* 객체 간의 정보교환과 객체의 행동을 함께 표현 가능
ex)	public class Dog {
    		private String name;

    		// 인스턴스 메소드: 개의 이름 설정
    		public void setName(String name) {
        		this.name = name;
    		}

    		// 인스턴스 메소드: 개 소개
    		public void introduce() {
        		System.out.println("제 이름은 " + name + "입니다.");
    		}

* 메소드 오버라이딩: 상속관계에서는 인스턴스 메소드를 오버라이딩하여
		    하위클래스에서 상위클래스의 메소드를 재정의 가능
ex)	class Animal {
    		public void makeSound() {
        		System.out.println("동물이 소리를 낸다.");
    		}
	}

	class Dog extends Animal {	// Animal클래스 상속받음
    		@Override	// makeSound()메소드오버라이딩
    		public void makeSound() {
        		System.out.println("강아지가 멍멍 소리를 낸다.");
    		}
	}

	class Cat extends Animal {	// Animal클래스 상속받음
    		@Override	// makeSound()메소드오버라이딩
    		public void makeSound() {
        		System.out.println("고양이가 야옹 소리를 낸다.");
    		}
	}
