* 상속(Inheritance) : 
: 기존에 정의된 클래스를 기반으로 새로운 클래스를 만들 수 있게 해줌
- 필드와 메소드만 상속됨. 생성자는 상속X

- 사용하는 이유: 중복코드 줄이기 위함 / 통일성 있는 클래스 설계를 위함

- 자식클래스가 부모클래스를 상속받을 경우 extends로 상속받음
- 자식클래스는 부모클래스의 모든 필드와 메서드를 상속받음(접근가능)
	(단, 부모클래스의 생성자는 상속X)

- 부모클래스가 자식클래스에게 상속해주는것만 가능
  (부모클래스가 자식클래스 내의 필드나 메소드에 접근X)
   => 메인메소드에서 부모클래스의 객체 생성하는 것은 의미X
      따라서, "자식클래스의 객체를 생성"해야 함


* Parent클래스
부모클래스           class Parent{
상위클래스	  	멤버변수(0)
슈퍼클래스               메소드(0)
		  	생성자(X)
	             }

# 상위(부모) 클래스
: 기존에 정의된 클래스
- 기본적인 속성과 메소드들을 정의
- 모든 클래스의 최상위에는 Object클래스가 있으며, 
  이를 상속받지 않은 모든 클래스는 암묵적으로 Object클래스를 상속받음
ex)	// 상위클래스 Animal
	class Animal {
    		void sound() {
        		System.out.println("동물이 소리를 냅니다.");
    		}
	}

	// 하위클래스 Dog
	class Dog extends Animal {
    		// Animal 클래스의 sound() 메소드를 상속받음
    		// 추가적인 기능을 확장할 수 있음
    		void sound() {
        		System.out.println("강아지가 멍멍 소리를 냅니다.");
    		}
	}




* Sub클래스
자식클래스    	class Child  extends  Parent{
하위클래스
서브클래스	      }
파생클래스

# 하위(자식) 클래스
: 기존에 정의된 클래스를 상속받아 확장한 클래스
- 클래스를 상속받기 위해 하위클래스명 옆에 extends로 상속받음
  : class   하위(자식)클래스명	extends	  상위(부모)클래스명

- 상위클래스의 속성(필드)과 메소드를 물려받아 사용 가능
  (단, 상위클래스의 생성자는 상속X)
   => 따라서, 하위클래스는 상위클래스의 생성자를 직접 호출 or 새로운 생성자 정의하여 사용
class Animal {
    private String name;

    // 상위클래스의 생성자
    public Animal(String name) {
        this.name = name;
    }
}

class Dog extends Animal {
    // 하위클래스의 생성자
    public Dog(String name) {
        // 상위클래스의 생성자 호출
        super(name);
    }




