# super. 키워드: 부모 클래스에 있는 은닉된 멤버변수와 메소드를 호출 할때 사용

- 자식 클래스에서 부모클래스의 멤버 변수나 메소드를 참조하기 위해 사용되는 특수 키워드
- 부모 클래스 멤버: super를 사용하여 부모 클래스의 멤버(필드, 메소드)에 접근 가능
		ex) 메소드 내에서, 부모클래스의 은닉필드 참조
			// super.은닉필드명
		    System.out.println(super.name); // 부모 클래스의 name필드를 참조
		
		ex) 메소드 내에서, 부모클래스의 은닉메소드 참조
			// super.은닉메소드명
		    super.print(); // 부모 클래스의 print() 메소드 호출

- 범위: 자식클래스의 "메소드 안"에서만 사용될 수 있으며, 
	부모클래스의 멤버변수나 메소드 호출 시 사용

- 오버라이딩: 자식클래스에서 상위클래스의 메소드를 오버라이딩 할 때 사용
	     자식클래스에서 오버라이딩 된 상위 클래스의 메소드 호출 가능
ex)	class Dog extends Animal {
		@Override
    		void makeSound() {
			// super.키워드를 통해 부모클래스의 메소드 호출
			// 부모 클래스의 기능을 확장하고 재사용
        		super.makeSound(); // 부모 클래스의 makeSound() 메소드 호출
		}


- 필드 은닉 : 자식클래스에서 필드 오버라이딩되어 은닉된 상위 클래스의 필드에 접근시 사용
ex)	class Dog extends Animal {
    		void displayInfo() {
			// 부모 클래스의 멤버 변수 참조
			// super을 사용해 부모클래스의 멤버변수(필드)에 접근
        		System.out.println("Dog's name: " + super.name);

---------------------------------------------------------------------------------

# super(): 부모 클래스의 매개변수를 가진 생성자를 호출 할 때 사용
- 자식클래스의 생성자에서 super()키워드를 사용하여 부모클래스의 생성자 호출

- super(매개변수)을 사용하여 부모클래스의 매개변수를 가진 특정 생성자를 명시하면, 
  매개변수를 가진 생성자가 호출됨
  또한, 더이상 부모클래스의 기본생성자를 호출하지X

- 만일, super()을 생략한다면, 부모클래스의 기본 생성자가 호출됨

- 자식클래스가 생성될 때, 부모클래스의 생성자가 "먼저"호출되어 부모클래스 초기화 작업 수행
- super()은 반드시 자식클래스의 생성자 안에서 첫번째 라인에 위치해야 함

ex)	class Child extends Parent {
    		// 자식클래스의 기본생성자
		Child() {
        		super(); // 부모 클래스의 생성자 호출
        		System.out.println("Child constructor");
    		}



ex)	class Animal {
		String name;


	class Dog extends Animal {
		Dog(String name) {
			// 부모클래스의 멤버변수(name)의 값 설정
			super(name); // 부모 클래스의 생성자 호출
		}


-------------------------------------------------------------------------------
* this와 super

this.      : 생성자와 메소드에서 매개변수와 멤버변수 이름이 동일한 
             경우에 사용

	    public Test(int a){
		this.a = a;
	    }
this()   : 같은 클래스내에 있는 다른 생성자를 호출
	
super.   : 부모 클래스에 있는 은닉된 멤버변수와  메소드를 호출 
             할때 사용
super() : 부모 클래스의 매개변수를 가진 생성자를 호출 할 때 사용

