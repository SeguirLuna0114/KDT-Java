* 추상 클래스
: 인스턴스(객체)를 직접 생성할 수 없는 클래스
= 다른 클래스들이 공통적으로 가져야 할 속성과 메서드를 정의하고는 있음
  단, 직접적으로 해당 클래스의 인스턴스(객체)생성이 불가함
=> 대신, 추상 클래스를 "상속받은 하위 클래스"들이 "추상클래스의 메서드"를 반드시 "구현"하도록 함

- 여러 클래스의 공통된 특정(필드, 메소드)를 추출해서 선언한 것

- 목적: 상속 계층 구조에서 베이스 클래스로 사용
	=> 공통된 기능을 추상 메서드로 선언하여, 다양한 하위 클래스에서 각각의 방식으로 구현가능
	== 코드의 재사용성 유지보수성 높임

- 추상 클래스를 사용하는 경우 
	1) 여러 클래스들이 공통으로 가져야 하는 속성과 메서드가 있을 때,
	   추상 클래스를 사용해 코드의 중복을 줄이고, 코드 재사용성 높일 수 있음

	2) 일부 기본 구현을 제공하면서, 하위 클래스들이 추상 메서드를 구현하도록 강제할 경우 사용
	   -인터페이스와 클래스간의 중간형태로, 인터페이스처럼 100% 추상화되지 않고,
	    구현이 있는 메소드를 가질 수 있음

	3) 상속 계층 구조에서의 다형성(polymorphism): 
	   같은 부모클래스로부터 상속받은 추상메소드를
	   여러 하위 클래스들이 다른 방식으로 추상 메소드 구현이 가능(일관된 방식으로 다룰 수O)
		* 메소드 다형성(polymorphism)
		: 부모 추상 클래스를 상속 받으면, 자식 클래스들은 추상 메소드를 
		  모두 메소드 오버라이딩 해서 동일한 이름을 갖고 있으나,
		  서로 다른 내용으로 동작하는 것을 메소드 다형성이라 함

	4) 클래스 계층의 일부 기능을 미리 구현하고 싶을 때 사용
	   - 추상 클래스는 구현된 일반 메소드를 포함할 수 있기에, 이러한 기능을 미리 구현하여
	     하위 클래스에서 이를 재사용 할 수 있게해 반복적인 코드 사용을 피할 수 있음


- 일반적으로 인터페이스와 함께 사용되는 경우 多
  	- 인터페이스는 클래스들이 어떤 메서드를 반드시 구현해야 하는지 정의하는데 사용
- 인터페이스와의 차이점: 추상클래스 내에서 구현된 "일반 메서드"를 가질 수 있음

- 추상클래스 선언 방법 : 'abstract' 키워드를 사용하여 정의
ex)	public abstract class AbstractClass {

- 추상클래스의 인스턴스 생성하기 위해선,
  해당 추상 클래스를 "상속"받는 "하위 클래스"를 만들고, 하위 클래스에서 "모든" 추상 메서드를 
   "메소드 오버라이딩"(메서드 명을 같게 하고 내용을 달리하여)해서 구현해야 함
	* 메소드 오버라이딩: 부모 클래스의 메소드와 형식을 같게하고, 내용을 달리해서 구현
ex)	// 추상클래스를 상속받는 하위클래스
	public class SubClass extends AbstractClass {
    		// 추상 메서드의 구현
    		@Override	// 추상클래스의 추상메서드를 "메소드 오버라이딩"해서 구현
    		public void abstractMethod() {
        		// 구현 내용
    		}
	}
- 자동적으로 메소드 오버라이딩하는 방법
  : 추상클래스를 상속받는 자식클래스의 왼쪽[x]클릭 -> [Add Unimplemented methods]


- 추상 클래스는 추상 메서드 외에도, 구현이 있는 "일반 메서드"를 가질 수 있음O
ex)	public abstract class AbstractClass {
		// 구현이 있는 일반 메서드
    		public void regularMethod() {
       				// 구현 내용
    		}

- 추상 메서드: 메서드 선언만 있고, 구현 내용이 없는 메서드
		=> 이러한 추상메서드는 "하위 클래스"에서 구체적인 "구현"을 가짐
		=> 상속받은 클래스들이 특정 기능을 반드시 구현하도록 함

- 추상 메서드 선언 방법: 'abstract' 키워드를 사용하여 정의
			세미콜론(;)으로 끝남. 중괄호({})를 갖지 않음
ex)	// 추상 클래스 선언
	public abstract class AbstractClass {	
    		// 추상 메서드 선언
    		public abstract void abstractMethod();	// 중괄호 없이 세미콜론(;)으로 끝남

- 추상 클래스끼리 상속 받는 경우
	1. 최종적으로 상속받는 자식클래스는 일반 구현 클래스여야 함(추상 클래스는 객체생성X)
	   즉, 추상 클래스(부모 클래스) - 추상 클래스(자식클래스) - 일반 구현 클래스(자식 클래스)
	2. 메소드 오버라이딩(메소드 구현)은 추상 클래스를 상속받은 하위클래스에서 해야 함
	   -이때, 부모클래스를 상속받은 추상클래스에서 오버라이딩 해도 되고,
		  추상클래스를 상속받은 일반구현클래스(자식클래스)에서 오버라이딩 해도 됨
		(부모 추상 클래스의 메서드를 자식 클래스 중 하나에서만 오버라이딩하면 됨)


-특징
1. 자체적으로 객체를 생성할수 없는 클래스를 말한다.
   	abstract class AbsClass{
   }

2. 추상 클래스를 구성하는 요소는 추상메소드와 일반메소드, 멤버변수가         
   있다.
   abstract class AbsClass{
       int a=10;                                  //멤버변수
       abstract void Method01();         	//추상메소드
       void Method02(){                   	//일반 메소드
       }
   }

3. 추상 클래스를 상속 받을때는 extends를 이용해서 상속을
    받는다.

4. 추상클래스를 상속받은 일반 클래스는 추상클래스 안에 들어
   있는 추상메소드를 반드시 Method Overriding해야된다.

5. 추상 클래스도 단일 상속만 가능하다.(클래스의 다중상속을 허용하지 않는다.)



