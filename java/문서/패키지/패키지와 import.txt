패키지와 import

import 패키지명.클래스명;

-자동 import 단축키: [Ctrl]+[Shift]+[o]

1.  같은 패키지 안에 들어 있는 클래스 - import 불필요(X)

src - p2023_07_21 - Called.java : check()메소드
  
                  - Calling.java : main() 메소드


1)  같은 패키지 안에 들어 있는 클래스에 접근 하기 위해서는 접근 제어제가
     "public"이나  "default"  접근 제어자로 되어 있어야 한다.
	- private 접근제어자일 경우, 해당(동일) 클래스 내에서만 접근 가능하기에, import불가
	
2) 같은 패키지 안에 들어 있는 클래스에 접근 하기 위해서는 import 를 하지 
    않아도 된다.
	- 같은 패키지 내에서는 패키지 이름으로 직접접근 가능 => import 필요X
        - 객체 생성후, 객체명.메소드명()으로 호출가능
		*public클래스의 필드,메소드 - 접근가능
		*default클래스의 필드, 메소드 - 접근가능
		

2.   다른 패키지 안에 들어 있는 클래스 - import 필요(O)

src - a - b - Called.java : check()메소드

    - c - Calling.java : main() 메소드
	// Called.java와 Calling.java가 서로 다른 패키지 내에 존재  

1)  다른 패키지 안에 들어 있는 클래스에 접근 하기 위해서는 
    해당 클래스의 멤버(필드, 메소드)의 접근 제어자가 "public" 접근 제어자로 되어야 한다.

2)  다른 패키지 안에 들어 있는 클래스에 접근 하기 위해서는 해당 클래스를      
    import 를 해야된다. (import를 해서 해당 클래스를 명시적으로 가져와야 함)

     myPackage.MyClass obj = new myPackage.MyClass(); // 패키지 이름을 붙여서 사용

# 다른 클래스내의 메소드를 바로 호출하기위해서는,
  메소드가 static으로 선언되어 있어야 함
	ex)	PackageHelloWorld.printHello();	// 오류
		//  PackageHelloWorld 클래스의 printHello메소드가 
		// public void printHello() { 으로 선언되었기에 불가

# 해당 클래스의 객체를 생성하고 메소드 호출하는 이유
- 클래스의 메소드는 해당 클래스의 인스턴스(객체)에서 호출해야 함
  => 다른 패키지에 있는 클래스의 메소드 호출시, 해당 클래스의 인스턴스(객체)부터 생성해야
- 객체지향 프로그래밍에서는 캡슐화(클래스 내부 구현을 감춤)와
  모듈화(관련 기능을 하나의 클래스/모듈로 묶어서 코드 구성) 지향
-클래스의 상태 유지를 위하여 인스턴스 변수 활용









