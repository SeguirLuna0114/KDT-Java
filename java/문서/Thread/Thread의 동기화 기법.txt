* Thread의 동기화 기법(Sync Techniques in Threads)
  "한 번에 하나의 쓰레드만 객체에 접근할 수 있도록 객체에 
   락(lock)을 걸어서 데이터의 일관성을 유지하는 것"

- key를 이용해서 Thread간에 충돌이 일어나지 않도록 실행순서를 맞추는 것 "

- 멀티스레딩과 같이 여러 스레드가 동시에 실행되는 환경에서, 
  공유된 자원에 접근할 때 발생할 수 있는 경쟁조건(race condition)과 같은 문제를 해결하여 
  스레드간의 상호작용을 제어하고 데이터의 정확성을 보장

* 주요 동기화 기법
- 락 (Lock):  멀티스레딩 환경에서 공유된 자원에 대한 접근을 제어하는 동기화 기법

스레드의 동작에 의해서 동시에 여러작업이 가능하지만 인출 작업과 같이 특정 작업에 대해서는 하나의 스레드만이 동작하도록 해야한다.
이렇게 멀티스레드 프로그램에서 하나의 스레드에 의해서만 처리할 수 있도록 하는 영역을 임계영역(Critical Section)이라고 한다.
임계영역으로 지정하기 위해서는 하나의 스레드가 이 영역에 진입할때 락을 걸어서 다른 스레드가 수행하지 못하도록 하고, 이 영역에서 벗어날 경우 락을 해제하여 다른 스레드가 수행하도록 한다. 
즉, 임계영역 내에서만은 한번에 하나의 스레드만이 동작하도록 제약을 주어야 한다.
이러한 제약을 위해서 자바에서는 동기화 기법을 제공하는데 하나의 스레드만 동작하도록 하고자 하는 메서드나 블록에 synchronized 로 지정한다.


* 락을 이용하여 멀티스레드 환경에서의 상호 배제와 동기화를 달성하는 방법
1. 메소드의 동기화 방법(메소드에 lock 을 설정)
   " 메서드에 synchronized 키워드 사용 "
	- 메서드 선언 앞에 synchronized 키워드를 붙이면, 
	  해당 메서드는 락을 획득하여 상호 배제를 적용
	1) 메서드 전체가 임계 영역으로 지정됨 
 	2) 메소드를 호출하는 모든 스레드들은 락을 얻기위해 경쟁
	3) 한번에 하나의 스레드만이 해당 메소드 실행 가능(한번 실행이 끝나야 다음 실행이 가능)

ex)	public  synchronized  void  Method(){
      		// 임계영역 처리구문
    	}



2. 특정 블록의 동기화 방법 (특정 객체에 lock 을 설정)
   " 블록에 synchronized 키워드 사용"
	- 메서드 내부에서 특정 블록에 synchronized 키워드를 사용
	- 락의 범위를 블록에만 한정시켜 더 세밀한 동기화 가능

ex)	public  void  Method(){
		// 비동기 처리
       		synchronized(동기화할 객체 또는 동기화할 클래스명){
			      //ex)this 객체를 사용해, 해당 메서드의 객체를 락으로 사용가능
            		// 임계영역 처리구문
        	}
		// 비동기 처리
    	}

    
