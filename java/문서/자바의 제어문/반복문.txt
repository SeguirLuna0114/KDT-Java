* 반복문

1. for문
   - 실행될 문장이 1줄인 경우에는 중괄호{}를 생략 가능
   - 주로 반복횟수가 정해진 경우에 사용
     (주어진 범위나 컬렉션을 순회하며 반복 수행시 사용)

    for(초기값; 조건식; 증감식){
       반복 실행할 문장;
    }

   - 무한루프(infinite loop): 조건식이 항상 참인경우로 평가되어 반복이 끝나지 않는 반복문
	for (;;) {
   	 // 무한 루프의 반복 내용
	}
	-세미콜론(;)사이에 조건식이 비어있어 항상 참으로 평가됨 => 무한히 반복
	-프로그램이 종료되지 않고 지속작업 수행해야하는경우 사용
	  ex) 실시간 데이터 처리 프로그램에서 활용
	-무한루프 종료 => 특정 조건 만족시, break문을 사용하여 반복문 종료


2. while문
   - 반복횟수가 불확실한 경우 사용. 조건이 참인경우 반복 수행
     (조건을 검사하여 반복 수행시 사용)
    while(조건식){
       반복 실행할 문장;
    }

  - 무한루프(infinite loop): 조건식이 항상 참인경우로 평가되어 반복이 끝나지 않는 반복문
     while (true) {
      // 무한 루프의 반복내용
     }
     - while문은 조건식이 true인 동안 반복됨 => 조건식=true: 무한히 반복
     - 무한루프 종료 => break문 사용
	int count = 0;
	while (true) {
   		 count++;
    		 System.out.println("무한출력 " + count);
    		 if (count == 100) {
        		 break; // 100번째인 경우 무한 루프 종료
    		 }
	}



3. do~while문
   - 일단, 코드블록을 실행한 후에, 조건을 검사하여 반복을 "계속할지 결정"
     - 반복을 "적어도 1번"은 실행해야 하는 경우 사용
    do{
           반복 실행할 문장;	// 먼저 코드블록 실행
    }while(조건식);		// 이후, 조건식 검사->참인경우 코드블록 다시 실행

	# while문과 do-while문의 차이
	- while문은 반복 전에 조건 검사
	- do-while문은 반복 후, 조건 검사(적어도 반복을 1번 실행해야 하는 경우 사용)
     - 조건식이 뒤에 오기 때문에, 반복을 적어도 한번 해야하는 경우 실행
	ex) 사용자가 유효한 선택을 할 때까지 반복문 실행
	ex) 게임루프 - 게임이 종료될 때 까지 반복실행
	ex) 데이터 유효성 검사 - 입력이 유효하지 않을 때까지 계속해서 입력받는 반복문 실행

     - do-while문과 증감식(i++)을 함께사용
	-일반적으로 증감식은 반복 후 수행되지만, 
	  do-while문은 조건 검사 전에 코드블록 먼저 실행=>반복실행 후, 증감식 수행

