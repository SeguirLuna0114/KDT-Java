continue, break, return, pass

# continue (현재 반복을 종료하고, 다음 반복으로 건너뛰는데 사용)
: 반복문(for, while)과 함께 사용되며, 특정 조건이 만족되면 "현재 반복"을 "종료"하고,
  "다음 반복으로 넘어가는데" 사용
 - "해당 반복문의 나머지 부분은 실행X => 다음 반복(i++)으로 넘어감
 - if문 안에서 continue를 사용할 경우, if문의 조건이 참일 때 continue가 실행
ex)	for (int i=0; i<5; i++) {
		if(i==2) {
			continue
			// i=2일때 for문 내의 나머지부분을 실행X => i++(i=3)일때로
			// 따라서 if문 아래의 출력코드를 실행하지X
		}
		sytem.out.print(i);
		// 출력결과: 0 1 3 4
	}


# break (반복문 '전체'를 종료하고 "반복문을 빠져 나가는데 사용")
: 반복문(for, while) 안에서 사용되며, 특정 조건이 만족되면 반복문을 "즉시 종료"하는데 사용
 - if문 안에서 break 사용시, if문의 조건이 참일때 break가 실행되고, 해당 반복문 "전체가 종료"
ex)	for(int i=0; i<5; i++) {
		if (i==2) {
			break
			// i=2일때 해당 반복문(for문) 전체를 중지 -> 끝냄
		}
		sytem.out.print(i);
		// 출력 결과: 0 1
	}


# return
: 메소드 안에서 사용. 메소드의 실행을 "종료"하고 값을 반환하는데 사용
 - if문 안에서 return을 사용할 경우, if문의 조건이 참일때 return이 실행되어 "메소드의 실행 종료"
 - 특정 조건이 만족되었을 때, return을 사용하여 메서드를 종료하는 경우
	1) 조건에 따라 특정 값을 반환하고자 할 때: return을 사용하여 메서드가 값을 반환
	2) "예외적인 상황"에서 메서드의 "실행을 즉시 종료"하고자 할 때
	   :  잘못된 입력이나 오류 상황에서 return을 사용하여 
	      더 이상 처리를 하지 않고 "즉시 메서드를 종료"

ex)	public int checkValue(int value) {
    		if (value < 0) {
        		return;
			// 해당 메소드의 실행이 종료됨 => 메소드 내 다른 코드가 실행되지X
	}


# {// 빈 코드}	(python에서 pass)
: 아무런 동작을 하지 않는 "빈 블럭"을 표현하는데 사용
ex)	if (someCondition) {
    		// do nothing (빈 블록)
	}
