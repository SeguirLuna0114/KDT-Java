객체 배열 - 객체지향프로그래밍 언어에서 사용되는 데이터 구조
: 객체들의 참조(Reference)를 저장하는 배열
- 객체 배열의 각 요소는 해당 객체의 메모리주소를 가짐
- 실제 객체는 힙(Heap)메모리 영역에 저장됨
- 장점) 다양한 객체를 하나의 배열로 관리 가능, 객체의 동적인 추가/삭제가 가능

-객체배열 생성과정
1. 객체배열 선언 및 생성
  ClassName[] arrayName = new ClassName[arraySize];

: 해당 객체의 클래스 형식을 가진 배열로 선언
  ClassName[] arrayName;
: 선언된 배열변수에 new연산자를 사용하여 배열 생성
   arrayName = new ClassName[arraySize];

2. 객체배열에 저장
   1) 생성자를 사용하여 객체 배열 초기화
	-객체배열에 객체 저장을 위해 생성자 호출하는 코드
	arrayName[index] = new ClassName(); // 객체를 생성하여 배열의 index 위치에 저장
ex)	class MemberInfo {
    		private String name;
    		private int age;
	}
	public class Main {
    		public static void main(String[] args) {
		(1) 객체 배열을 선언 및 생성
        	// MemberInfo 객체를 담을 수 있는 길이가 5인 배열을 생성
        	MemberInfo[] members = new MemberInfo[5];
		(2) 객체 배열의 각 요소에 생성자를 호출하여 객체 초기화(=초기값 할당)
        	// 배열에 MemberInfo 객체들을 생성하여 저장
        	members[0] = new MemberInfo("John", 30, "john@example.com", "New York");
		// 배열의 요소에 접근하여 객체 정보를 출력
        	System.out.println("성명: " + members[0].getName());
		System.out.println("나이: " + members[0].getAge());

    2) 배열 초기화 목록을 사용하여 객체 배열 초기화
	- 배열 선언시, 배열 초기화목록을 사용하여 각 요소에 바로 객체 초기화(초기값 할당)
ex)		public class Main {
    			public static void main(String[] args) {
        		// MemberInfo 객체를 담을 수 있는 배열을 생성하고 초기화
        		MemberInfo[] members = {
            			new MemberInfo("John", 30),
            			new MemberInfo("Jane", 25),
            			new MemberInfo("Michael", 35)
        		};

     3) 객체 배열 선언 및 생성한 후, set메소드 사용
ex)		// MemberInfo 객체를 담을 수 있는 길이가 3인 배열을 생성
        	MemberInfo[] members = new MemberInfo[3];

		// 배열 요소에 직접 객체 생성 후 저장
        	members[0] = new MemberInfo();
        	members[0].setName("John");
        	members[0].setAge(30);		
