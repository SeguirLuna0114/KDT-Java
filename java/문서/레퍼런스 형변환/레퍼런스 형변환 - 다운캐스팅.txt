** 레퍼런스 형변환(reference type casting) **
   - 두개의 클래스 사이에 상속관계가 있어야함

* 다운 캐스팅(강제 형변환) "하위 클래스의 정보 복구"
  : 기본 클래스의 객체를 파생 클래스 타입으로 형변환하는 것
	"부모 클래스의 참조변수를 자식 클래스 타입으로 형변환하는 것"

   1. 슈퍼클래스에서 서브클래스로 형변환 하는것
   2. 참조 가능한 영역이 확대가 된다.
   3. 컴파일러에 의해서 암시적 형변환(자동 형변환)이 되지 않기    
      때문에 자료형을 생략할 수 없다.(강제 형변환)
	- 타입 캐스트 연산자(Type)을 사용하여 수행
   * 메소드의 반환되는 자료형이 최상위 클래스인 Object형인 경우 사용
   4. 다운캐스팅을 하기 위해선, 자식클래스의 객체 생성 -> 상위 클래스로 업 캐스팅 한 후
      다시 다운캐스팅을 해야 함

   	- 다운 캐스팅은 업캐스팅 된 객체를 "다시" 원래의 하위 클래스 타입으로 변환하는 것
		 업 캐스팅 된 상위클래스 참조변수 -> 하위 클래스 참조변수로 형변환 "

	- 업 캐스팅된 원본 객체가 실제로 해당 파생 클래스 객체인지 확인 필요
	- 원본 객체가 다른 파생 클래스의 객체라면, ClassCastException 예외가 발생
	- 다운캐스팅 하기 위해, 다시 하위클래스의 메소드나 속성에 접근해야  하고,
	  이를 위해 원래 자식 클래스의 참조변수로 형변환 해야 함
	  But, 원래 객체가 다른 하위 클래스의 객체였다면,
	  해당 클래스에만 존재하는 메소드나 속성에 접근하는 시도가 ClassCastException을 발생

	- 상위 클래스 객체 -> 하위 클래스로 변환
	  이는, 상속관계에서 자식 클래스가 부모 클래스의 모든 기능을 상속받기에 가능

오류 발생 case) 부모 클래스의 인스턴스(객체) 생성한 후, 이를 자식 클래스로 캐스팅 하려하면,
		문법적으로 허용되지 않아 컴파일러에서 오류가 발생됨
		- 부모 클래스를 자식 클래스로 캐스팅하려 하면서, 
		   원본 객체가 실제로 자식클래스 객체인지 확인할 수 없기에
	ex)	Child c = (Child) new Parent();  오류 발생

	ex)	Parent p = new Parent();	// 부모클래스 객체p 생성
		// 자식클래스의 객체를 가리킬 참조변수를 선언했지만,
		// 아직 객체를 생성하지 않았기에 주소값은 할당되지X => null로 초기화 됨
		Child c;				// 자식클래스 객체 선언
		
		// 부모 객체 p를 자식 객체c에 전달하여 다운캐스팅 시도 => 컴파일 에러
		c = (Child) p;
		- 다운캐스팅은 실제로 부모 객체가 자식 객체로 할당된 경우에만 가능
		- 이 경우, p는 Parent클래스의 객체를 참조하고, 실제 child클래스 객체가 아님


case)	1. 다운캐스팅을 하기 위해선, 먼저 자식클래스의 객체를 생성 업캐스팅 해야 함
	(업 캐스팅 된 객체가 해당 하위 클래스의 객체여야 함)
	2. 생성한 자식 클래스 객체를 부모 클래스로 업 캐스팅
	3. 다시 다운캐스팅을 진행

	ex)	Child c;	// child클래스의 참조변수 c 선언 -> 이후 주소값 할당
   		
		// 업캐스팅: 자식 클래스의 인스턴스생성 -> 이를 부모클래스 참조변수 p에 대입
		Parent p = new Child(); // (하위 클래스 객체 -> 상위 클래스 참조변수)
   		
		// 업 캐스팅 된 부모클래스 객체를 다시 자식클래스로 다운캐스팅
		// 서브 클래스 레퍼런스 변수에 슈퍼 클래스의 레퍼런스 값이 대입됨
		c = (Child) p; 	        // 다운 캐스팅(명시적 형변환)

		- 부모객체의 주소값을 받은 c의 경우에는(다운캐스팅 된 경우),
		   상속받은 메소드와 자식(본인)클래스 내 메소드를 모두 호출 가능
		   => "다운캐스팅으로 참조가능 영역 확대됨"
	

## 다운캐스팅 사용하는 경우 
Case) 메소드의 반환되는 자료형이 최상위 클래스인 Object형인 경우 사용
	"Object타입으로 반환되는 값을 다시 원래타입(Object의 자식형태)으로 변환"

	ex1)	메소드 반환타입이 Object형
    		Vector v = new Vector();
    		v.add("java");		// add()메소드를 사용해 문자열 추가
    		v.add("jsp");
 
   		// Object get(int index)
    		for(int i=0; i<v.size(); i++){
			// Vector는 Object타입을 저장하기 때문에(반환타입이 Object)
			// String으로 형변환 해줘야 함(다운 캐스팅)
        		String s = (String) v.get(i); //다운 캐스팅
			// Vector에 String객체를 저장했기에, 다운캐스팅이 안전하게 이루어짐

        		Object s1 = v.get(i);		
			// Vector의 원소를 가져와 Object로 받음
    		}


	Case1)	Object타입으로 반환되는 값을 문자열String 타입으로 변환
		- 문자열은 String클래스로 처리되는 참조타입이기에, 추가적인 박싱은 필요X
		ex) List에 문자열 데이터 추가 -> 다운캐스팅을 사용하여 데이터 가져옴
			// ArrayList인스턴스를 List타입으로 참조하는 lt변수 생성
			List lt = new ArrayList();		// 업캐스팅
			// List타입으로 선언된 변수(lt)에는 ArrayList 모든 메소드 포함됨


			// 업캐스팅
			// 모든 클래스는 최상위 클래스인 Object클래스를 상속받으므로,
			  String은 Object의 하위 클래스 => 업캐스팅 발생O
			lt.add(new String("자바")); 		// 업캐스팅
			lt.add("오라클");
			lt.add("JSP");

			// 다운캐스팅 - 타입 캐스트 연산자(Type)을 사용하여 수행
			// : Object타입으로 반환되는 값을 
			     다시 원래타입(Object의 자식형태)으로 변환

		* Object get(int index) 메소드: 반환값은 Object타입이기에,
					실제로 사용하기 위해서는 적절한 형변환이 필요

			Object obj = lt.get(0);
			// get()이 반환하는 값이 Object타입이기에 다운캐스팅 발생X
		
			String s = (String)lt.get(0);		// 다운 캐스팅
			// get()이 반환하는 값 Object타입을 String타입 변수에 저장시,
			// (String) 타입캐스트 연산자를 사용하여 Object -> String 형변환
		
			// 반복문을 사용해 리스트의 모든 요소에 접근
			for (int i=0; i<lt.size(); i++) {
				Object ob = lt.get(i);
			
				String str = (String)lt.get(i);		// 다운 캐스팅
				// get()이 반환하는 값 Object타입을 String타입 변수에 저장시,
				// (String) 타입캐스트 연산자 사용 Object -> String 형변환
				System.out.println(str);
			}


	Case2)	Object타입으로 반환되는 값을 기본자료형(int, boolean, double) 타입으로 변환
		ex) List에 정수형 데이터 추가 -> 다운캐스팅&언박싱을 사용하여 데이터 가져옴
			// List인터페이스를 구현한 ArrayList인스턴스를 List타입으로 참조
			List ls = new ArrayList();		// 업캐스팅
		
		* add(Object e)메소드: List 인터페이스에 포함되며, list에 요소를 추가
			// 기본 데이터타입인 int를 Integer객체로 자동 변환하여 리스트에 저장
			// 오토박싱: 기본 데이터타입인 int를 Integer로 자동으로 박싱
			ls.add(10);				// 업캐스팅 + 오토박싱
			ls.add(200);
			ls.add(3000);
			ls.add(40000);
			ls.add(500000);

		* Object get(int index) 메소드: List인터페이스에 정의되며, 
					리스트에서 지정된 인덱스에 해당하는 요소 가져옴
			Integer it = (Integer)ls.get(0);	// 다운캐스팅
			// get메소드의 반환타입이 Object타입이기에, Integer로 다운캐스트
			int n1 = it.intValue();				// 언박싱
			// intValue()메소드: Integer객체의 기본값 -> int타입으로 언박싱
		
			// 다운캐스팅 + 언박싱(한 줄로 처리 가능)
			// get()메소드로 반환된 값을 Integer로 다운캐스팅한 후,
			// intValue()메소드로 언박싱
			int n2 = ((Integer)ls.get(0)).intValue();
		
			// 반복문으로 리스트의 모든 요소에 접근
			for (int i=0; i<ls.size(); i++) {
				Object ob = ls.get(i);
			
				Integer t = (Integer)ls.get(i);		// 다운캐스팅
				// 반환값 Object타입을 Integer로 다운캐스팅
				int n3 = t.intValue();			// 언박싱
				// intValue()메소드: Integer객체의 값을 int형으로 언박싱
			
				// 다운캐스팅 + 언박싱
				int n4 = ((Integer)ls.get(i)).intValue();
				System.out.println(n4);
			}



