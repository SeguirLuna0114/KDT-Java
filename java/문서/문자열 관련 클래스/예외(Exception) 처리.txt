예외 처리

* 예외(Exception)
: 프로그램이 실행 중에 예상치 못한 상황이 발생하여, 정상적인 흐름을 방해할 때 발생하는 문제

- 유효성 검사를 통해 걸러지지 않은 예외 상황은 예외 처리를 통해 처리

- 예외 상황을 처리하기 위해, 프로그래밍 언어에서는 "try-catch"문을 제공
	try {
    		// 예외가 발생할 수 있는 코드
	} catch (예외 타입 변수) {
    		// 예외 처리 코드
	}

- try 블록 :  예외가 발생할 수 있는 코드를 작성
	     - try블록 내의 코드가 실행되다가 예외 발생 시,
		해당 블록의 나머지부분은 건너뛰고 catch블록으로 이동
- catch 블록 : 예외가 발생했을 경우 처리할 코드를 작성
	     - 해당 예외타입을 처리하고, 예외에 대한 추가적 작업을 수행
- 예외타입: catch블록 내에서 처리하고자하는 예외의 종류 지정
	   * Exception : 예외 처리에서 가장 일반적으로 사용되는 형태의 예외 처리 타입 
	   * ArithmeticException : 산술연산 시 발생하는 예외
				(0으로 나누거나 정수로 나누는 경우)
	   * NullPointerException : 객체 참조가 없는 상태에서 메서드 호출 시 발생
				    인스턴스 변수에 접근하는 경우 발생
	   * ArrayIndexOutOfBoundsException : 배열의 인덱스 범위 초과 접근 시 발생
	   * IndexOutOfBoundsException: 리스트, 문자열(자료구조)의 인덱스범위 초과 접근시

- 변수: catch블록 내에서 예외 객체를 참조하기위해 사용되는 변수(e, ex, exception...)
	   * e : 예외(Exception) 객체를 참조하는 변수
		(예외 발생시, 해당 예외객체가  e변수에 저장됨)

		try {
    			// 어떤 작업 수행
		} catch (Exception e) {
    			// 예외 처리
    			System.out.println("예외가 발생했습니다: " + e.getMessage());
			// e.getMessage()를 통해 예외의 메시지를 얻어와서 출력 가능
		}

