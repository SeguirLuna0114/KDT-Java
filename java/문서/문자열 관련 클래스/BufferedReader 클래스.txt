BufferedReader 클래스
: 입력스트림으로부터 문자를 읽어들이기위해 사용
- 데이터를 버퍼에 미리 읽어두어 I/O작업의 성능 향상시킴

- 효율적인 텍스트 입력을 위해 사용
- 느린 데이터 소스로부터 데이터를 읽을 때 유용하게 사용

- 보통 출력문자 많을경우 StringBuilder 또는 BufferedWriter 사용
	* StringBuilder: 객체에 문자열을 하나로 이어서 데이터 전송 방식
	* BufferedWriter: 버퍼에 담아두었다가 한번에 데이터 전송

- 특징
1) 버퍼링: 내부적으로 버퍼를 사용하여 데이터를 미리 읽어 메모리에 저장
	=> 일부 데이터를 한번에 읽어오므로, I/O작업의 효율성 향상됨
2) 문자입력: 문자를 읽어오는 기능 제공
3) 라인단위 입력: readLine()메소드를 사용해 라인 단위로 데이터를 읽어옴
	=> 텍스트 파일에서 한줄씩 데이터를 읽어오는데 유용
	*readLine()메소드 => 데이터를 한줄씩 읽어옴
4) 빠른 처리속도 : 버퍼링을 사용하기에 입출력 동작이 최소화됨

- main메소드에서 예외에 대비하여 IOException처리 필요
  (입출력 작업에서 발생가능한 예외에 대비)
1) 메인 메소드 선언에서 throws IOException을 사용하는 것은 예외처리를 
   예외 호출차에게 던지도록 하는 것 의미

	public static void main(String[] args) throws IOException {
		BufferedReader bf
			 = new BufferedReader(new InputStreamReader(System.in));


2) try - catch 블록을 사용하여 IOException을 처리

	try {
		BufferedReader bf 
			= new BufferedReader(new InputStreamReader(System.in));
		String Line;

		while ((line = bufferedReader.readLine()) != null) {
			System.out.println(line);
		}
	    } catch (IOException e) {
		// IOException이 발생한 경우 예외처리
		e.printStackTrace();
	    }


- 생성자 : 다른 입력 스트림을 인수받음
1) FileReader
- 파일에서 데이터를 읽기 위해 FileReader와 BufferedReader 조합 사용
ex1)	BufferedReader bf = new BufferedReader(new Filereader("example.txt"));

ex2)	FileReader fr = new Filereader("example.txt");
	// FileReader 생성자("읽어올 파일명") 호출 코드를 활용하여 fr객체 생성
	BufferedReader bf = new BufferedReader(fr);
	// BufferedReader 생성자(FileReader객체명) 호출 코드를 활용해 bf객체 생성

2) InputStreamReader
 : 입력스트림(InputStream)을 문자스트림(Reader)으로 변환하는 클래스
- 입력스트림으로부터 바이트 데이터를 읽어와 문자로 변환
- 표준입력스트림(System.in)으로부터 데이터를 읽고, BufferedReader를 통해 한 줄씩 문자열을 읽어오는 방식으로 활용
ex)	BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));

ex2)	InputStreamReader inputRead = new InputStreamReader(System.in);
	// InputStreamReder 생성자(표준입력스트림) 호출코드를 활용해 inputRead객체 생성
	BufferedReader bf = new BufferedReader(inputRead);
	// BufferedReader 생성자(InputStreamReader 객체명) 호출코드를 활용해 bf객체 생성


- 메소드
1) int read() : 입력스트림으로부터 하나의 문자를 읽어오고, 정수형태로 반환
		-더이상 읽어올 문자 없는경우, -1을 반환
2) String readLine() : 입력스트림으로부터 한 줄의 문자열을 읽어옴
			- 개행문자(\n)이전까지의 데이터를 문자열로 반환
			- 더이상 읽을문자 없는경우 null을 반환
