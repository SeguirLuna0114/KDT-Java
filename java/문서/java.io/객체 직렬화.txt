* 객체 직렬화(Object Serialization)

- 각 사람에 대한 객체를 만들어 놓고 객체 단위로 입.출력 하는 것

- 자바 객체를 바이트 스트림으로 변환하는 것
  이렇게 변환된 바이트 스트림은 파일이나 네트워크를 통해 전송하거나 저장하는 등의 작업에 사용됨

- 직렬화된 객체는 나중에 역직렬화를 통해 원래의 객체로 복원 가능

- 방법) java.io.Serializable 인터페이스를 구현하는 것으로 객체 직렬화 가능

- 독립 객체들도 내부적으로는 사방에 흩어져 존재 하지만 
  입.출력 할때는 줄을 세워서 입.출입 하기 때문에 객체 직렬화라함


o Serializable 인터페이스
: Serializable 인터페이스를 구현함으로써 
 클래스는 자바의 기본 직렬화 메커니즘을 이용하여 객체를 직렬화할 수 있게됨
 " 직렬화 한다는 표시자의 역할"

-  메소드를 갖지 X. 단순히 마커(marker)인터페이스로 사용되며 직렬화 표시자의 역할 수행
- 단지 클래스 선언에 implements Serializable 구문을 추가
  => 해당 클래스의 인스턴스를 직렬화할 수 있도록 지정
  (객체 직렬화를 위해 Serializable 인터페이스를 상속받음)
- 직렬화할 수 없는 필드가 클래스에 포함되어 있다면 해당 클래스는 직렬화가 불가능

- Serializable 인터페이스를 구현한 클래스로 객체를 만들고, 입.출력을 하면,
  우리가 프로그램에서 체크하지 않아도 "중복된 객체가 입.출력하는 것을 방지"해 준다.

o 직렬화된 객체 생성 방법
	- 직렬화된 객체를 생성하고 사용하기 위해서는
  	   ObjectOutputStream과 ObjectInputStream 클래스를 사용
	- Serializable 인터페이스를 구현한 클래스는 
	  ObjectOutputStream 클래스를 사용하여 객체를 직렬화하고, 
	  ObjectInputStream 클래스를 사용하여 객체를 역직렬화

ex)	// 객체를 직렬화하여 파일로 저장
	// ObjectOutputStream 클래스를 사용하여 person 객체를 직렬화
        try {
            // Serializable 인터페이스를 구현한 Person 클래스의 객체 생성
            Person person = new Person("John", 30);

            // ObjectOutputStream을 사용하여 객체를 파일로 저장
            FileOutputStream fileOut = new FileOutputStream("person.ser");
            ObjectOutputStream out = new ObjectOutputStream(fileOut);

	    out.writeObject(person);
	    out.close();
	    fileOut.close();

	// 파일로부터 객체를 역직렬화하여 복원
	// ObjectInputStream 클래스를 사용하여 person.ser 파일로부터 객체를 역직렬화하여 복원
        try {
            // ObjectInputStream을 사용하여 파일로부터 객체를 역직렬화하여 복원
            FileInputStream fileIn = new FileInputStream("person.ser");
            ObjectInputStream in = new ObjectInputStream(fileIn);

            Person restoredPerson = (Person) in.readObject();

            in.close();
            fileIn.close();
	
--------------------------------------------------------------------------------------

o ObjectOutputStream 클래스
: 자바에서 객체 직렬화를 위해 사용되는 클래스
- java.io.OutputStream을 상속받아 객체를 바이트 스트림으로 직렬화하여 출력
- 객체를 '파일에 저장'하거나 '네트워크를 통해 전송'하기 위해 주로 사용


o 생성자
	ObjectOutputStream(OutputStream out) throws IOException
	- OutputStream out: 직렬화된 데이터를 쓸 출력 스트림


o 객체 생성 방법
case)	인터페이스를 구현한 클래스 객체를 파일에 저장하는 경우
	ObjectOutputStream out
		 = new ObjectOutputStream(new FileOutputStream("person.ser"));

1. Serializable 인터페이스를 구현한 클래스의 객체를 선언 및 생성
	PersonInformation person 
		= new PersonInformation("John", 30, "New York", "555-1234");

2. 파일에 객체를 저장하기 위한 FileOutputStream 생성
  	FileOutputStream fileOut = new FileOutputStream("person.ser");

3. 파일에 객체를 저장하기 위한 ObjectOutputStream 생성
	- argument로 FileOutputStream 객체를 받음
	ObjectOutputStream out = new ObjectOutputStream(fileOut);


o 주요 메소드
- void writeObject(Object obj) throws IOException
	: 지정된 객체를 직렬화하여 출력 스트림에 작성
ex)	// "객체"를 직렬화하여 파일에 저장
        out.writeObject(person);

- void flush() throws IOException
	: 버퍼에 있는 데이터를 모두 출력 스트림에 씁니다.

- void close() throws IOException
	: 출력 스트림을 닫음
	  close() 메소드를 호출하면 자동으로 flush()가 수행되어 모든 데이터가 출력됨
	* flush() 메소드는 버퍼에 남아있는 데이터를 출력 스트림에 강제로 쓰도록 하는 역할 수행
ex)	// 스트림 닫기
        out.close();
        fileOut.close();


--------------------------------------------------------------------------------------

o ObjectInputStream 클래스
: 객체 역직렬화를 위해 사용되는 클래스
  "직렬화된 바이트 스트림을 읽어와서 객체로 변환하는 역할"
- java.io.InputStream을 상속받아 객체를 바이트 스트림에서 역직렬화하여 객체로 복원하는 기능
- 역직렬화된 객체는 파일에 저장되거나
  네트워크로부터 전송된 직렬화된 데이터를 다시 원래의 객체로 변환하는 데에 사용


o 생성자
 ObjectInputStream(InputStream in) throws IOException
	- InputStream in: 역직렬화할 데이터가 들어있는 입력 스트림

o 객체 생성 방법
case)	인터페이스를 구현한 클래스 객체를 파일에 저장하는 경우
	ObjectInputStream in 
		= new ObjectInputStream(new FileInputStream("person.ser"));

1. 파일에서 데이터를 읽어오기 위한 FileInputStream 객체 생성
	FileInputStream fileIn = new FileInputStream("person.ser");

2. 파일로부터 객체를 읽어 오기 위해 FileInputStream 객체를 생성자 argument로 받아 객체 생성
	- ObjectInputStream을 사용하여 person.ser 파일에서 객체들을 읽어옴
        ObjectInputStream in = new ObjectInputStream(fileIn);

3. 파일로부터 객체를 역직렬화하여 복원
        Object obj = in.readObject();

        // 역직렬화된 객체를 PersonInformation 타입으로 캐스팅하여 정보를 출력
        if (obj instanceof PersonInformation) {
		PersonInformation restoredPerson = (PersonInformation) obj;
		System.out.println("Name: " + restoredPerson.getName());

o 파일에 저장된 객체를 모두 읽어오는 방법
	Object o = null;
	// 파일(person.dat)에 저장된 객체를 모두 읽어 올 때까지 반복
	while ((o = ois.readObject()) != null) {
		// if( 변수 instanceof 클래스명)
		// : 변수가 이 클래스의 instance인지 아닌지를 체크함.
		if (o instanceof PersonInformation) {
			// PersonInformation 클래스의 gemini 객체와 johnharu 객체의
			// 정보를 읽어와서 출력 & Date 객체 d의 정보를 출력
			System.out.print(((PersonInformation) o).getName() + " : ");


o 주요 메소드
- Object readObject() throws IOException, ClassNotFoundException
	: 입력 스트림에서 직렬화된 데이터를 읽어와서 객체로 역직렬화
	- Object 타입으로 역직렬화된 객체를 리턴
	- 파일의 끝에 도달하면 읽을 데이터가 없어서 readObject() 메소드는 null을 리턴
ex)	// 파일 끝까지 반복
	Object obj = null;
	while((obj = ois.readObject()) != null) {
		// if(변수 instanceof 클래스명): 변수가 이 클래스의 instance인지 아닌지 체크
		if(obj instanceof PersonInformation) {
			System.out.print(((PersonInformation) obj).getName() + " : ");

- oid close() throws IOException: 입력 스트림을 닫음


o instance 연산자
	: 객체가 특정 클래스의 인스턴스인지 확인
	  인스턴스인 경우 true, 그렇지 않은경우 false 반환

	if (객체 instanceof 클래스명) {
    		// 해당 클래스의 인스턴스인 경우에 실행될 코드
	} else {
    		// 해당 클래스의 인스턴스가 아닌 경우에 실행될 코드
	}







