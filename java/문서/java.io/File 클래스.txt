* File 클래스
:  파일과 디렉토리의 경로를 추상화하여 표현하는 클래스

- 파일과 디렉토리에 대한 정보를 얻거나 
  파일을 생성, 삭제, 이동, 복사 등의 파일 시스템 조작을 수행

o File클래스의 생성자
	- 파일 경로나 디렉토리 경로를 매개변수로 받음
	- File 객체를 생성할 때 경로에 대한 정보만 제공하며,
	 해당 파일 또는 디렉토리가 실제로 존재하는지 여부와는 무관

case1)	File(String pathname)
	"파일경로를 나타내는 문자열에 '파일이름'만 포함"
	: 주어진 파일 경로나 디렉토리 경로를 기반으로 File객체를 생성
	- File 객체는 해당 경로에 실제로 파일이 존재하지 않아도 객체를 생성하는데에는 문제X

	File file = new File("filepath");
ex)       		// 파일 경로를 사용하여 File 객체 생성
        	String filePath = "filepath";
       		File file = new File(filePath);

case2)	File(String parent, String child)
	"파일경로를 나타내는 문자열에 '디렉토리 경로와 파일이름' 포함"
	: 부모 디렉토리와 자식 파일(또는 디렉토리)를 합쳐서 File 객체를 생성
	- 주어진 부모 디렉토리와 자식 파일(디렉토리)의 경로를 연결하여 
	   새로운 File 객체를 생성하는데 사용
	- 해당 경로가 파일(test.txt)인지 디렉토리(test)인지에 따라서
	 생성된 File 객체의 성격이 달라짐
	- 디렉토리가 실제로 존재하지 않아도 객체를 생성하는데에는 문제X

	File temp = new File("C:/java01", "temp");
ex)        	// 부모 디렉토리와 자식 파일 경로를 합쳐서 File 객체 생성
        	String parent = "C:/java01";
        	String child = "temp";
        	File file = new File(parent, child);


o File클래스의 주요 메소드
- boolean exists(): 파일 또는 디렉토리가 실제로 존재하는지 여부를 검사
	    	    파일/디렉토리가 존재하면 true, 존재하지 않으면 false 반환
ex)	// 파일이 존재하는지 확인
        if (file.exists()) {

- boolean isFile(): File 객체가 파일인지 여부를 반환
		    파일인 경우 true를, 디렉토리인 경우 false를 반환
ex)	System.out.println("파일인가요?: " + file.isFile());

- boolean isDirectory(): File 객체가 디렉토리인지 여부를 반환
			 디렉토리인 경우 true를, 파일인 경우 false를 반환
ex)	System.out.println("디렉토리인가요?: " + file.isDirectory());


# 이름 및 경로관련 메소드
- String getName(): 파일 또는 디렉토리의 이름을 반환
		    파일 경로에서 마지막 부분(즉 파일/디렉토리 이름)만을 추출하여 반환
ex)	System.out.println("파일 이름: " + file.getName());

- String getPath(): 파일 또는 디렉토리의 전체 경로를 반환
		    생성자에 전달한 경로를 그대로 반환
ex)	System.out.println("파일 경로: " + file.getPath());

- String getParent(): 파일 또는 디렉토리의 부모 디렉토리 경로를 반환
	- 부모 디렉토리가 없는 경우(파일 또는 디렉토리가 루트 디렉토리인 경우) null을 반환
ex)	System.out.println("부모 디렉토리: " + file.getParent());

- File getParentFile(): File 객체가 나타내는 파일/디렉토리의 부모 디렉토리를 나타내는
		        File 객체를 절대경로 형태로 반환
	- 부모 디렉토리가 없는 경우( File 객체가 루트 디렉토리를 나타내고 있는 경우)
	  getParentFile() 메서드는 null을 반환
ex)	// File 객체 생성
        File file = new File("C:/myfiles/data.txt");
	// 부모 디렉토리 File 객체 얻기
        File parentDirectory = file.getParentFile();
	// 결과 출력
        if (parentDirectory != null) {
            System.out.println("부모 디렉토리: " + parentDirectory.getPath());


# 문자열로 반환
- String[] list(): 디렉토리에 포함된 파일과 디렉토리의 이름을 문자열 배열로 반환
		   전체 경로는 포함X
	

- File[] listFiles(): 디렉토리에 포함된 파일과 디렉토리의 File 객체 배열을 반환
		      전체 경로를 포함하는 File 객체 배열을 반환


# 파일/디렉토리 생성
- boolean createNewFile(): 새로운 파일을 생성
			   파일이 이미 존재하는 경우, 생성하지 않고 false를 반환
ex)	// 새로운 파일 생성
	boolean created = file.createNewFile();
        if (created) {
        	System.out.println("새로운 파일을 생성했습니다.");
	
- boolean mkdir(): 새로운 디렉토리를 생성
		   디렉토리가 이미 존재하는 경우, 생성하지 않고 false를 반환


- boolean mkdirs(): 디렉토리와 그 부모 디렉토리들을 모두 생성
		    삭제에 성공하면 true를, 실패하면 false를 반환

- boolean renameTo(File dest): 파일 또는 디렉토리의 이름을 변경하거나 이동


# 삭제
- boolean delete():  File 객체가 나타내는 파일 또는 디렉토리를 삭제
		     삭제가 성공했을 경우에는 true를, 실패했을 경우에는 false를 반환
	* 주의점
		1. exists() 메서드를 사용하여 파일 또는 디렉토리가 존재하는지 확인
		ex)	// 파일 또는 디렉토리 삭제 시도
        		if (file.exists()) {
            			boolean deleted = file.delete();
            			if (deleted) {
                			System.out.println("파일을 삭제했습니다.");

		2. 디렉토리의 경우, 비어있는지 확인
			(디렉토리가 비어있지 않은 경우, 삭제X)
		ex)	if (directory.exists()) {
           			boolean deleted = directory.delete();
            			if (deleted) {
                			System.out.println("디렉토리를 삭제했습니다.");

		3. 비어있지 않은 경우, 먼저 하위 파일 및 디렉토리를 삭제한 후, 해당 디렉토리 삭제
        	ex)     File directory = new File("path/to/your/non-empty-directory");
			if (directory.isDirectory()) {
            			File[] files = directory.listFiles();
            			if (files != null) {
                			for (File file : files) {
                    				deleteDirectory(file);
                			}
            			}
        		}

        		// 디렉토리 내의 파일과 하위 디렉토리를 모두 삭제한 후
			//  해당 디렉토리를 삭제합니다.
        		directory.delete();
    			}



public class 디렉토리정리 {
    public static void 디렉토리내용삭제(File 디렉토리) {
        if (!디렉토리.isDirectory()) {
            // 주어진 File이 디렉토리가 아닌 경우, 바로 리턴합니다.
            return;
        }

        File[] 파일들 = 디렉토리.listFiles();

        if (파일들 != null) {
            for (File 파일 : 파일들) {
                if (파일.isDirectory()) {
                    // 현재 아이템이 디렉토리인 경우, 재귀적으로 해당 디렉토리 내용을 삭제합니다.
                    디렉토리내용삭제(파일);
                } else {
                    // 현재 아이템이 파일인 경우, 바로 삭제합니다.
                    파일.delete();
                }
            }
        }

        // 모든 내용을 삭제한 후, 디렉토리는 비어있어야 합니다.
        // 나머지 파일이나 디렉토리가 남아있는지 확인할 수도 있지만, 간단하게 비어있다고 가정합니다.
        // 이제 빈 디렉토리를 삭제합니다.
        디렉토리.delete();
    }










