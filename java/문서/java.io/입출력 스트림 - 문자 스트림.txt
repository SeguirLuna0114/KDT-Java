* Data 입.출력 처리

  import  java.io.*;


o Text Stream(Character Stream, 문자 스트림): 2바이트(문자) 단위로 데이터를 처리하는 스트림
	- 텍스트 파일을 처리하는데 편리
	- 특정 인코딩을 사용하여 문자를 처리 => 텍스트파일을 읽고 쓸때 문자스트림 사용
	- 자바에서 문자스트림을 다루는 기본적인 클래스
		: Reader(추상클래스), Writer


o Text Stream에 관련된 클래스(2Byte 입.출력 처리)

  Reader - BufferedReader
  (입력)    InputStreamReader - FileReader

  Writer - BufferedWriter
  (출력)    OutputStreamWriter - FileWriter
           PrintWriter

------------------------------------------------------------------------------------

o InputStreamReader 클래스
: 바이트스트림(InputStream)을 받아 문자스트림(Reader)로 변환해주는 클래스

- 바이트 단위로 읽히는 데이터를 문자단위로 읽을 수 있도록 도와주는 중간다리 역할
- 바이트를 문자로 변환하는데에는 기본 인코딩(UTF-8)을 사용
  다른 인코딩 사용하려면 생성자에 추가적으로 인코딩 지정
- 2바이트씩 읽어들이기 때문에 한글은 1자 밖에 입력이 안됨

- 주로 System.in과 같은 바이트 기반 입력 스트림으로부터 
  콘솔에서 사용자의 입력을 문자 기반으로 읽을 때 사용
- 다른 바이트 기반 입력 스트림에서 읽은 바이트 데이터를 문자로 변환하여 사용할 경우
	ex)  파일에서 텍스트 데이터를 읽는 경우 
	    : FileInputStream으로 데이터를 읽rh, InputStreamReader를 사용해 문자로 변환


o InputStreamReader 생성자
case1)	InputStreamReader(InputStream in)
	: 기본 인코딩(UTF-8)을 사용하여 바이트 스트림을 문자 스트림으로 변환

case2)	InputStreamReader(InputStream in, String charsetName)
	: 지정된 인코딩을 사용하여 바이트 스트림을 문자 스트림으로 변환
ex)	try {
            // 바이트 스트림을 읽는 InputStream 객체 생성
		// FileInputStream으로 바이트 스트림을 읽음
            InputStream inputStream = new FileInputStream("파일경로");

            // 바이트 스트림을 문자 스트림으로 변환하는 InputStreamReader 객체 생성
		// InputStreamReader를 사용하여 바이트 스트림을 문자 스트림으로 변환
            InputStreamReader reader = new InputStreamReader(inputStream, "UTF-8");

            int data;
            while ((data = reader.read()) != -1) {
                System.out.print((char) data); // 읽어들인 문자 출력
            }
	} catch (IOException e) {
            e.printStackTrace();
        }


o InputStreamReader 클래스의 주요 메소드
1. int read() throws IOException
	: InputStreamReader로부터 한 문자를 읽어오고,
	   읽은 문자의 유니코드 포인트 값을 반환
	- 더이상 읽을 문자가 없는 경우, -1을 반환

2. boolean ready() throws IOException
	: InputStreamReader에서 추가로 읽을 데이터가 있는지 여부를 반환
	- 데이터를 추가로 읽을 수 있으면 true를 반환하고, 그렇지 않으면 false를 반환
	

------------------------------------------------------------------------------------
o BufferedReader클래스
:  입력 스트림으로 읽어온 데이터를 버퍼에 적재하고,
  프로그램이 읽을 때마다 버퍼에서 일정량의 데이터를 한 번에 읽어옴
"Reader를 버퍼링하여 입력받은 데이터를 효율적으로 읽는 역할"

- 대용량 파일을 다룰 때 유용
- Reader 클래스를 확장한 클래스. 문자 입력을 버퍼링하여 효율적으로 처리하는 기능을 제공

o BufferedReader 클래스 객체생성 방법
case)	BufferedReader 클래스와 InputStreamreader클래스를 함께 사용하는방법

	BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
	- 콘솔에서 사용자의 입력을 읽는 데 주로 사용
	- System.in 또는 다른 InputStream을 읽기 위해 InputStreamReader를 사용
	-> BufferedReader의 생성자로 전달하여 BufferedReader를 초기화

ex)		// System.in: 사용자로부터 입력받은 InputStream
		InputStream systemIn = System.in;
		// InputStreamReader: 바이트 기반의 InputStream -> 문자기반의 Reader로 변환
    		InputStreamReader isreader = new InputStreamReader(systemIn);
    		// br을 통해 텍스트 데이터를 효율적으로 읽음
		BufferedReader bufferedReader = new BufferedReader(isreader);

		// 입력 바로전달(InputStream,InputStreamReader,BufferedReader 객체생성)
		BufferedReader br 
			= new BufferedReader(new InputStreamReader(System.in));


o BufferedReader클래스의 주요 메소드
- int read() throws IOException
	: 버퍼에서 한 문자를 읽어온 후, 읽은 '문자'의 유니코드 포인트 값 반환 
	- 더 이상 읽을 문자가 없을 경우 -1을 반환	

- String readLine() throws IOException
	: 개행문자 이전까지 읽은 한줄의 텍스트 데이터를 읽어오는 역할
	- Enter키(개행 문자(\n))를 누를때까지 한 줄의 텍스트를 읽음 -> 데이터를 문자열로 반환
	- 예외: IOException - 입출력 동작 중 오류가 발생할 수 있음
	- 더 이상 읽을 줄이 없을 경우 null 반환

-------------------------------------------------------------------------------------

o FileReader클래스
: 문자 기반 입력 스트림(Reader) 클래스로, 파일로부터 "문자 단위로 데이터를 읽기"위해 사용

ex)	try{// 파일 경로 지정
            String filePath = "example.txt";
            // FileReader 객체 생성
            FileReader fr = new FileReader(filePath);
            int data;
            while ((data = fr.read()) != -1) {
                // 읽은 문자 데이터를 처리
                System.out.print((char) data); // 문자를 출력
            }

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
	} finally {	
		if(file != null) {
		try {
			// FileReader 닫기
			file.close();
		} catch(Exception e) {
			System.out.println(e.toString());
		}


o 생성자
1. FileReader(String fileName) throws FileNotFoundException
	: 주어진 "파일 경로"를 나타내는 문자열로부터 파일을 염
ex)	file = new FileReader("data.txt");	// 상대경로(본인의 위치를 기준으로 작성)
ex)	file = new FileReader("c:/data.txt");	// 절대경로(최상위 디렉토리로부터 작성)


2. FileReader(File file) throws FileNotFoundException
	: 주어진 "File객체"로부터 파일을 염


o 주요 메소드
- int read() throws IOException
	: FileReader로부터 한 문자를 읽어오고, 읽은 문자의 유니코드 코드 포인트 값을 반환
	- 더 이상 읽을 문자가 없을 경우 -1을 반환
ex) 		// file의 끝을 만날 때까지 데이터를 읽어 들임
		while ((inputValue = file.read()) != -1) {
			System.out.print((char) inputValue);
		}

- int read(char[] cbuf) throws IOException
	: 주어진 문자 배열 cbuf에 최대 cbuf.length 만큼 문자를 읽고,
	 읽은 문자 수를 반환하며, 더 이상 읽을 문자가 없을 경우 -1을 반환

- void close() throws IOException: FileReader와 연관된 리소스를 닫음


------------------------------------------------------------------------------

o FileReader 클래스
:  파일에 문자 단위로 데이터를 쓰기 위해 사용
(파일에 문자데이터를 작성 가능)

o 생성자
1. FileWriter(String fileName) throws IOException
	: 주어진 파일 경로를 나타내는 문자열로부터 파일을 생성하거나 염
ex)	// FileWriter 객체 생성
        FileWriter fw = new FileWriter("example.txt");

2. FileWriter(File file) throws IOException
	: 주어진 File 객체로부터 파일을 생성하거나 염

o 주요 메소드
- void write(int c) throws IOException
	- c: 파일에 쓸 문자의 정수값 (유니코드 코드 포인트)
	: FileWriter에 주어진 정수 값 c를 파일에 문자로 작성

- void write(String str) throws IOException
	: 주어진 문자열 str을 파일에 작성
ex)	// 데이터 쓰기
        fw.write("Hello, FileWriter!");

- void write(char[] cbuf) throws IOException
	: 주어진 문자 배열 cbuf의 모든 문자를 파일에 작성

- void close() throws IOException
	: FileWriter와 연관된 리소스를 닫음


o 작성한 파일을 출력하는 메소드
	while ((input = fr.read()) != -1) {
		System.out.print((char) input); // 화면에 출력 부분
		fw.write(input); // 다른 파일에 쓰는 부분
	}









