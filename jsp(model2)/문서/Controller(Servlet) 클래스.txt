* 컨트롤러(서블릿) 클래스
: Model-View-Controller (MVC) 아키텍처에서 중앙 제어 및 조정 역할을 하는 부분

- 컨트롤러는 클라이언트의 HTTP 요청을 받아들이고, 요청을 처리하고,
  적절한 비즈니스 로직(모델)을 호출하며, 결과를 표시할 뷰를 선택하거나 포워딩
- JSP(Model 2) 아키텍처에서 컨트롤러(서블릿) 클래스는 클라이언트 요청을 받아서
 해당 요청을 처리하고 모델과 뷰를 연결해주는 역할
- 서블릿 클래스는 웹 애플리케이션의 중심 제어 로직을 담당하며,
  요청을 분석하고 액션을 선택한 후, 모델과 뷰를 조정하여 적절한 응답을 생성

	1. HTTP 요청 처리: 컨트롤러는 클라이언트로부터 들어오는 HTTP 요청을 받아들임
		- 이 요청은 주로 URL 경로, 요청 메서드(GET, POST 등),
		  요청 매개변수, 헤더, 쿠키 등의 정보를 포함

	2. 액션 선택: 컨트롤러는 요청을 분석하여 어떤 액션(또는 기능)을 수행해야 하는지 결정
		- 요청에서 추출된 데이터나 요청 URL에 맞춰서 액션을 선택

	3. 모델 호출: 선택된 액션은 비즈니스 로직을 수행하기 위해
		     모델(서비스) 계층의 메서드를 호출
		- 모델은 데이터베이스 쿼리, 계산, 파일 처리 등과 같은 작업을 처리

	4. 데이터 전달: 컨트롤러는 모델로부터 반환된 데이터를 요청 객체에 저장하거나,
			속성으로 설정하여 뷰로 전달
		- 이 데이터는 클라이언트에게 표시할 내용

	5. 뷰 선택: 컨트롤러는 결과 데이터와 함께 어떤 JSP 페이지(뷰)를 사용하여
		    클라이언트에 응답을 보낼 것인지를 선택
		- 이 선택은 주로 요청된 액션 또는 모델의 결과에 따라 이루어짐

	6. 포워딩 또는 리다이렉션
	: 컨트롤러는 선택된 뷰로 클라이언트 요청을 포워딩하거나 리다이렉션
	- 포워딩: 서버 내에서 새로운 요청을 시작하지 않고 클라이언트에게 응답을 보내는 것
	- 리다이렉션: 클라이언트에게 다른 URL로 이동하도록 알려줌

	7. HTTP 응답 생성: 선택된 뷰는 데이터와 함께 HTML, XML 또는
			   다른 콘텐츠 형식으로 렌더링되어 클라이언트에게 전송됨
		- 컨트롤러는 응답을 생성하고 클라이언트에게 반환함

	8. 예외 처리: 컨트롤러는 예외 처리를 담당하며,
		     모델과 뷰에서 발생하는 예외를 적절하게 처리
		- 일반적으로 오류 페이지로 리다이렉션하거나 오류 메시지를 표시


o Java의 서블릿을 사용하여 웹 애플리케이션의 컨트롤러 클래스를 정의
import javax.servlet.*;
import javax.servlet.http.*;
import java.io.IOException;

@WebServlet("*.do")
public class MyControllerServlet extends HttpServlet {

    // doGet(), doPost() 메소드의 공통적인 작업을 처리하는 메소드
    protected void doProcess(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		// TODO Auto-generated method stub
		
		// 클라이언트가 요청한 전체 URI
		String requestURI = request.getRequestURI();
		// 웹 애플리케이션의 컨텍스트 경로
		String contextPath = request.getContextPath();
		// 웹 애플리케이션의 컨텍스트 경로를 URI에서 제외한 부분이 실제 요청을 처리할 부분
		String command = requestURI.substring(contextPath.length());
		
		System.out.println("requestURI: " +requestURI);
		System.out.println("contextPath: " + contextPath);
		System.out.println("command: " + command);
	
    } // doProcess() end



    // GET 요청을 처리하는 메서드
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
	 throws ServletException, IOException {
        // 요청을 처리하고 모델 호출
        // 필요한 데이터를 추출하거나 설정
        // 비즈니스 로직 수행
        
        // 결과 데이터를 request나 session에 저장
        
        // 적절한 JSP 페이지로 포워딩
        String destination = "/WEB-INF/views/myView.jsp"; // 포워딩할 JSP 페이지 경로
        RequestDispatcher dispatcher = request.getRequestDispatcher(destination);
        dispatcher.forward(request, response);
    }

    // POST 요청을 처리하는 메서드 (선택적)
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
	 throws ServletException, IOException {
        // POST 요청을 처리하는 코드
    }
}

- @WebServlet("*.do") : 서블릿을 정의하고 URL 패턴을 매핑하기 위한 어노테이션(Annotation)
			어떤 URL 패턴과 매핑할지 지정
			해당 서블릿 클래스가 URL 패턴으로
			[확장자가 .do로 끝나는 모든 요청]을 처리한다는 것을 나타냄

- doProcess 메서드: 이 메서드는 GET 또는 POST 요청을 처리하기 위한 공통 작업을 수행
	- 요청과 응답 객체를 받아서 데이터를 추출하거나 설정
	- 모델(비즈니스 로직) 호출을 위해 필요한 데이터를 추출하거나 전달
	- 모델이 반환한 결과 데이터를 요청 객체에 저장
	- JSP 페이지로 포워딩하거나 리다이렉트

- doGet 메서드: GET 요청을 처리하는 메서드
	- 이 메서드에서는 클라이언트 요청을 분석하고 모델 호출,
	 데이터 추출 및 설정, 그리고 결과 데이터를 JSP 페이지로 전달하는 등의 작업을 수행

- doPost 메서드 (선택적): POST 요청을 처리하는 메서드
	- 필요에 따라 사용할 수 있음

- JSP 페이지 포워딩: RequestDispatcher를 사용하여 결과 JSP 페이지로 포워딩
	- 포워딩은 클라이언트에게 새로운 URL을 보내지 않고 서버 내에서 페이지를 전환


