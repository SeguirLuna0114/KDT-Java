* Action 인터페이스
: Model 2 아키텍처에서의 "Action" 인터페이스는
 웹 애플리케이션의 컨트롤러 역할을 수행하는 인터페이스로,
 클라이언트의 요청을 처리하고 비즈니스 로직을 수행하는 추상 계층을 나타냄

- 인터페이스를 사용하여 요청에 따라 다양한 액션을 처리할 수 있음
- Action 인터페이스를 사용하여 Service 클래스를 구현하는 경우,
  일반적으로 웹 애플리케이션의 컨트롤러 레이어에서 요청을 처리하고
  관련 비즈니스 로직을 호출하는 데 도움이 됨
- 액션을 통해 요청과 응답을 분리하고, 비즈니스 로직과 뷰 로직을 구분함으로써 
  웹 애플리케이션의 개발과 유지보수를 간편하게 할 수 있음

o Action 인터페이스 정의

public interface Action {
    public String execute(HttpServletRequest request, HttpServletResponse response)
	 throws Exception;
}
	- execute 메서드: 클라이언트의 요청을 처리하고,
			 결과를 나타내는 JSP 페이지의 경로를 반환
	- HttpServletRequest와 HttpServletResponse 매개변수를 통해 요청 및 응답을 처리할 수 있음



o 여러 Action 클래스 구현
- 여러 Action 인터페이스를 구현하는 클래스들을 작성
- 각 클래스는 특정한 액션을 수행하고, 요청에 따라 비즈니스 로직을 실행

ex) 게시물 목록을 보여주는 액션 클래스
public class ListPostsAction implements Action {
    @Override
    public String execute(HttpServletRequest request, HttpServletResponse response) 
	throws Exception {
        // 게시물 목록을 데이터베이스에서 가져와 request에 저장
        List<Post> posts = postService.getAllPosts();
        request.setAttribute("posts", posts);
        
        // JSP 페이지로 이동
        return "/listPosts.jsp";
    }
}



o Service 클래스
: Service 클래스에서는 Action을 실행하고 요청을 처리
-  Action에 따라 적절한 액션 클래스를 선택하고 실행

public class Service {
    public String performAction(String actionName, HttpServletRequest request, HttpServletResponse response) {
        Action action = ActionFactory.getAction(actionName);
        if (action != null) {
            try {
                return action.execute(request, response);
            } catch (Exception e) {
                // 예외 처리
                return "/error.jsp";
            }
        } else {
            // 액션을 찾을 수 없을 때의 처리
            return "/notFound.jsp";
        }
    }
}



o 컨트롤러(서블릿)
: 컨트롤러(서블릿)에서는 요청 URL을 분석하고 적절한 액션을 실행
- 서블릿은 Service 클래스를 사용하여 액션을 수행하고 결과 JSP 페이지로 포워딩

public class ControllerServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String actionName = request.getParameter("action");
        Service service = new Service();
        String view = service.performAction(actionName, request, response);
        request.getRequestDispatcher(view).forward(request, response);
    }
}
