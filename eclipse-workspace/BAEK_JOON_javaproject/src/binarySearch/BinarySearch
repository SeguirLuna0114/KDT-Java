

	이분 탐색(Binary Search)
	- '이분'은 한자로 보면 二分 으로 두 개로 나눈다는 의미고,
	  '탐색'은 말 그대로 어떤 것을 찾겠다
	  =>  두 부분으로 쪼개면서 탐색
	  
	- 구간 내 절반을 잘라가면서 값을 찾아나가는게 기본적인 이분 탐색 원리
	
	ex)  Up & Down 게임
		1 ~ 100 까지 수 중 상대 방이 17로 정했다고 가정할 때, 
		우리는 수를 맞추기 위해 보통 100의 절반인 50에서 시작함
		이후, 50 → 25 → 12 → 18 .. 이렇게 반으로 쪼개가면서 수를 찾는 방식
		-  '수가 존재하는지'만 알아내면 되기 때문에 중복 원소에 대한 고려는 하지 않고 구현
		
	- 처음 배열이 주어지고 그 다음에 각 값이 처음 주어진 배열에 존재하는지를 묻는 것
	- 임의의 배열이 주어질 때 우리가 찾고자 하는 값을 key라고 하고
	- 이분 탐색을 하기 위해서는 배열이 반드시 정렬 되어있어야 한다
	1. 탐색 범위내의 배열의 중간인덱스를 구한다. 
	2. 중간 인덱스의 값과 key값을 비교한다.
	3. 값이 중간 값보다 작다면 왼쪽 부분을, 값이 중간 보다 크다면 오른쪽 부분을 탐색하고, 같다면 해당 인덱스를 반환하고 종료한다. 

	- 탐색 범위의 왼쪽 끝과 오른쪽 끝이 같은 경우까지 탐색을 했는데 
	  그 값이 key값과 같지 않을 경우 해당 배열에는 key값이 존재하지 않는다는 의미
	  
	
	/**
 	* @param arr 정렬 된 배열
 	* @param key 찾으려는 값
 	* @return key와 일치하는 배열의 인덱스
 	*/
	public static int binarySearch(int[] arr, int key) {
 
		int lo = 0;					// 탐색 범위의 왼쪽 끝 인덱스
		int hi = arr.length - 1;	// 탐색 범위의 오른쪽 끝 인덱스
 
	}