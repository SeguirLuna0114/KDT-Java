* 서브쿼리(SubQuery)
: 쿼리 내부에 포함된 다른 쿼리
	- 주로 외부 쿼리(메인 쿼리)의 조건에 따라,
	   내부 쿼리의 결과를 동적으로 생성하거나 필터링하는 데 사용
	-  데이터를 조작, 필터링 및 비교하는 등 다양한 작업을 수행하는 데 유용
	- 조건부로 데이터를 선택하거나 연산을 수행하는 데 활용

	1. 비교연산자 사용
	 : 서브쿼리에 비교연산자를 사용하여 메인 쿼리의 결과와 비교하고
	   조건을 만족하는 데이터를 선택
	2. IN, NOT IN 연산자와 함께 사용
	 : 서브쿼리의 결과가 일련의 값 중 하나와 일치하는지 여부를 확인하여 데이터를 선택
	3. EXISTS, NOT EXISTS 연산자와 함께 사용
	 : 서브쿼리의 결과가 존재하는지 여부를 확인하여 데이터를 선택
	4. 서브쿼리의 결과가 단일 행(값)을 반환하는 경우
	 : 주로 SELECT 문의 칼럼이나 비교 연산자에서 사용

구문)	"서브쿼리를 조건으로 사용하는 경우"
	SELECT column(s)
	FROM table
	WHERE column operator (SELECT column FROM table WHERE condition);
	- column: 메인 쿼리의 칼럼
	- operator: 비교 연산자(=, >, <, >=, <= 등)


종류)	1. 단일 행 서브쿼리 (Single-row Subquery)
	 : 서브쿼리의 결과가 단일 행(레코드)을 반환하는 형태
		- 메인 쿼리의 각 행에 대해 서브쿼리가 실행되어 결과를 반환
		   1) 메인 쿼리의 where 조건절에서 비교연산자를 사용해 작성
			주로 비교 연산자(=, >, <, >=, <=, !=)와 함께 사용되어
			메인 쿼리의 조건을 구성

		   2) 결과가 단일 값이기 때문에 주로 비교나 연산의 조건으로 활용

		- 단일 행 서브쿼리는 WHERE, HAVING, SELECT 문의 칼럼, 
				   INSERT 문의 VALUES 절 등 다양한 곳에서 사용


	2. 다중 행 서브쿼리 (Multi-row Subquery)
	 : 서브쿼리의 결과가 여러 개의 행(레코드)을 반환하는 형태의 서브쿼리
		- 메인 쿼리의 각 행에 대해 여러 행의 결과가 반환
			(결과는 여러 값의 집합 => 주로 여러 값을 필터링하거나 선택할 때 사용)
		- 주로 IN, NOT IN과 같은 연산자와 함께 사용
		   => 메인 쿼리의 조건을 만족하는 여러 값을 선택하거나 제외할 때 사용
		- 메인 쿼리의 where 조건절에서 다중행 연산자(in, all, any,...)를 사용

		1) IN 연산자
		  : 메인 쿼리의 값이 다중 행 서브쿼리의 결과 집합 안에 있는지 여부를 확인
			- 서브쿼리의 검색결과 중에서 하나라도 일치하면 참
			- 특정 값이 서브쿼리 결과에 포함되는지 여부를 검사
		
		형식)	SELECT column_name
			FROM table_name
			WHERE column_name IN (SELECT column_name FROM another_table);
			- 메인 쿼리의 column_name 값이 
			  another_table의 column_name 값 중 하나와 일치하는지 여부를 검사


		2) ALL 연산자
		  :  메인 쿼리의 조건과 다중 행 서브쿼리의 결과 집합의 
		   모든 값이 일치하는지 여부를 확인
			- 메인 쿼리의 비교조건이 서브쿼리의 검색결과와 모든 값이 일치되면 참
			- 주로 비교 연산자와 함께 사용
			- 서브쿼리의 "최대값"(max)과 메인 쿼리의 값을 조합하여
			  조건을 만족하는 행을 선택

		형식)	SELECT column_name
			FROM table_name
			WHERE column_name > ALL (SELECT column_name FROM another_table);
			- operator '>' 대신, 다른 비교연산자가 사용될수 있음


		3) ANY 연산자
		 : 메인 쿼리의 조건과 다중 행 서브쿼리의 결과 집합의 값 중
		     하나라도 일치하는지 여부를 확인
			- 메인 쿼리의 조건을 만족하는 경우
			- 주로 비교 연산자와 함께 사용
			- 서브쿼리의 "최소값"(min)과 메인 쿼리의 값을 조합하여
			  조건을 만족하는 행을 선택
			
		형식)	SELECT column_name
			FROM table_name
			WHERE column_name < ANY (SELECT column_name FROM another_table);

		

o 서브쿼리를 사용하여 테이블 내에서 데이터를 복제하는 방법
	1) 서브쿼리를 사용하면 한 테이블의 데이터를 선택
	2) 그 선택한 데이터를 다시 같은 테이블에 삽입
구문)	INSERT INTO 테이블명
	SELECT * FROM 테이블명;



cf> 서브쿼리 없이  직접 테이블을 선택하여 복제
	1) 서브쿼리가 테이블의 데이터를 선택
	2) 이 선택된 데이터가 외부 쿼리의 INSERT 문을 통해 테이블에 복제
구문)	INSERT INTO 테이블명
	SELECT * FROM (
    		SELECT * FROM 테이블명
	) AS subquery;










