* 제약 조건 설정 방식
	1. 컬럼레벨 방식으로 제약조건 설정
	2. 테이블레벨 방식으로 제약조건 설정
          ** 제약 조건을 설정할때 테이블 레벨 방식만 가능한 경우
    		1) 기본키를 복합키로 사용하는 경우(기본키 제약조건을 2개 이상 생성하는 것)
    		2) alter table 명령으로 제약조건을 추가할 경우


1. 컬럼 레벨 방식으로 제약 조건 설정
* 컬럼 레벨 방식 : 각 컬럼에 대한 제약 조건을 개별적으로 설정하는 방식
	- 컬럼 정의 내에 직접 제약 조건을 명시하는 방법
	- 컬럼의 데이터 유효성을 개별적으로 관리하며, 해당 컬럼에 대한 제약 조건을 설정

CREATE TABLE emp01( empno NUMBER(4) PRIMARY KEY,
                    ename VARCHAR2(15) NOT NULL,
                    job VARCHAR2(10) UNIQUE,
                    deptno NUMBER(4) REFERENCES dept(deptno) );


o  컬럼 레벨 방식으로 제약 조건 설정(constraint 키워드를 사용한 경우)
	- 컬럼 레벨에서 CONSTRAINT 키워드를 사용하는 대신 
	   일반적으로 컬럼 정의 내에 직접 제약 조건을 명시

구문)	CREATE TABLE table_name (
    		column_name data_type CONSTRAINT constraint_name constraint_expression,
    		...
	);
		- table_name: 제약 조건을 설정할 테이블의 이름
		- column_name: 제약 조건을 설정할 컬럼의 이름
		- data_type: 컬럼의 데이터 유형을 지정
		- constraint_name: 제약 조건의 이름을 지정
		- constraint_expression: 해당 컬럼에 대한 제약 조건을 정의하는 표현식
					데이터 유효성 검사나 기타 조건을 여기에 정의


ex) create  table  emp01(
	
	empno  number(4)  constraint  emp01_empno_pk  primary  key,

	ename  varchar2(15)  constraint  emp01_ename_nn  not null,

	job  varchar2(10)  constraint emp01_job_uk  unique,

 	deptno  number(4)  constraint  emp01_deptno_fk  references  dept(deptno)  );





2. 테이블 레벨 방식으로 제약조건 설정
* 테이블 레벨 방식: 테이블 수준에서 제약 조건을 설정하는 방식
		- 테이블 전체에 영향을 미치는 제약 조건을 설정할 때 사용
		- 여러 컬럼 간의 관계를 다루거나 테이블 간 관계를 설정할 때 유용

CREATE TABLE emp02( empno NUMBER(4),
                    ename VARCHAR2(15) NOT NULL,--not null제약조건은 컬럼레벨 방식만 가능함
                    job VARCHAR2(10),
                    deptno NUMBER(4),
                    PRIMARY KEY(empno),
                    UNIQUE(job),
                    FOREIGN KEY(deptno) REFERENCES dept(deptno) );


** 제약 조건을 설정할때 테이블 레벨 방식만 가능한 경우
	1. 복합 기본키를 사용하는 경우
	   - 복합 기본키 = 두개 이상의 컬럼으로 구성된 기본키
	   - 각 개별 컬럼에 대한 제약 조건을 컬럼 레벨에서 설정할 수 없을 때,
	     테이블 레벨에서 복합 기본 키 제약 조건을 설정
	     ex) CREATE TABLE enrollment (
    			student_id NUMBER,
    			course_id NUMBER,
    			enrollment_date DATE,
    			CONSTRAINT pk_enrollment PRIMARY KEY (student_id, course_id)
			-- 'CONSTRAINT pk_enrollment' 생략 가능
		 );
	2. ALTER TABLE 명령으로 제약 조건을 추가하는 경우
	   - 테이블이 이미 존재하고 있는 경우,
	        ALTER TABLE 명령을 사용하여 테이블 레벨에서 제약 조건을 추가
	     ex) employees에 hire_date 컬럼에 대한 CHECK 제약 조건을 추가
		ALTER TABLE employees
		ADD CONSTRAINT chk_hire_date CHECK (hire_date <= SYSDATE);


o  CONSTRAINT 키워드를 사용하여 테이블 레벨에서 제약 조건을 설정
	- CONSTRAINT 키워드는 주로 테이블 레벨에서 사용
구문) 	CREATE TABLE employees (
    		employee_id NUMBER,
    		first_name VARCHAR2(50),
    		last_name VARCHAR2(50),
    		department_id NUMBER,
    		CONSTRAINT pk_employee PRIMARY KEY (employee_id),
    		CONSTRAINT nn_first_name CHECK (first_name IS NOT NULL),
    		CONSTRAINT nn_last_name CHECK (last_name IS NOT NULL),
    		CONSTRAINT fk_department FOREIGN KEY (department_id) 
					REFERENCES departments(department_id)
     	);



ex) create  table  emp01(
	
	empno  number(4),

	ename  varchar2(15)  constraint  emp01_ename_nn  not null,

	job  varchar2(10),

 	deptno  number(4),

	constraint  emp01_empno_pk  primary  key(empno),

	constraint  emp01_job_uk  unique(job),

	constraint  emp01_deptno_fk  foreign  key(deptno)  references  dept(deptno)  ); 











