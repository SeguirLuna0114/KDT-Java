* 무결성 제약조건
: 데이터베이스 내부에서 데이터의 부정확한 변경이나 불일치를 막기 위해 
  테이블 생성시 각 컬럼에 대해 정의하는 여러 규칙을 의미


1. NOT NULL 제약조건
  : 특정 열이 널(Null) 값을 가질 수 없도록 지정하는 규칙
	- 특정 열에 항상 값이 존재하도록 보장
	- Null값은 아무런 값도 가지지 않음을 나타내기에, "반드시 값을 입력해야 함"

구문)	CREATE TABLE table_name (
    		column_name	data_type	NOT NULL,
    		-- 다른 열 정의
	);
		- column_name: "NOT NULL" 제약조건을 적용할 열의 이름
		- data_type: 열의 데이터 유형



2. UNIQUE(고유) 제약조건
  : 특정 열(또는 열들)에 대해 "고유한 값"을 가지도록 강제하는 제약조건
	- "중복"된 값이 해당 열에 저장되는 것을 "방지"
	  (중복된 값이 발견되면 삽입 또는 수정 작업을 거부)
	- NULL 값을 허용
	  (널 값을 가지더라도, 중복된 값이 없어야 한다)

구문)	CREATE TABLE table_name (
    		column_name data_type UNIQUE,
    		-- 다른 열 정의
	);
		- column_name: "UNIQUE" 제약조건을 적용할 열의 이름
		- data_type: 열의 데이터 유형


3. PRIMARY KEY(기본키) 제약조건
  : 테이블의 행을 고유하게 식별하기 위해 사용되는 제약조건
	"Primary Key = Not Null + Unique"
	- 테이블 내의 특정 열(또는 열들)을 기본키로 지정하여 
	   해당 열의 값이 고유하고 널(Null) 값이 아닌지를 보장
	1) 중복된 값 없이 각 레코드를 고유하게 식별 (중복 데이터 허용 X)
	2) 널 값을 허용하지 않음(NULL값 허용 X)
	3) 테이블 간의 관계를 구축하거나 참조할 때 사용
	4)  한 테이블 내에 오직 하나의 행만을 기본키로 지정 가능(고유하게 식별하기 위함)
		- 단, 복합 기본키를 지정하려면
		  해당 열들의 조합이 중복되지 않아야 하며, 각 열은 널 값을 가질 수 없어야함

구문)	CREATE TABLE table_name (
    		column_name data_type PRIMARY KEY,
    		-- 다른 열 정의
	);



4. FOREIGN KEY(외래키) 제약조건
  : 한 테이블의 열이 다른 테이블의 기본키와 관련되도록 강제하는 제약조건
	- 관계형 데이터베이스에서 테이블 간의 관계를 정의하고 유지 가능
	- 부모 테이블과 자식 테이블 간의 관계를 나타냄
	1) 부모테이블의 부모값만 참조 가능하다는 의미
		* 부모키는 primary key나 unique 제약조건으로 설정되어 있어야 함
	   =>  자식 테이블의 외래키도 고유한 값을 가져야 함(중복 데이터 허용X)
	2) 자식 테이블에 있는 외래키 열의 값은 
	   부모 테이블의 기본키 값 중 하나와 일치해야 함
	   => 부모키에서 참조할 수 없는 값을 입력할 수 X

구문)	i) FOREIGN KEY 제약조건을 나중에 정의
	CREATE TABLE child_table (
    		foreign_key_column data_type,
    		-- 다른 열 정의
    		FOREIGN KEY (foreign_key_column) REFERENCES parent_table (parent_key_column)
	);

	ii) 열을 정의하는 동시에 바로 REFERENCES 키워드를 사용하여 외래키를 정의
	CREATE TABLE child_table (
    		column_name data_type REFERENCES parent_table (parent_key_column),
  		-- 다른 열 정의
	);

		- child_table: 생성하려는 자식 테이블의 이름
		- column_name: 자식 테이블의 열
		- foreign_key_column: 외래키로 지정하려는 열의 이름
				      부모 테이블의 기본키와 관련됨
		- parent_table: 관계를 형성하려는 부모 테이블의 이름
		- parent_key_column: 부모 테이블의 기본키



5. CHECK(체크) 제약조건
: 데이터가 입력될때 특정 조건을 만족하는 데이터만 입력되도록 만들어 주는 제약조건
	- 테이블 내의 열에 저장될 수 있는 값의 범위나 조건을 지정
		ex) 나이 열의 값이 음수가 아니거나 특정 범위 내에 있는지 등을 확인 가능

구문)	CREATE TABLE table_name (
    		column_name data_type,
    		-- 다른 열 정의
    		CHECK (condition)
	);
		- column_name: CHECK 제약조건을 적용할 열의 이름
		- condition: 열이 가져야 하는 조건을 나타내는 논리식
			     열에 저장될 값의 범위나 패턴을 정의
			     논리 연산자와 비교 연산자, 함수 등을 사용하여 작성 가능

ex)	나이 열의 값이 음수가 아니고 18보다 큰 경우에만 허용하는 경우
	CREATE TABLE employees (
    		id INT PRIMARY KEY,
    		name VARCHAR(50),
    		age INT,
    		CHECK (age >= 0 AND age > 18),
		CHECK (LENGTH(name) <= 50)		-- 문자열 길이 50이하
		CHECK (start_date < end_date)		-- 컬럼(열) 간의 관계 체크
	);


6. DEFAULT 제약조건
: 새로운 레코드를 삽입시, 해당 열이 명시되지 않았을 경우 사용될 기본 값을 지정
	- 데이터를 삽입할 때 특정 열이 값을 갖지 않으면, 기본 값이 자동으로 할당되도록 설정 가능
	1) 열이 NULL 값을 갖는 경우에는 DEFAULT 값이 적용X
	    - 열이나 필드에 값을 지정하지 않을 경우, 해당 열이 NULL 값이 아닐때 적용됨
	2) 상수나 함수를 사용 가능
		ex) SYSDATE를 사용하여 기본 값으로 현재 시간을 설정 가능
	3) ALTER TABLE 문을 사용하여 열을 추가하면서 동시에 DEFAULT 제약조건을 설정 가능

구문)	CREATE TABLE table_name (
    		column_name data_type DEFAULT default_value,
    		-- 다른 열 정의
	);
		- table_name: 새로 생성하려는 테이블의 이름.
		- column_name: 기본 값을 설정하려는 열의 이름.
		- data_type: 열의 데이터 유형 (예: VARCHAR2, NUMBER, DATE 등).
		- default_value: 열의 기본 값으로 설정할 실제 값. 데이터 유형에 맞는 값을 지정


ex) CREATE TABLE employees (
    	employee_id NUMBER PRIMARY KEY,
    	hire_date DATE DEFAULT SYSDATE, -- hire_date가 지정되지 않을 경우 현재 날짜로 설정
    	department_id NUMBER DEFAULT 10 -- department_id가 지정되지 않을 경우 10으로 설정
   );




7. 컬럼 레벨로 제약 조건명 명시
* CONSTRAINT 키워드 : 테이블에 대한 다양한 제약조건을 정의할 때 사용되는 키워드
		    - 테이블에 제약조건을 명시적으로 정의 가능
	1. 각 제약조건은 고유한 이름을 가져야함
		- 이름을 통해 제약조건을 나중에 변경하거나 삭제 가능
	2. 컬럼레벨에서 제약조건이름을 명시적으로 지정하기 위해선,
	   각 열의 제약조건 정의에 CONSTRAINT키워드를 사용해 이름을 지정하면 됨

구문) 컬럼명	데이터타입  CONSTRAINT 제약조건이름  제약조건
	CREATE TABLE employees (
    		employee_id NUMBER CONSTRAINT pk_employee_id PRIMARY KEY,

		emp_name VARCHAR2(50) CONSTRAINT uq_emp_name UNIQUE,
			
		customer_id NUMBER CONSTRAINT fk_customer FOREIGN KEY (customer_id) 						      REFERENCES customers (customer_id),

		age NUMBER CONSTRAINT chk_age CHECK (age >= 18),

		product_name VARCHAR2(50) CONSTRAINT nn_product_name NOT NULL,
    		-- 다른 열 정의	
	);




