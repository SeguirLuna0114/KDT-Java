select       -     ResultSet      executeQuery()

insert
update       -     int	          executeUpdate()
delete

o JDBC드라이버 클래스를 로드
 static Class<?> forName(String className) 메소드 => Class.forName("String")으로 실행
 : 주어진 문자열로 지정된 "className"을 동적으로 로딩
	String driver = "oracle.jdbc.driver.OracleDriver";
	Class.forName(driver);

 - 문자열 "className": 드라이버 클래스의 전체 이름(패키지명 포함)을 나타내는 문자열
 - 위 메소드는 주로 JDBC드라이버 클래스를 로드하는데 사용
 - 해당 클래스의 바이트 코드가 JVM(Java Virtual Machine)에 로드되며,
    클래스 초기화 블록이 실행

o 연결 URL
 String url = "jdbc:oracle:thin:@172.30.1.33:1521:xe";
 - url은 데이터베이스 서버와 연결하고, 데이터베이스 객체에 접근하기 위한 정보 포함
	- "jdbc:oracle:thin:" : JDBC드라이버를 사용하여 Oracle데이터베이스에 접속. 
	   thin은 Oracle Thin 클라이언트를 사용한다는 의미
	- "@localhost" : 데이터베이스 서버의 IP주소. 
			localhost로 설정 => 현재 실행중인 컴퓨터의 데이터베이스 서버 의미
	- "1521" : 데이터베이스 포트번호. Oracle 데이터베이스는 기본적으로 1521 포트 사용
	- "xe" : 데이터베이스 객체 이름. Oracle 데이터베이스의 인스턴스 중
		 xe(Express Edition, 간편버전)을 의미.


o Connection 객체(데이터베이스 연결 객체)
 - 연결이 성공적으로 수립될 경우, 이 객체를 통해 데이터베이스 작업 수행 가능
 - DriverManager 클래스의 getConnection()메소드를 사용하여 데이터베이스에 연결을 생성
 	con = DriverManager.(String url, String user, String password);
	- 지정된 url, 사용자 이름("user"), 비밀번호("password")로 데이터베이스에 연결


o Statement 객체(sql문을 실행하기 위한 객체)
 - Connection 객체의 createStatement() 메서드를 사용하여 Statement 객체를 생성
- createStatement() 메서드: 데이터베이스와 상호작용하여 
			    SQL 문을 실행하기 위한 Statement 객체를 생성
- Statement 객체는 SQL 문을 실행하는 데 사용. 데이터베이스와의 상호작용을 위한 인터페이스 역할
		stmt = con.createStatement();


o ResultSet 인터페이스
 : 데이터베이스로부터 쿼리 실행 결과를 포함하는 테이블 형태의 데이터
 - ResultSet 객체를 통해 데이터베이스에서 검색된 결과 집합에 접근하고 조작 가능
 - 데이터베이스에서 가져온 결과를 가리키는 커서(Cursor)와 같은 역할
 * 객체생성 방법 : Statement 객체의 executeQuery() 메서드를 통해 생성됨
 	- executeQuery() 메서드: SELECT 쿼리를 실행하고 그 결과를 ResultSet 객체로 반환
 	  	ResultSet rs = stmt.executeQuery("SELECT * FROM customer");
 	
 * 주요 메소드
 - boolean next()메소드: 결과 집합의 다음 행으로 이동하며, 
			이동할 행이 존재하면 true, 없으면 false를 반환
 - getInt(String columnLabel) 메소드: 현재 행에서 지정된 열(column)의 데이터를 가져옴




