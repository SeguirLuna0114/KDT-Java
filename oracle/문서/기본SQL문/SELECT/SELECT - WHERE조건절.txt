* WHERE 조건절
: 데이터베이스에서 특정 조건을 만족하는 행만을 선택하는 데 사용되는 절

- WHERE 절을 사용하면 원하는 데이터만을 필터링하여 검색 가능

- 구조
	SELECT column1, column2, ...
	FROM table_name
	WHERE condition;
	- SELECT: 어떤 열(들)을 조회할지를 지정하는 키워드
	- FROM: 데이터를 조회할 테이블의 이름을 지정하는 키워드
	- WHERE: 특정 조건을 지정하여 어떤 행(들)을 선택할지를 정하는 키워드
		- condition: 조건을 지정. 이 조건이 참인 행만이 결과에 나타남

- 비교 연산자와 논리 연산자 등을 활용하여 복잡한 조건을 구성 가능
	- 비교 연산자: =, >, >=, <, <=, !=, ^=, <>
	- 논리 연산자: AND, OR, NO

- 그 외의 IN, BETWEEN, LIKE, IS NULL과 같은 다양한 조건도 WHERE 절에서 사용 가능
	* BETWEEN 연산자: 특정 범위 내에 있는 값을 필터링
		-  시작 값과 끝 값 사이의 값들을 포함하는 범위를 지정
		column_name BETWEEN value1 AND value2;
		- value1: 범위의 시작 값, value2: 범위의 끝 값

	* LIKE 연산자 : 문자열 값의 부분 일치를 확인하는 데 사용되는 연산자
		-  특정 패턴과 일치하는 문자열 값을 찾을 때 유용하게 사용됨
		- 와일드카드 문자와 함께 사용됨
			% : 0개 이상의 임의의 문자열	ex) LIKE 'Apple%': "Apple"로 시작
			_ : 하나의 임의의 문자		ex) LIKE 'ORD_ _ _': ORD뒤 3개문자



1. 숫자 데이터 (Numeric Data)를 비교하는 경우
	- 숫자와 관련된 비교 연산자 (=, >, >=, <, <=, !=, ^=, <>)를 사용
		-  !=, ^=, <> (Not Equal To) 연산자
		  : 왼쪽의 값이 오른쪽의 값과 같지 않은지 비교
	- BETWEEN과 같은 연산자를 사용하여 범위 선택
	ex) SELECT * FROM employees WHERE department_id ^= 4;
		- department_id"가 4가 아닌 직원
	ex) SELECT * FROM products WHERE product_id <> 10;
		- product_id"가 10이 아닌 제품들을 선택



2. 문자 데이터(String Data)를 필터링 하는 경우
	- 주로 비교 연산자 = (같음), LIKE (부분 일치) 등을 사용
	- 1) 문자열 좌우에 외따옴표('문자열')를 붙여야 함
	- 2) 문자 데이터는 대소문자를 구분
	ex) first_name" 열이 'John'인 모든 행을 선택
		SELECT * FROM employees
		WHERE first_name = 'John';

	ex) product_name" 열에 'apple'이 포함된 제품들을 선택
		SELECT * FROM products
		WHERE product_name LIKE '%apple%';



3. 날짜 데이터(Date Data) 값을 비교하는 경우
	- 날짜데이터 좌우에 외따옴표(')를 붙여서 사용
	- 날짜와 관련된 비교 연산자 (=, <, >, <=, >=) 사용
	- 날짜 범위를 확인하는 데에는 BETWEEN 연산자와 TO_DATE() 함수를 함께 사용하여 범위비교
		* TO_DATE() 함수는 문자열을 날짜로 변환하는 함수

	ex) "order_date"가 '2023-01-01' 이후인 주문들을 선택
		SELECT * FROM orders
		WHERE order_date >= TO_DATE('2023-01-01', 'YYYY-MM-DD');

	ex) "event_date"가 '2023-08-01'부터 '2023-08-31'까지 범위 선택
		SELECT * FROM events
		WHERE event_date BETWEEN TO_DATE('2023-08-01', 'YYYY-MM-DD') 
				 AND TO_DATE('2023-08-31', 'YYYY-MM-DD');


	



