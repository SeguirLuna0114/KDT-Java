* ResultSet 인터페이스
 : JDBC에서 데이터베이스 결과셋을 처리하는 인터페이스

- 데이터베이스 쿼리의 실행 결과를 테이블 형태로 받아와서 처리
	=> 데이터베이스에서 가져온 결과를 가리키는 커서(Cursor)와 같은 역할
- 주로 SELECT쿼리의 결과를 다루는데 사용


 * 객체생성 방법 
case1) 	Statement를 사용하여 ResultSet 객체 생성
 	- Statement 객체의 executeQuery() 메서드를 통해 객체 생성
 	- executeQuery() 메서드: SELECT 쿼리를 실행하고 그 결과를 ResultSet 객체로 반환
 	 ex)	Statement stmt = con.createStatement();
	 	String sql = "SELECT * FROM customers";
		ResultSet rs = stmt.executeQuery(sql);

	- 이후, next()메소드를 이용하여 결과 레코드를 순회하며
	  순회중인 행의 지정 열에서 데이터를 가져와 변수에 저장하고 출력
	ex)	while (rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("name");
                String email = rs.getString("email");
                System.out.printf("ID: %d, Name: %s, Email: %s \n", id, name, email);
            }
 

 case2) PreparedStatement를 사용한 ResultSet 객체 생성
	- PreparedStatement 객체의 prepareStatement()메소드를 통해 객체 생성
	- prepareStatement() 메소드: PreparedStatement 객체를 생성하는 메소드
	- executeQuery() 메서드: SELECT 쿼리를 실행하고 그 결과를 ResultSet 객체로 반환
	  ex)	String sql = "SELECT * FROM customers WHERE id = ?";
		PreparedStatement pstmt = con.prepareStatement(sql);
		// 매개변수에 값을 설정
		pstmt.setInt(1, 1); // Set parameter value
		ResultSet rs = pstmt.executeQuery();

 
	
 * 주요 메소드
 - boolean next() 메소드: ResultSet에서 다음 행(레코드)으로 이동하며,
			 이동할 행이 존재하면 true, 없으면 false를 반환
 	1) next() 메서드가 호출되면, 현재 레코드 위치가 결과 집합의 첫 번째 레코드로 이동
	2) next() 메서드를 호출하면 현재 레코드에서 다음 레코드로 이동
	   다음 레코드가 없으면(결과 집합의 끝에 도달했을 경우) false를 반환
	3) next() 메서드를 통해 현재 레코드로 이동한 후, 각 컬럼에 접근하여 필드 값을 읽어옴
	4) next() 메서드를 여러 번 호출하여 결과 집합의 모든 레코드를 순회
 		
- 데이터 추출 메소드 getXxx() 메소드: ResultSet에서 현재 레코드에서 필드 값을 추출하는 메소드
	1) getInt(String columnLabel) 메소드
		: ResultSet에서 해당 열로부터 가져온 값이 "정수"일 때 사용. 해당필드값 반환
		ex) COUNT(*) : SQL 집계 함수. 특정 테이블이나 레코드 수를 계산하는 데 사용
			       하나의 레코드에 단일 값을 저장하여 하나의 레코드만 반환
				=> getInt(1)과 같은 메서드를 사용하여 결과 가져옴
 	2) getString(String columnLabel) 메소드
		: ResultSet에서 해당 열로부터 가져온 값이 "문자열"일때 사용. 해당필드값 반환

- 리소스 해제 메소드 close() 메소드: 사용이 끝나면 반드시 호출
 		














 		