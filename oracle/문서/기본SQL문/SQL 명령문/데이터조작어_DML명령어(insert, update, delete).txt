* DML명령어(데이터 조작 언어(DML, Data Manipulation Language))
"데이터를 조회, 삽입, 수정, 삭제하는 데 사용되는 SQL 명령어"


* Where조건절: 데이터를 검색하거나 조작할 때, 
	      특정 조건을 만족하는 행(레코드)을 선택하기 위해 사용
	- 주어진 조건을 만족하는 행만을 처리하거나 조회
	- 논리 연산자(AND, OR)와 비교 연산자(=, <>, >, <, >=, <= 등)를 사용하여 필터링
	1. WHERE 조건절은 SELECT 문에서 특정 조건을 만족하는 행만을 조회하기 위해 사용
	2. WHERE 조건절은 UPDATE 문에서 특정 조건을 만족하는 행의 데이터를 업데이트할 때 사용
	3. WHERE 조건절은 DELETE 문에서 특정 조건을 만족하는 행을 삭제할 때 사용
	4. INSERT 문은 새로운 데이터를 추가하는 목적으로 사용 => WHERE 조건절이 필요X



1. INSERT : 데이터 입력
	- 데이터베이스 테이블에 새로운 레코드(행)를 삽입하는데 사용

1) INSERT INTO 문을 사용하여 데이터를 특정 테이블에 추가

구문1)  	INSERT INTO table_name (column1, column2, column3, ...)
	VALUES (value1, value2, value3, ...);
		- table_name: 데이터를 삽입하려는 대상 테이블의 이름
		- (column1, column2, column3, ...): 삽입할 열(column) 목록
			"필요한 경우에만 열을 명시할 수도 있음"
		- VALUES (value1, value2, value3, ...): 각 열에 해당하는 값을 지정

     ex)   insert into dept01(deptno, dname, loc) values(10,'ACCOUNTING', 'NEW_YORK'); 
           insert into dept01(dname, loc, deptno) values('RESEARCH', 'DALLAS', 20); 


구문2)	INSERT INTO table_name
	VALUES (value1, value2, value3, ...);
		- 삽입할 열 목록을 생략하여, 
		  모든 열에 해당하는 값을 지정하지 않고도 새로운 레코드를 삽입 가능
		- 열의 순서와 데이터 유형을 정확하게 맞춰줘야 함

     ex)   insert into dept01 values(30, 'SALES', 'CHICAGO');
           insert into dept01 values(40, 'OPERATIONS','BOSTON');


	1. NULL값 입력


o 다른 테이블의 구조만 복사하여 테이블 생성
	'WHERE 1=0' 조건을 사용해, 테이블 구조만 복사
	- WHERE 1=0 조건은 항상 거짓이므로, "emp" 테이블에서 어떠한 행도 선택되지 않음
	  따라서,  동일한 열 구조를 가지지만 데이터가 포함되지 X

구문)	CREATE TABLE table_name AS
	SELECT * FROM source_table
	WHERE 1=0;



2) 서브쿼리를 이용해 데이터 입력하는 방법
	- 서브쿼리를 사용하여 데이터를 입력하는 INSERT 문을 생성 가능
	- 다른 테이블에서 가져온 데이터나 복잡한 조건을 만족하는 데이터를 삽입

구문)	INSERT INTO target_table (column1, column2, ...)
	SELECT column1, column2, ...
	FROM source_table
	WHERE condition;
		- target_table: 데이터를 삽입할 대상 테이블의 이름
		- (column1, column2, ...): 삽입할 열(column) 목록
		- source_table: 데이터를 가져올 소스 테이블의 이름이나 서브쿼리
		- condition: 데이터를 선택하기 위한 조건


3) INSERT ALL 명령문으로 다중 테이블에 데이터 입력
* INSERT ALL 문: 하나의 INSERT 문으로 여러 개의 테이블에 데이터를 동시에 입력하는 방법
	- 각 행에 대한 데이터가 여러 테이블에 대해 다른 열로 삽입되어야 할 때 유용

구문)	INSERT ALL
    		INTO target_table1 (column1, column2, ...)
         		VALUES (value1, value2, ...)
    		INTO target_table2 (column1, column2, ...)
         		VALUES (value1, value2, ...)
    		...
	SELECT * FROM dual;

		- target_table1, target_table2, ...: 데이터를 삽입할 대상 테이블들의 이름
		- (column1, column2, ...): 각 테이블에 대해 삽입할 열(column) 목록
		- (value1, value2, ...): 각 테이블에 대한 값 목록
					각각의 테이블에 대한 값을 지정
		- SELECT * FROM dual: INSERT ALL 문의 끝을 나타내기 위한 더미 SELECT 문


ex)	INSERT ALL
        	INTO emp_hir 
            		VALUES (empno, ename, hiredate)
        	INTO emp_mgr
            		VALUES (empno, ename, mgr)
	SELECT empno, ename, hiredate, mgr FROM emp WHERE deptno=20;  



2. UPDATE (기존 데이터 수정)
1) UPDATE 문을 사용하여 특정 테이블의 열에 저장된 데이터를 업데이트/수정
	- 테이블의 레코드를 선택하고, 선택한 레코드의 값을 수정하는 데에 사용

구문)	UPDATE table_name
	SET column1 = value1, column2 = value2, ...
	WHERE condition;
		- table_name: 데이터를 수정하려는 대상 테이블의 이름
		- SET column1 = value1, column2 = value2, ...
			: 변경하려는 열과 해당하는 값을 설정
		- WHERE condition: 어떤 레코드(행)를 수정할지 선택하는 조건을 정의
				- where 조건절을 생략하면 모든 레코드가 수정됨


2) 서브쿼리를 이용하여 데이터 수정
	- 다른 쿼리의 결과를 기반으로 특정 조건을 만족하는 데이터를 수정하는 데 사용
	- 서브쿼리는 주로 조건을 결정하는 데에 활용됨
	  해당 조건을 만족하는 레코드를 수정하는 업데이트를 수행

구문)	UPDATE table_name
	SET column1 = value1, column2 = value2, ...
	WHERE columnN operator (SELECT column FROM another_table WHERE condition);

		- table_name: 데이터를 수정하려는 대상 테이블의 이름
		- SET column1 = value1, column2 = value2, ...
			: 변경하려는 열과 해당하는 값을 설정
		- WHERE columnN operator 
		 (SELECT column FROM another_table WHERE condition)
			: 업데이트할 레코드를 선택하기 위한 조건을 정의하는 서브쿼리
			   서브쿼리의 결과에 따라 해당 조건을 만족하는 레코드가 수정됨
			- columnN: 업데이트할 대상 테이블의 열(column)
				   이 열의 값을 변경하려는 목적으로 사용
			- operator: 열의 값을 서브쿼리의 결과와 비교
				 = (같음), >, <, >=, <= 등의 비교 연산자(operator) 사용
			- 서브쿼리:  업데이트할 레코드를 선택하기 위한 조건을 가진 쿼리
				    해당 조건을 만족하는 레코드의 값을 가져옴
				- another_table: 서브쿼리에서 데이터를 가져오는 데 사용
				- condition: 서브쿼리에서 업데이트할 레코드 선택 조건을 정의

* 서브쿼리를 사용한 업데이트 문에서 
   WHERE 절 내부에서 사용되는 열과 수정할 열이 같지 않은 경우, 
  서로 다른 열을 기준으로 데이터를 선택하고 업데이트하는 작업을 수행
	=> 서브쿼리의 결과를 기반으로 특정 조건을 만족하는 레코드를 선택하고,
	  해당 레코드의 다른 열 값을 수정 가능 
ex)	20번 부서의 지역명(DALLAS)를 40번 부서의 지역명(BOSTON)으로 수정
	UPDATE dept01
	set loc = (SELECT loc FROM dept01 WHERE deptno = 40)
	WHERE deptno = 20;




3. DELETE (데이터 삭제)
1) DELETE FROM 문: 테이블에서 레코드(행)를 삭제하는 데 사용

구문)	DELETE FROM table_name
	WHERE condition;
		- table_name: 데이터를 삭제하려는 대상 테이블의 이름
		- WHERE condition: 어떤 레코드를 삭제할지 선택하는 조건을 정의
				   where 조건절을 생략하면 모든 레코드가 삭제됨

* ROLLBACK: 트랜잭션을 이전 상태로 되돌리는 명령문
	-  트랜잭션: 데이터베이스에서 한 번에 수행되어야 하는 하나의 논리적인 작업 단위
	- ROLLBACK을 사용하여 트랜잭션이 시작된 이후의 변경 사항을 취소하고 이전 상태로 복원 가능

구문)	ROLLBACK;


2) 서브쿼리를 이용하여 데이터 삭제
	- 서브쿼리의 결과에 따라 특정 조건을 만족하는 데이터를 삭제하는 데 사용

구문)	DELETE FROM table_name
	WHERE column operator (SELECT column FROM another_table WHERE condition);

	- table_name: 데이터를 삭제하려는 대상 테이블의 이름
	- WHERE 절: 어떤 레코드를 삭제할지 선택하는 조건을 정의
	- column: 삭제할 대상 레코드를 선택하는 조건을 결정하는 열(column)
	- operator: 비교 연산자(operator)를 사용하여 column과 서브쿼리의 결과를 비교
	- SELECT column FROM another_table WHERE condition
		: 데이터를 선택하려는 조건을 가진 서브쿼리







