* 트랜잭션(Transaction)
: 하나 이상의 데이터 조작 작업들을 묶어서 하나의 "논리적 작업 단위"로 처리하는 개념

	1. 트랜잭션은 DML(insert, update, delete) SQL문으로 시작됨
		- 트랜잭션은 DML문을 묶어서 논리적 작업 단위로 다루고,
		   DML 문을 통해 데이터베이스의 상태를 변경

	2. 데이터의 일관성을 유지하면서, 데이터를 안정적으로 복구하기 위해 사용됨
		- 일관성 (Consistency): 트랜잭션이 성공적으로 완료되면,
				     	데이터베이스는 일관성 있는 상태로 유지되어야 함
					이는 데이터의 무결성을 보장.
		- 영속성 (Durability): 트랜잭션이 커밋되면, 
				      변경된 데이터는 영구적으로 데이터베이스에 저장되어야 함

	3. 트랜잭션은 All-or-Nothing 방식으로 처리됨(중간단계x)
		- 트랜잭션 내의 모든 작업이 성공적으로 완료되어야만 커밋(저장)되며, 
		  어떤 작업이 실패하면 트랜잭션 전체가 롤백되어 이전 상태로 돌아감

		- All-or-Nothing 방식은 트랜잭션의 원자성(Atomicity) 원칙을 반영하는 개념
	  	  : 트랜잭션 내의 모든 작업이 성공적으로 완료되면 
		    트랜잭션을 커밋하고 데이터베이스 상태를 변경하고,
		    만약 하나의 작업이라도 실패하면 트랜잭션 전체를 롤백하여 
		    이전 상태로 되돌림
		


 * TCL(Transaction Control Langauage)
  : 트랜잭션을 제어하는 명령어의 모음
	- TCL은 트랜잭션의 시작, 종료, 커밋, 롤백 등을 다루는데 사용됨

 1. COMMIT: 트랜잭션의 "작업이 성공적으로 완료"되었을 때, 
	    "변경 사항을 데이터베이스에 영구적으로 저장"하고 "트랜잭션을 종료"
	- 트랜잭션 내에서 수행한 모든 데이터 조작 작업의 결과가 데이터베이스에 적용됨
	  => 데이터베이스의 상태가 트랜잭션 이후의 상태로 업데이트됨
	     이후의 작업에서도 그 변경 사항이 유지됨

   * 자동 커밋 (Auto-Commit)
	: 명시적인 트랜잭션 시작 없이 데이터 조작 작업(DML 작업)을 수행한 경우
	   자동으로 트랜잭션으로 처리하고, 작업마다 자동으로 커밋을 수행


2. ROLLBACK: 트랜잭션의 작업 중 "문제가 발생"하거나 트랜잭션을 "취소"해야 할 때,
	      "변경 사항을 이전 상태로 되돌리고" 트랜잭션을 "종료" 
	- 트랜잭션 내에서 수행한 모든 데이터 조작 작업의 결과가 취소되고,
	  데이터베이스의 상태가 이전 상태로 "복원"
	  => 데이터베이스의 상태가 트랜잭션 이전의 상태로 업데이트됨
	- 트랜잭션의 작업을 취소하며, 트랜잭션은 종료됨

   * 자동 롤백 (Auto-Rollback)
	: 트랜잭션 내의 하나 이상의 DML 작업이 실패하거나, 
	  데이터베이스에서 정의한 제약 조건을 위반하는 작업이 발생한 경우, 
	   시스템은 자동으로 해당 트랜잭션을 롤백


 3. SAVEPOINT: 트랜잭션 내에서 중간 지점을 지정해, 해당 지점으로 롤백할 수 있는 명령어
	- SAVEPOINT를 사용하면 특정 부분에서의 문제가 발생했을 때 해당 지점까지만 롤백 하고,
	  나머지 작업을 유지하도록 처리
	  => 트랜잭션 내에서 특정 작업들을 그룹화하여 롤백을 좀 더 세밀하게 관리 가능

구문)	SAVEPOINT savepoint_name;
		- savepoint_name: 지정하고자 하는 SAVEPOINT의 이름











