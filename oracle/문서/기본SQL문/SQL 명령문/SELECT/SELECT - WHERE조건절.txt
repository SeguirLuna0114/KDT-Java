* WHERE 조건절-------------------------------------------------------------------------
: 데이터베이스에서 특정 조건을 만족하는 행만을 선택하는 데 사용되는 절

- WHERE 절을 사용하면 원하는 데이터만을 필터링하여 검색 가능

- 구조
	SELECT column1, column2, ...
	FROM table_name
	WHERE condition;
	- SELECT: 어떤 열(들)을 조회할지를 지정하는 키워드
	- FROM: 데이터를 조회할 테이블의 이름을 지정하는 키워드
	- WHERE: 특정 조건을 지정하여 어떤 행(들)을 선택할지를 정하는 키워드
		- condition: 조건을 지정. 이 조건이 참인 행만이 결과에 나타남

- 비교 연산자와 논리 연산자 등을 활용하여 복잡한 조건을 구성 가능
	- 비교 연산자: =, >, >=, <, <=, !=, ^=, <>
	- 논리 연산자: AND, OR, NO

- 그 외의 IN, BETWEEN, LIKE, IS NULL과 같은 비교연산자도 WHERE 절에서 사용 가능


* 비교연산자1(=, >, >=, <, <=, !=, ^=, <>)----------------------------------------------
1. 숫자 데이터 (Numeric Data)를 비교하는 경우
	- 숫자와 관련된 비교 연산자 (=, >, >=, <, <=, !=, ^=, <>)를 사용
		-  !=, ^=, <> (Not Equal To) 연산자
		  : 왼쪽의 값이 오른쪽의 값과 같지 않은지 비교
	- BETWEEN과 같은 연산자를 사용하여 범위 선택
	ex) SELECT * FROM employees WHERE department_id ^= 4;
		- department_id"가 4가 아닌 직원
	ex) SELECT * FROM products WHERE product_id <> 10;
		- product_id"가 10이 아닌 제품들을 선택



2. 문자 데이터(String Data)를 필터링 하는 경우
	- 주로 비교 연산자 = (같음), LIKE (부분 일치) 등을 사용
	- 1) 문자열 좌우에 외따옴표('문자열')를 붙여야 함
	- 2) 문자 데이터는 대소문자를 구분
	ex) first_name" 열이 'John'인 모든 행을 선택
		SELECT * FROM employees
		WHERE first_name = 'John';

	ex) product_name" 열에 'apple'이 포함된 제품들을 선택
		SELECT * FROM products
		WHERE product_name LIKE '%apple%';



3. 날짜 데이터(Date Data) 값을 비교하는 경우
	- 날짜데이터 좌우에 외따옴표(')를 붙여서 사용
	- 날짜와 관련된 비교 연산자 (=, <, >, <=, >=) 사용
	- 날짜 범위를 확인하는 데에는 BETWEEN 연산자와 TO_DATE() 함수를 함께 사용하여 범위비교
		* TO_DATE() 함수는 문자열을 날짜로 변환하는 함수

	ex) "order_date"가 '2023-01-01' 이후인 주문들을 선택
		SELECT * FROM orders
		WHERE order_date >= TO_DATE('2023-01-01', 'YYYY-MM-DD');

	ex) "event_date"가 '2023-08-01'부터 '2023-08-31'까지 범위 선택
		SELECT * FROM events
		WHERE event_date BETWEEN TO_DATE('2023-08-01', 'YYYY-MM-DD') 
				 AND TO_DATE('2023-08-31', 'YYYY-MM-DD');



* 논리 연산자: AND, OR, NO-------------------------------------------------------------
- 조건을 조합하여 복잡한 조건식을 만들거나, 데이터 검색 시 사용됨

1. AND 연산자
: 여러개의 조건식을 동시에 만족하는 행(데이터)을 검색하기 위해 사용
 	- 모든 조건이 true일 때만 결과가 검색됨
ex) employees" 테이블에서 급여가 50000 이상이면서 부서가 'Sales'인 직원을 조회
	SELECT * FROM employees WHERE salary >= 50000 AND department = 'Sales';


2. OR 연산자
: 여러 개의 조건 중 하나 이상이 참인 행을 검색하기 위해 사용
	-  조건 중 적어도 하나가 참일 경우 결과가 검색됨
ex) orders 테이블에서 고객 번호가 101이거나 주문 상태가 'Shipped'인 주문을 조회
	SELECT * FROM orders WHERE customer_id = 101 OR order_status = 'Shipped';


3. NOT 연산자
: 주어진 조건을 부정하거나 반대로 해석하는 연산자
	- 비교연산자와 달리, "조건 전체를 부정"
	- 조건이 거짓(False)일 경우 결과가 선택됨
	- 주로 불리언(Boolean) 조건을 부정할 때 사용되며, 
	  숫자나 문자열과 같은 다른 데이터 타입에서도 사용O
ex) products 테이블에서 유효하지 않은 상품("valid" 컬럼의 값이 거짓인 경우)을 조회
	SELECT * FROM products WHERE NOT valid;

cf> 비교연산자 - "같지않음"을 나타내는 연산자(!=, ^=, <>)
	: "주어진 두 값 간의 비교"를 수행하며, 결과로 불리언 값을 반환
	- 두 값이 서로 같지 않을 때 참(True)을 반환하고, 같을 때 거짓(False)을 반환



* 비교연산자2: BETWEEN A AND B,  IN(list),  LIKE,  IS NULL--------------------------
1. BETWEEN A AND B 연산자
: "특정한 값의 범위" 내에 있는 값을 필터링하는 데 사용
	-  A 이상 B 이하의 값을 가지는 데이터를 선택
	  (시작 값과 끝 값 사이의 값들을 포함하는 범위를 지정)

	- 형식)	WHERE column_name BETWEEN value1 AND value2;
		- value1: 범위의 시작 값, value2: 범위의 끝 

# NOT BETWEEN 연산자 : 특정 범위에 속하지 않는 값을 선택하는 데 사용되는 비교 연산자
	- 주로 숫자나 날짜 범위를 지정하여 해당 범위에 포함되지 않는 값을 
	  선택하거나 필터링하는 데 활용

	- 형식) WHERE column_name NOT BETWEEN value1 AND value2;
		- value1: 범위의 시작 값, value2: 범위의 끝

ex) 급여가 2000미만이거나 3000 초과인 사원을 검색하는 SQL문
	SELECT * FROM emp WHERE sal NOT BETWEEN 2000 AND 3000;
	SELECT * FROM emp WHERE sal < 2000 OR sal >3000;        -- 논리연산자 OR



2. IN(list) 연산자
: 특정 값들의 리스트 중에서 일치하는 값을 선택하는 데 사용
	- 여러 개의 값을 한 번에 비교하고자 할 때 유용
	   (복잡한 OR조건을 반복하지 않고 간단한 구문)
	- 특정 값을 포함하는지 여부를 확인하는데 유용

	- 형식) WHERE colunm_name IN ('val1', 'val2', 'val3');
		- val1, val2, ...: 일치 여부를 비교할 여러 개의 값들을 열거

# NOT IN 연산자: 특정 값들 중에서 해당 값들을 포함하지 않는 값을 선택하는 데 사용		
	- 여러값을 비교해 해당 값들 중에서 일치하지 않는 값을 선택하거나 필터링하는 데 활용

	- 형식) WHERE colunm_name NOT IN ('val1', 'val2', 'val3');
		- val1, val2, ...: 일치 여부를 비교할 여러 개의 값들을 열거


3. LIKE 연산자 
: 패턴을 사용해 문자열 값의 부분 일치를 확인하는 데 사용
	- 문자열 값을 포함하는지, 특정 패턴을 따르는지를 확인하는데 사용
	- 와일드카드('%'와 '_') 문자는  패턴에서 특정한 문자나 문자열을 대체하는 데 사용
		% : 어떤 문자열이든 0개 이상의 문자로 대체될 수 있음
		    (문자가 하나도 없어도 가능)
			ex) LIKE 'Apple%': "Apple"로 시작
		_ : 정확히 하나의 문자로 대체됨
			ex) LIKE 'ORD_ _ _': ORD뒤 3개문자

	- 형식) WHERE colunm_name LIKE pattern;
		- pattern: 와일드카드 문자(%와 _)와 실제 문자로 검색할 패턴을 지정

# NOT LIKE 연산자
: 지정한 패턴과 일치하지 않는 값을 선택하는 데 사용

	- 형식) WHERE colunm_name NOT LIKE pattern;
		- pattern: 와일드카드 문자(%와 _)와 실제 문자로 검색할 패턴을 지정



4. IS NULL 연산자
: 특정 컬럼 값이 NULL인 행을 검색하는 데 사용
	-  NULL값: 값이 존재하지 않음을 나타내는 상태

	- = 나 != 같은 일반적인 비교 연산자는 NULL 값과 제대로 작동X
	- =''(빈 문자열)은 Null값과 동일하지 않음
	 (빈 문자열은 값이지만, NULL은 값이 없음을 나타냄)

	- 데이터베이스 테이블에 저장된 값 중에서 
	  아직 정의되지 않은 정보나 비어 있는 정보를 찾을 때 사용
	- 조인 작업 중 두 테이블 간에 일치하지 않는 NULL 값을 찾을 때 사용

	- 형식) WHERE colunm_name IS NULL;

# IS NOT NULL 연산자
: 특정 컬럼 값이 NULL이 아닌 행을 선택하는 데 사용
	- 데이터베이스 테이블에서 누락된 정보를 찾거나 정리 작업을 할 때 유용

	- 형식) WHERE colunm_name IS NOT NULL;




 



