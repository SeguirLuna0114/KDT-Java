* JOIN
: 여러 테이블을 결합하여 데이터를 추출하기 위해 사용되는 SQL 구문
"테이블 간의 관계를 활용하여 원하는 정보를 추출"

- 관련된 정보를 포함한 하나의 결과 집합으로 결합 가능

* CROSS JOIN :  두 개 이상의 테이블 사이에 모든 가능한 조합을 생성하는 조인 유형
	- 왼쪽 테이블의 각 행에 오른쪽 테이블의 모든 행을 결합하여 결과 집합 생성
	- 두 테이블의 행의수를 곱한 만큼의 행을 반환
	- 구문) 	SELECT 열목록 FROM 테이블1 CROSS JOIN 테이블2;
		SELECT 열목록 FROM 테이블1, 테이블2;


- 주요 CROSS JOIN 유형
   1) 등가조인(EquiJoin)
  2) 비등가조인(Non-EquiJoin)
  3) 자체조인(Self Join)
  4) 외부조인(Outer Join)


1. EquiJoin(등가 조인)
: 두 개 이상의 테이블을 조인할 때, 특정 "열(또는 열들) 간의 값이 서로 일치"하는 "행"들을 결합
"등호(=)를 사용하여 두 테이블간의 공통 키나 컬럼이 존재하는 경우 사용"

	- 조건) 두 테이블 간의 "공통된 값이 있는 컬럼"을 기반으로 데이터를 연결
	- 테이블 간의 관계를 분석하고 데이터를 결합하는데 사용

구문) 	case 1) 	CROSS JOIN과 WHERE 절을 조합하여 EquiJoin을 시뮬레이션
		SELECT 주문.주문번호, 고객.이름
		FROM 주문, 고객
		WHERE 주문.고객ID = 고객.ID;

	case 2) 명시적인 INNER JOIN으로 표현하여 EquiJoin을 시뮬레이션
		- 주문 테이블의 고객 ID와 고객 테이블의 ID 열을 기반으로,
		   고객 이름과 주문 정보를 결합
		SELECT 주문.주문번호, 고객.이름
		FROM 주문
		INNER JOIN 고객 ON 주문.고객ID = 고객.ID
		WHERE 조건;
			- ON 절에 열 간의 일치 조건을 명시
			- WHERE절에 조건 명시


	1) 공통컬럼은 "테이블명.공통컬럼명" 형식으로 출력해야 함
	  (공통컬럼이 아닌 컬럼들은 앞에 테이블명 생략 가능)

	- 주로 INNER JOIN, LEFT JOIN, RIGHT JOIN 등과 함께 사용됨
		- INNER JOIN
		  : EquiJoin이 발생할 때, 두 테이블 사이 일치하는 값이 있는 행만 반환
		-  LEFT JOIN / RIGHT JOIN
		  : LEFT JOIN 또는 RIGHT JOIN과 EquiJoin을 사용할 때, 
		    왼쪽 테이블 또는 오른쪽 테이블의 모든 행이 포함됨, 일치하는 값이 없으면 NULL

	2) 결과 집합은 주로 열이 중복되는 것이 흔하며, 이를 해결하기 위해 열 별칭을 사용
		* 테이블에 별칭 부여
		1) 별칭은 테이블 이름을 대체하는 이름으로 사용
		   => 테이블에 대한 별칭이 부여된 다음 부터는 테이블명 사용X, 별칭명을 사용
		2) 별칭명은 대.소문자 구분X
		3) 공통컬럼은 "별칭명.공통컬럼" 형식으로 사용해야 함
		4) 공통컬럼이 아닌 컬럼들은 앞에 별칭명을 생략O
		5) 같은 테이블을 여러 번 조인할 경우, 별칭을 사용하여 중복 테이블 구분

	  : 테이블에 별칭을 부여하기 위해 AS 키워드를 사용(AS는 생략O)
		SELECT 열목록 FROM 테이블명 AS 별칭;


2. Non-EquiJoin(비등가 조인)
: 두 개 이상의 테이블을 조인할 때, 비등호(<, >, <=, >=)를 사용하여 조인 조건을 설정하는 방식
"Join하는 Table 사이에 서로 대응하는 Key가 없는 경우
 where절의 Join조건에 '='을 제외한 비교연산자를 사용"

	- 조인되는 레코드 간에 등식이 아닌 부등식 관계가 적용되며, 
	  이를 통해 조인된 결과를 좀 더 다양한 방식으로 필터링하거나 원하는 결과를 얻음


구문)  	case 1) 	CROSS JOIN과 WHERE 절을 조합하여 Non-EquiJoin을 시뮬레이션
		SELECT 컬럼1, 컬럼2, 컬럼3,...
		FROM 테이블1, 테이블2,...
		WHERE 조인조건 with 비등호연산자(<, >);

	case 2) 명시적인 JOIN으로 표현하여 Non-EquiJoin을 시뮬레이션
		SELECT 컬럼1, 컬럼2, 컬럼3,...
		FROM 테이블1 별칭명
		JOIN 테이블2 별칭명   ON 조인조건 with 비등호연산자(<, >);

	- 사용 예시
		1) 날짜나 숫자 범위를 비교하고자 할 때 유용
		2) 두 기간 또는 숫자 범위가 겹치는지 확인하려는 경우에 사용
		3) 어떤 값이 특정 범위 내에 있는지 확인하거나,
		   특정 값보다 큰 값 중에서 가장 가까운 값을 찾을 때 사용

ex)     	SELECT e.ename, e.sal, s.grade
    	FROM emp e, salgrade s
    	WHERE e.sal BETWEEN s.losal AND s.hisal



3. Self Join(자체조인)
: 하나의 테이블 내에서 자기 자신을 조인하는 것을 의미
"한개의 테이블 내에서 컬럼과 컬럼사이의 관계를 이용해 조인"

	- 동일한 테이블을 두 번 이상 사용하여 
	  서로 다른 레코드 간의 관계를 분석하거나 데이터를 비교하는 데 사용

구문)	case 1) 	CROSS JOIN과 WHERE 절을 조합하여 Self Join을 시뮬레이션
		SELECT columns
		FROM table t1, table t2
		WHERE condition;


	case 2) 명시적인 JOIN으로 표현하여 Non-EquiJoin을 시뮬레이션
		SELECT columns
		FROM table AS t1
		JOIN table AS t2 ON condition;
			- table: 동일한 테이블
			-  t1, t2: 해당 테이블의 별칭(alias)
			- condition: 조인 조건. 일반적으로는 테이블 간의 연관 컬럼을 비교


	- 주로 계층 구조, 계층 쿼리, 레코드 간의 관계 분석 등 다양한 상황에서 유용하게 활용
	- 같은 테이블을 다른 별칭(alias)로 참조하여 사용
	  => 같은 테이블의 데이터를 서로 다른 조건에 따라 비교하거나 분석

ex)     사원 테이블의 각 사원들의 사원명과  매니저(직속상사)를 출력하는 SQL문
	SELECT employee.ename || '의 상사는 ' ||  manager.ename
	FROM emp employee, emp manager
	WHERE employee.mgr = manager.empno;



4. Outer Join(외부조인)
: 두 개 이상의 테이블을 조인할 때, 
  특정 조건을 만족하지 않는 레코드들까지도 결과에 포함시키는 조인 유형
	-  조인 조건을 만족하지 않는 레코드들에 대해서도 결과를 생성하며, 
	  조인하는 테이블 중 하나가 특정 레코드와 연관이 없는 경우에도 결과에 나타남
	- 각 테이블의 조건을 만족하지 않는 경우에는 NULL 값으로 채워짐
	- NULL 값으로 표시되는 부분을 확인 가능(데이터의 누락된 부분을 확인가능)

구문)	case 1) 	CROSS JOIN과 WHERE 절을 조합하여 Self Join을 시뮬레이션
		SELECT columns
		FROM table t1, table t2
		WHERE condition with (+);
			- 정보가 없는쪽 컬럼 뒤에 (+)를 붙임 ( =, and 만 사용가능)


	case 2) 명시적인 JOIN으로 표현하여 Non-EquiJoin을 시뮬레이션
		SELECT columns
		FROM table1
		LEFT/RIGHT/FULL OUTER JOIN table2 ON condition;


	1) 조인되는 테이블 중 하나가 다른 테이블과 관련 없는 레코드를 가질 때 유용
	   - 어느 한쪽의 테이블에는 데이터가 존재하지만,
	     다른 테이블에는 데이터가 존재하지 않을 경우
	       그 데이터가 출력되지 않는 문제를 해결하기 위해 사용

	2) 정보가 없는쪽 컬럼 뒤에 (+)를 붙임 ( =, and 만 사용가능)
	   - 조인하는 두 테이블 중에서 조건을 만족하지 않는 테이블의 레코드도
	     결과에 포함시키기 위해 사용
		ex) d.deptno = e.deptno(+)
		 : e.deptno 컬럼을 기준으로 emp 테이블의 데이터를 
		   왼쪽 테이블의 데이터와 조합하여 가져오라는 것

	   - 신 버전의 Oracle에서는 (+) 기호 대신에 LEFT JOIN과 RIGHT JOIN을 조합하여 사용
		

	* LEFT OUTER JOIN: 왼쪽 테이블의 모든 레코드와 오른쪽 테이블의 일치하는 레코드 결합
			- "오른쪽 테이블의 조건"을 만족하지 않는 경우에도
		 	   결과에 "왼쪽 테이블의 레코드가 포함"됨 (NULL 값으로 채워짐)
	ex) 	SELECT e.employee_id, e.first_name, d.department_name
		FROM employees e, departments d
		WHERE e.department_id(+) = d.department_id;
		- "employees" 테이블과 "departments" 테이블을 LEFT OUTER JOIN으로 조인
		- 왼쪽 테이블인 "employees"의 레코드들을 모두 결과에 포함
		- 오른쪽 테이블과의 조인 조건을 만족하지 않는 경우에도 
		   결과에 왼쪽테이블의 레코드를 포함시켜 나타냄


	* RIGHT OUTER JOIN: 오른쪽 테이블의 모든 레코드와 왼쪽 테이블의 일치하는 레코드 결합
			-  "왼쪽 테이블의 조건"을 만족하지 않는 경우에도
			    결과에 "오른쪽 테이블의 레코드가 포함"됨 (NULL 값으로 채워짐)
	ex)	SELECT e.employee_id, e.first_name, d.department_name
		FROM employees e, departments d
		WHERE e.department_id = d.department_id(+);
		- "employees" 테이블과 "departments" 테이블을 RIGHT OUTER JOIN으로 조인
		- 오른쪽 테이블인 "departments"의 레코드들을 모두 결과에 포함
		- 왼쪽 테이블과의 조인 조건을 만족하지 않는 경우에도 결과에 오른쪽테이블 나타냄
	

	* FULL OUTER JOIN: 양쪽 테이블의 모든 레코드와 일치하는 레코드들을 결합
			- 어느 한쪽 테이블의 조건을 만족하지 않는 경우에도 
			  결과에 해당 테이블의 레코드가 포함됨(NULL 값으로 채워짐)



















