* 트랜잭션(Transaction)
: 하나 이상의 데이터 조작 작업들을 묶어서 하나의 "논리적 작업 단위"로 처리하는 개념

	1. 트랜잭션은 DML(insert, update, delete) SQL문으로 시작됨
		- 트랜잭션은 DML문을 묶어서 논리적 작업 단위로 다루고,
		   DML 문을 통해 데이터베이스의 상태를 변경

	2. 데이터의 일관성을 유지하면서, 데이터를 안정적으로 복구하기 위해 사용됨
		- 일관성 (Consistency): 트랜잭션이 성공적으로 완료되면,
				     	데이터베이스는 일관성 있는 상태로 유지되어야 함
					이는 데이터의 무결성을 보장.
		- 영속성 (Durability): 트랜잭션이 커밋되면, 
				      변경된 데이터는 영구적으로 데이터베이스에 저장되어야 함

	3. 트랜잭션은 All-or-Nothing 방식으로 처리됨(중간단계x)
		- 트랜잭션 내의 모든 작업이 성공적으로 완료되어야만 커밋(저장)되며, 
		  어떤 작업이 실패하면 트랜잭션 전체가 롤백되어 이전 상태로 돌아감

		- All-or-Nothing 방식은 트랜잭션의 원자성(Atomicity) 원칙을 반영하는 개념
	  	  : 트랜잭션 내의 모든 작업이 성공적으로 완료되면 
		    트랜잭션을 커밋하고 데이터베이스 상태를 변경하고,
		    만약 하나의 작업이라도 실패하면 트랜잭션 전체를 롤백하여 
		    이전 상태로 되돌림
		


 * TCL(Transaction Control Langauage)
  : 트랜잭션을 제어하는 명령어의 모음
	- TCL은 트랜잭션의 시작, 종료, 커밋, 롤백 등을 다루는데 사용됨

 1. COMMIT: 트랜잭션의 "작업이 성공적으로 완료"되었을 때, 
	    "변경 사항을 데이터베이스에 영구적으로 저장"하고 "트랜잭션을 종료"
	- 트랜잭션 내에서 수행한 모든 데이터 조작 작업의 결과가 데이터베이스에 적용됨
	  => 데이터베이스의 상태가 트랜잭션 이후의 상태로 업데이트됨
	     이후의 작업에서도 그 변경 사항이 유지됨

   o 자동 커밋 (Auto-Commit)
	: 명시적인 트랜잭션 시작 없이 데이터 조작 작업(DML 작업)을 수행한 경우
	   자동으로 트랜잭션으로 처리하고, "작업마다 자동으로 커밋을 수행"

   * 자동 커밋이 발생하는 경우
	- 1) 정상적으로 데이터베이스 연결 종료: quit, exit, con.close()
	- 2) DDL 문장인 CREATE, ALTER, DROP, TRUNCATE, RENAME 등을 실행할 때
	     DDL 문장이 실행되면 자동으로 현재 트랜잭션을 커밋하고, 새로운 트랜잭션을 시작
	     => 롤백으로 삭제한 데이터를 복구하는 것 불가능
	- 3) DCL(Data Control Language)문장인 GRANT, REVOKE명령을 실행할 때
	     - 일반적으로 트랜잭션의 일부로 간주되며, 
	       명시적으로 COMMIT이나 ROLLBACK을 호출하기 전까지 변경 사항이 커밋되지 않음
	     => DML문장과 함께 트랜잭션 커밋 해야 영구 적용됨

	    cf> 기본적으로 DML문장인  INSERT, UPDATE, DELETE 등을 실행할 때
		DML문장이 커밋되기 전까진 해당 트랜잭션을 유지
		하지만 특정 환경에선 자동 커밋이 발생할 수 있음


2. ROLLBACK: 트랜잭션의 작업 중 "문제가 발생"하거나 트랜잭션을 "취소"해야 할 때,
	      "변경 사항을 이전 상태로 되돌리고" 트랜잭션을 "종료" 
	- 트랜잭션 내에서 수행한 모든 데이터 조작 작업의 결과가 취소되고,
	  데이터베이스의 상태가 이전 상태로 "복원"
	  => 데이터베이스의 상태가 트랜잭션 이전의 상태로 업데이트됨
	- 트랜잭션의 작업을 취소하며, 트랜잭션은 종료됨

	- ROLLBACK으로 복구할 수 있는 작업은 트랜잭션 내에서 실행되는 DML작업에 한정

   o 자동 롤백 (Auto-Rollback)
	: 트랜잭션이나 세션에서 발생한 오류 또는 예외 상황에 따라 
	   자동으로 이전 상태로 되돌아가는 것

    * 자동 롤백이 발생하는 경우
	-1) 트랜잭션 내에서 하나 이상의 "DML작업이 실패"하거나 "예외가 발생"하는 경우
	    자동 롤백이 발생해 트랜잭션 내에서의 모든 변경 사항이 취소되고 이전 상태로 돌아감
	-2) 데이터베이스 연결 세션이 비정상적으로 끊어지는 경우에도 자동 롤백이 발생



 3. SAVEPOINT: 트랜잭션 내에서 특정 지점을 지정해, 
	       이후에 발생한 변경 사항을 해당 지점으로 롤백하는데 사용되는 명령어
	- SAVEPOINT를 사용하면 특정 부분에서의 문제가 발생했을 때 
	  해당 지점까지만 롤백 하여 해당 지점의 데이터로 복구
	  "해당 시점 이후의 변경사항만 취소되어 복구됨"
	  => 트랜잭션 내에서 특정 작업들을 그룹화하여 롤백을 좀 더 세밀하게 관리 가능

구문)	SAVEPOINT savepoint_name;
		- savepoint_name: 지정하고자 하는 SAVEPOINT의 이름

	1) 트랜잭션 내에서 중간 체크포인트를 설정해, 롤백 시 해당 체크포인트로 돌아갈 수 있음
	    ROLLBACK TO savepoint_name;
		- SAVEPOINT와 ROLLBACK TO를 사용하여 
		   SAVEPOINT 이후의 변경 사항을 취소하고 해당 SAVEPOINT의 상태로 되돌림

	2) SAVEPOINT 이후에 발생한 일부 작업을 롤백 가능
	3) 트랜잭션 내에서 롤백범위를 "명시적"으로 제어 가능
	    "해당 시점 이후의 변경사항만 취소되어 복구됨"
	4) 여러 개의 SAVEPOINT를 사용하여 다양한 레벨에서 롤백 가능










