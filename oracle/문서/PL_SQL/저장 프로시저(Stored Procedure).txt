* 저장 프로시저(Stored Procedure)
: 데이터베이스 내에서 실행 가능한 미리 컴파일된 SQL 코드 블록
	- 하나 이상의 SQL 문을 포함하며, 데이터베이스 내에서 실행되거나 호출될 수 있음
	- 주로 데이터의 조회, 조작, 변경, 삭제 등과 같은 작업을 수행하는 데 사용됨

	1) 미리 컴파일되므로 실행 속도가 빠름
	2) 동일한 작업을 여러 곳에서 수행해야 할 때, 
	   저장 프로시저를 작성하여 코드의 중복을 피할 수 있음


o 저장 프로시저 생성
	- BEGIN과 END; 사이에 작성된 SQL 문장들이 저장 프로시저의 본문으로 실행됨

구문)	1) 매개변수가 없는 프로시저 생성
	CREATE OR REPLACE PROCEDURE procedure_name
	IS	-- 실제 SQL 문장과 비즈니스 로직이 작성되는 부분
		-- 변수 선언
		-- 변수는 저장 프로시저 실행 도중에 값들을 저장하거나 조작하는 데 사용됨
	BEGIN
  		-- 실제 SQL 문(SELECT, INSERT, UPDATE, DELETE 등)
	END;


	2) 매개변수를 갖는 저장 프로시저를 생성
		- 저장 프로시저에 매개변수를 전달할 수 있음
	CREATE OR REPLACE PROCEDURE procedure_name(
		param1 datatype1, 
		param2 datatype2, 
		...
		output_result OUT VARCHAR2	-- 결과 값을 output_result 매개변수를 통해 반환
	)
	IS
		-- 변수 선언
		-- 변수는 저장 프로시저 실행 도중에 값들을 저장하거나 조작하는 데 사용됨
	BEGIN
  		-- 실제 SQL 문(SELECT, INSERT, UPDATE, DELETE 등)
	END;

		- param1, param2, ...: 저장 프로시저가 받을 매개변수들의 이름
		- datatype1, datatype2, ...: 각 매개변수의 데이터 타입을 지정

		o 매개변수 MODE
		- IN: 입력 매개변수로 저장 프로시저에 값을 전달할 때 사용
			- 매개변수의 MODE를 생략하면, 기본적으로 IN 모드로 처리됨
		      	- 저장 프로시저를 호출할 때 이 매개변수에 값을 전달하여 
			    프로시저 내에서 사용 가능
			- 프로시저 내에서 매개변수 값을 변경X

		- OUT: 출력 매개변수로 저장 프로시저에서 값을 반환할 때 사용
			- 저장 프로시저 내에서 값을 계산하거나 설정한 후에, 
			  이 매개변수에 결과를 반환
			- 호출한 코드에서 이 매개변수의 값을 확인O

		- IN OUT: 입력 및 출력용으로 사용되는 매개변수
			- 매개변수를 입력으로 전달하면서
			   동시에 저장 프로시저에서 변경된 값을 반환할 때 사용


o 저장 프로시저 실행
구문)	1. 매개변수가 없는 저장프로시저 실행
	방법1) 	EXECUTE procedure_name;
		-- 또는 EXECUTE를 exec로 축약하여 실행 가능
		exec procedure_name;

	방법2)	CALL procedure_name;


	2. 매개변수를 갖는 저장 프로시저 실행
	방법1) 	EXECUTE나 CALL 문을 사용
		EXECUTE procedure_name(param1, param2, ...);

	방법2)	BEGIN과 END; 블록 사용
		BEGIN
  			procedure_name(param1, param2, output_result_value);
  			-- 결과 값을 output_result_value 변수에서 사용
		END;


o 바인드 변수(Bind Variable)
 : 실행 시에 실제 값이 할당되는 변수
	- 바인드 변수는 : 기호를 사용하여 표시
	- SQL 문장에서 변수의 이름을 바인드 변수로 대체하여 사용

구문)	방법1) 	EXECUTE나 CALL 문을 사용
	VARIABLE variable_name [datatype];	-- 바인드 변수를 선언

	-- 프로시저 실행
	EXECUTE procedure_name(:variable_name);
	-- 바인드변수로 돌려받은 값 출력
	PRINT variable_name;
	

	방법2)	BEGIN과 END; 블록 사용
	VARIABLE variable_name [datatype];	-- 바인드 변수를 선언
			-- datatype을 생략하면 기본적으로 VARCHAR2로 처리됨
	BEGIN
  		:variable_name := value;	-- 바인드 변수에 값을 할당하는 부분
		-- ariable_name은 선언한 변수의 이름, value는 변수에 할당할 값
	END;
	/	-- . PL/SQL 블록을 실행하기 위해 구분 기호를 입력




o 저장 프로시저 수정
구문)	ALTER PROCEDURE procedure_name
	COMPILE;


