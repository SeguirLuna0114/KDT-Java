* 포워딩(Forwarding) 클래스
: 웹 애플리케이션에서 뷰(View) 페이지로의 포워딩 또는 리다이렉션 작업을 처리하기 위해
  만들어진 클래스
 이 클래스를 통해 포워딩 방법과 포워딩할 파일명을 설정하고 관리할 수 있음
	- 컨트롤러(서블릿)에서 뷰 페이지로의 포워딩 또는 리다이렉션을 결정하기 위해 사용
	- 컨트롤러에서는 모델(비즈니스 로직)을 실행하고,
	 그 결과에 따라 ActionForward 객체를 생성하여 포워딩 방법과 포워딩할 파일명을 설정한 후,
	 이를 사용하여 클라이언트 요청에 응답



o 포워딩(Forwarding) 클래스
: 액션 클래스에서 반환된 JSP 페이지의 경로로 포워딩을 처리하는 클래스를 만듦
	- 이 클래스는 요청을 받고 액션 클래스를 실행한 후 JSP 페이지로 포워딩

public class ActionForward {

	// 포워딩 방법 설정
	private boolean redirect;
	// 포워딩 파일명 설정
	private String path;
	
	// Getter & setter
	public boolean isRedirect() {
		return redirect;
	}
	public void setRedirect(boolean redirect) {
		this.redirect = redirect;
	}
	public String getPath() {
		return path;
	}
	public void setPath(String path) {
		this.path = path;
	}
	
}



o ActionForward 객체를 사용하여 리다이렉션을 수행하는 경우
	- ActionForward 객체는 컨트롤러에서 클라이언트에게 리다이렉션을 지시하고,
	 지정된 페이지로 이동

ActionForward forward = new ActionForward();
forward.setRedirect(true); // 리다이렉션 설정
forward.setPath("/login.jsp"); // 리다이렉션할 페이지 경로 설정


o 컨트롤러 클래스에서 ActionForward 객체를 사용하여 포워딩 처리
	- 뷰(View)로의 포워딩 또는 리다이렉션을 담당

// 포워딩 처리
if(forward != null) {
	// 리다이렉션 여부를 확인
	if(forward.isRedirect()) {
		// redirect 방식으로 포워딩(클라이언트에게 새로운 URL로 이동하라는 명령)
		response.sendRedirect(forward.getPath());
	} else {
		// dispatcher 방식으로 포워딩(RequestDispatcher를 사용하여 포워딩을 수행)
		// forward.getPath()에서 얻은 경로로 클라이언트의 요청을 포워딩
		RequestDispatcher dispatcher = 
			request.getRequestDispatcher(forward.getPath());
		// 서버 내에서 페이지를 전환
		dispatcher.forward(request, response);
	}
}

