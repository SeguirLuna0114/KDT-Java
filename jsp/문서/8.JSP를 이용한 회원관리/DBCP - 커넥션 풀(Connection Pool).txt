* DBCP(Database Connection Pool)
 : 데이터베이스 연결을 미리 생성하고 풀에 보관하여,
   연결이 필요할 때마다 커넥션 풀에서 사용 가능한 연결을 얻고, 작업이 완료되면 다시 풀로 반환하는 방식
   	- 매번 데이터베이스 연결을 만들고 닫는데 드는 오버헤드를 줄일 수 있음

* 커넥션 풀(Connection Pool)
 : 데이터베이스 연결을 효율적으로 관리하기 위한 메커니즘
   	- 웹 애플리케이션 및 다른 소프트웨어 시스템에서
	  데이터베이스와의 연결을 관리하는 데 사용됨
	- 커넥션 풀은 데이터베이스 연결을 생성, 관리, 재사용하고
	  필요한 시점에 반환

o 장점/특징
1. 성능 향상:
  매번 데이터베이스 연결을 생성하는 것보다, 커넥션 풀에서 관리하는 연결을 재사용하면
  연결을 생성하는 오버헤드가 줄어들어 성능이 향상됨

2. 리소스 관리:
  커넥션 풀은 최대 연결 수, 최소 연결 수, 최대 유휴 연결 수 등과 같은 설정을 통해
  데이터베이스 연결에 대한 리소스 사용을 효과적으로 관리

3. 동시성 제어:
  커넥션 풀은 동시에 여러 요청이 동시에 데이터베이스에 접근하는 경우,
  적절한 동시성 제어를 제공하여 데이터베이스의 안정성을 보장


o 커넥션 풀을 설정하는 단계
1. 사용할 커넥션 풀 라이브러리 선택
	- Java에서는 다양한 커넥션 풀 라이브러리가 있으며,
	 각 라이브러리는 고유한 특징과 설정 옵션을 제공
	- 일반적으로 사용되는 라이브러리: Apache DBCP, HikariCP, c3p0

2. 커넥션 풀 설정 정보 수집
	- 데이터베이스 URL: 데이터베이스 서버의 주소 및 포트를 포함한 URL
	- 사용자 이름과 비밀번호: 데이터베이스에 연결할 때 사용되는 인증 정보
	- 드라이버 클래스 이름: 사용하는 데이터베이스에 맞는 JDBC 드라이버 클래스 이름
	- 최대 연결 수(Maximum Connections): 풀 내에서 관리할 최대 연결 수를 설정
	- 최소 연결 수(Minimum Connections): 초기에 생성할 최소 연결 수를 설정
	- 최대 유휴 연결 수(Maximum Idle Connections): 풀에 유지할 최대 유휴 연결 수를 설정
	- 커넥션 유효성 검사 관련 설정
	  : 커넥션을 유효성 검사하고 유효하지 않은 연결을 제거하는 데 사용되는 설정


3. 커넥션 풀 라이브러리 설정
 : 선택한 커넥션 풀 라이브러리의 설정 파일 또는 코드 내에서 위에서
   수집한 정보를 사용하여 커넥션 풀을 구성
    (구체적인 설정 방법은 커넥션 풀 라이브러리마다 다를 수 있음)

구문)	Apache DBCP 설정



4. 커넥션 풀 초기화
 : 웹 애플리케이션이 시작될 때 커넥션 풀을 초기화해야 함
	- 초기화는 웹 애플리케이션의 컨텍스트 초기화나 리스너 등을 통해 수행될 수 있음

5. 커넥션 풀 사용
 : 웹 애플리케이션에서는 데이터베이스 액세스를 필요로 할 때 
    커넥션 풀에서 데이터베이스 연결을 가져와서 사용

6. 커넥션 반환
 : 데이터베이스 연결 사용이 끝나면 반드시 커넥션을 풀에 반환해야 함
  (연결이 재사용될 수 있음)

7. 커넥션 풀 종료
 : 웹 애플리케이션이 종료될 때, 커넥션 풀을 명시적으로 종료하여 모든 연결을 정리





