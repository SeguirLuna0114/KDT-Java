* Model 1 아키텍처
 : 단순한 웹 애플리케이션 개발 방법
 - 주로 JSP(JavaServer Pages)와 서블릿(Servlet)을 사용
 - 개발자가 JSP 페이지 내에서 비즈니스 로직과 프레젠테이션 로직을 혼합하여 작성

o Model 1의 주요 특징
	- JSP와 서블릿을 함께 사용하여 웹 페이지를 개발
		- 복잡한 레이어 구조를 가지지 않음
	- 비즈니스 로직과 프레젠테이션 로직이 하나의 파일에 혼합되어 있음
		-  JSP는 HTML 코드와 Java 코드를 혼합할 수 있는 템플릿 역할을 하며,
		  서블릿은 요청을 처리하고 데이터를 처리하는 Java 클래스 역할을 함
	- 간단한 웹 애플리케이션 개발에 적합
	- 복잡한 애플리케이션에서는 유지보수가 어려울 수 있으며,
	  코드의 가독성과 확장성이 떨어질 수 있음


o Model 1 아키텍처의 구조
	- 웹 브라우저: 사용자가 웹 브라우저를 통해 웹 애플리케이션에 요청을 보냄

	- 컨트롤러 (서블릿): 요청은 서블릿을 통해 처리됨
			 서블릿은 요청을 받아 비즈니스 로직을 실행하거나 데이터를 처리

	- 뷰 (JSP): 서블릿은 결과를 생성하고, 그 결과는 JSP 페이지로 전달됨
   		   JSP 페이지는 HTML 코드와 Java 코드를 혼합하여 동적인 웹 페이지를 생성

	- 모델 (옵션): Model 1은 모델 레이어를 명시적으로 정의하지 않는 경우가 많지만, 
		     필요한 경우 서블릿에서 비즈니스 로직을 수행하고 
		     데이터를 직접 처리할 수 있음



-----------------------------------------------------------------------------------


* Model 2 아키텍처
 : 웹 애플리케이션을 보다 체계적으로 구축하기 위한 아키텍처
 - MVC (Model-View-Controller) 패턴을 따름
 - Model 2 방식에서는 비즈니스 로직과 프레젠테이션 로직을 분리하여 개발
   주로 서블릿과 JSP를 함께 사용하지만, 더 복잡한 프레임워크 및 디자인 패턴을 도입할 수 있음


o Model 2의 주요 특징
	- MVC 패턴을 따르므로 비즈니스 로직(Model), 프레젠테이션 로직(View),
	  요청 처리(Controller)를 분리하여 개발
	- 코드의 재사용성과 유지보수성을 향상시킴
	- 대형 웹 애플리케이션에 적합하며, 
	  복잡한 기능을 구현하기 위한 더 많은 유연성을 제공
	- 대표적인 Model 2 프레임워크로는 Java에서는 Spring Framework가 있으며, 
	 다른 언어와 플랫폼에서도 비슷한 아키텍처를 사용하는 프레임워크가 있음


o Model 2 아키텍처의 구조
	- 웹 브라우저: 사용자가 웹 브라우저를 통해 웹 애플리케이션에 요청을 보냄

	- 컨트롤러 (Controller): 요청은 컨트롤러에 의해 처리됨
			       컨트롤러는 요청을 받고 적절한 비즈니스 로직을 호출하거나
			        데이터를 처리합니다.

	- 모델 (Model): 비즈니스 로직이 수행되는 부분
			데이터 처리 및 비즈니스 규칙을 담당

	- 뷰 (View): 사용자에게 결과를 보여주는 부분
		   HTML, JSP, 또는 템플릿 엔진을 사용하여 프레젠테이션을 생성함

	- 모델-뷰-컨트롤러 (MVC) 통신: 컨트롤러는 모델에서 데이터를 검색하고, 
				     그 결과를 뷰에 전달하여 사용자에게 보여줌
				     뷰는 사용자 입력을 받아 컨트롤러에 전달







