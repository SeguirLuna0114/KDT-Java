* JDBC(Java Database Connectivity)를 사용하여 데이터베이스에 접속

1. JDBC 드라이버 가져오기
데이터베이스와 연동하기 위해 JDBC(Java Database Connectivity) 드라이버를 프로젝트에 추가
이 드라이버는 데이터베이스 공급업체(예: MySQL, PostgreSQL, Oracle 등)에서 제공됨
데이터베이스와 통신하기 위한 Java 클래스와 메서드를 포함함
드라이버 JAR 파일을 프로젝트 클래스패스에 추가해야 함
	- Class.forName() 메서드를 사용하여 드라이버 클래스를 로드
구문)	// My-SQL 드라이버 연결 설정
	String driver = "com.mysql.cj.jdbc.Driver";
	// JDBC 드라이버 로드
	Class.forName(driver);



2. 데이터베이스 연결 설정
JSP 페이지에서 데이터베이스에 연결하기 위한 설정을 수행해야 함
	- 일반적으로는 데이터베이스 URL, 사용자 이름, 암호 등의 정보가 필요

구문)	String url = "jdbc:database://hostname:port/database_name";
	String username = "your_username";
	String password = "your_password";
		- database: 사용하는 데이터베이스 종류(예: mysql, postgresql)
		- hostname: 데이터베이스 서버 호스트명
		- port: 데이터베이스 서버 포트
		- database_name: 연결할 데이터베이스 이름


3. 데이터베이스 연결 생성
DriverManager 클래스를 사용하여 데이터베이스와의 연결을 생성
	- getConnection 메서드를 호출하면 데이터베이스와의 연결이 생성됨
구문)	Connection connection = DriverManager.getConnection(url, username, password);



4. SQL 쿼리 실행
연결이 설정되면 SQL 쿼리를 실행하여 데이터베이스에서 데이터를 읽거나 쓸 수 있음
	- Connection 객체를 사용하여 Statement 또는 PreparedStatement를 생성하고,
	  해당 객체를 사용하여 SQL 쿼리를 실행
	- JSP에서는 Java 코드를 사용하여 JDBC를 통해 쿼리를 실행
구문)	Statement statement = connection.createStatement();
	ResultSet resultSet = statement.executeQuery("SELECT * FROM your_table");

       	// 결과 출력
        while (resultSet.next()) {
            out.println("ID: " + resultSet.getInt("id") + "<br>");
            out.println("Name: " + resultSet.getString("name") + "<br>");
        }


5. 데이터베이스 연결 닫기
데이터베이스 작업이 완료되면 연결을 명시적으로 닫아야 함
구문)	resultSet.close();
        statement.close();
        connection.close();



