* DBCP (Database Connection Pool)
 : 데이터베이스 연결을 관리하는 데 도움을 주는 방식 중 하나
 	- JSP와 같은 웹 애플리케이션에서 데이터베이스 연결을 효율적으로 관리하고
	  성능을 최적화하는 데 사용됨


1. DBCP 라이브러리 가져오기
먼저 DBCP 라이브러리를 웹 애플리케이션 프로젝트에 추가해야 함
	- 대표적으로 아파치 DBCP(commons-dbcp) 라이브러리를 사용할 수 있으며,
	   이 라이브러리는 일반적으로 Maven 또는 Gradle과 같은 빌드 도구를 통해 프로젝트에 추가됨


2. 컨텍스트 파일 또는 웹 애플리케이션 설정에서 DBCP 설정 구성
   (context.xml에 DBCP 데이터 소스 정의)
웹 애플리케이션의 설정 파일(예: context.xml) 또는 웹 애플리케이션의 설정에서 DBCP 연결 풀을 설정
	- DBCP 연결 풀 설정에는 데이터베이스 URL, 사용자 이름, 암호,
	  연결 풀의 최대 크기 및 기타 옵션을 지정해야 함
	- 웹 애플리케이션의 context.xml 파일에 DBCP 데이터 소스를 정의
	   : 웹 애플리케이션의 메타 정보를 저장하는 XML 파일

구문)	MySQL 데이터베이스를 사용하는 경우
	<Context>
	    <Resource name="jdbc/mydb" auth="Container" type="javax.sql.DataSource"
	        maxTotal="100" maxIdle="30" maxWaitMillis="10000"
	        username="yourUsername" password="yourPassword"
	        driverClassName="com.mysql.jdbc.Driver"
	        url="jdbc:mysql://localhost:3306/mydb" />
	</Context>

		- name: JNDI 이름을 설정. JSP에서 데이터 소스를 가져올 때 이 이름을 사용
		- type: javax.sql.DataSource로 설정
		- maxTotal, maxIdle, maxWaitMillis: 연결 풀의 크기 및 최대 대기 시간을 설정
		- username 및 password: 데이터베이스 사용자 이름과 암호를 설정
		- driverClassName: 사용 중인 데이터베이스의 JDBC 드라이버 클래스 이름을 설정
		- url: 데이터베이스의 URL을 설정


3. JSP 페이지에서 DBCP 데이터 소스 사용
JSP 페이지에서 DBCP 데이터 소스를 검색하고 이를 사용하여 데이터베이스 연결을 가져옴
	- javax.naming.Context 및 javax.sql.DataSource를 임포트
	- InitialContext를 사용하여 DBCP 데이터 소스를 검색
	- getConnection 메서드를 사용하여 데이터베이스 연결을 얻음
	- 데이터베이스 작업을 수행한 후 finally 블록에서 연결을 닫음

구문)	  <%@ page import="javax.naming.*, javax.sql.*" %>	
	    <%
  	      Connection connection = null;
	        try {
	            // 컨텍스트를 검색하여 DBCP 데이터 소스를 가져옴
	            Context initContext = new InitialContext();
	            Context envContext = (Context) initContext.lookup("java:comp/env");
	            DataSource dataSource = (DataSource) envContext.lookup("jdbc/mydb");

	            // 데이터베이스 연결을 가져옴
	            connection = dataSource.getConnection();

		       // 여기에서 데이터베이스 작업을 수행

	        } catch (Exception e) {
        	    e.printStackTrace();
	        } finally {
	            if (connection != null) {
	                try {
	                    connection.close();
	                } catch (SQLException e) {
	                    e.printStackTrace();
	                }
	            }
	        }
	    %>


