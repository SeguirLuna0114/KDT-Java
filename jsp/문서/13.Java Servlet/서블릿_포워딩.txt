* 서블릿에서 "포워딩"
 : 클라이언트 요청을 다른 서블릿, JSP 페이지 또는 자원으로 전송하는 방법 중 하나
	- 주로 다른 페이지로 제어를 넘기거나,
	  요청과 응답을 다른 자원으로 전달할 때 사용됨

o 방식
1. Dispatcher 방식으로 포워딩
: 서블릿 컨테이너 내에서 요청과 응답을
  다른 서블릿 또는 JSP 페이지로 전달하는 메커니즘
 "주로 데이터를 공유하며 중첩된 서블릿 또는 JSP 페이지에서 작업을 분리하는 데 사용됨"
	- 서블릿에서 생성된 동적인 콘텐츠를 다른 서블릿이나 JSP 페이지에서 처리하고,
	  그 결과를 클라이언트에게 반환할 수 있도록 함
	- RequestDispatcher 인터페이스를 사용하여 구현됨
	  서블릿 컨텍스트의 메소드인 getRequestDispatcher(String path)를 통해 얻음
		- path 매개변수: 포워딩할 대상 서블릿이나 JSP 페이지의 경로
	- 웹 애플리케이션에서 사용자 요청을 중앙 집중적으로 관리하고 응답을 생성하는 데 유용
	- 클라이언트에게는 보이지 않고, 서버 내에서 처리가 이루어지므로
	  주로 서버 내부에서 제어를 넘길 때 사용됨
	"서버 내에서 제어를 이동시키고, 클라이언트는 원래의 URL을 유지"

구문)	// 다른 서블릿 또는 JSP 페이지로 요청을 전달하기 위해 RequestDispatcher를 얻음
	RequestDispatcher dispatcher = request.getRequestDispatcher("targetPage.jsp");
	// 현재 서블릿에서 "targetPage.jsp"로 포워딩하고, 요청과 응답 객체를 그대로 전달
	dispatcher.forward(request, response);
	


2. Redirect 방식으로 포워딩
: 클라이언트에게 새로운 URL로 이동하라는 명령을 내리고,
  클라이언트가 새로운 URL로 요청을 보내도록 하는 방식
	- HttpServletResponse 객체의 sendRedirect(String location) 메서드를 사용하여
	   리다이렉트를 수행
		- location 매개변수: 클라이언트를 리다이렉트할 대상 리소스의 URL을 지정
	- 클라이언트에게 새로운 URL을 제공하므로,
	  주로 외부 다른 리소스(서블릿, JSP 페이지, HTML 파일 등)로 리다이렉트하거나
	  다른 웹 애플리케이션으로 이동할 때 사용됨
	"클라이언트에게 새 URL로 이동하라는 명령을 내리고, 클라이언트는 새 URL을 요청"

구문)	response.sendRedirect("targetPage.jsp");
	// 클라이언트에게 "targetPage.jsp"로 리다이렉트하라는 명령을 보내며,
	   클라이언트는 새로운 요청을 생성하여 해당 페이지로 이동




o 데이터를 공유하고 리소스로 포워딩할 때는 일반적으로 dispatcher 방식을 사용
: Servlet에서 포워딩 방식을 설정하고 request 객체를 사용하여 데이터를 공유할 때,
 dispatcher 방식을 사용하는 것이 주로 권장됨
- 서버 내부에서 처리: Dispatcher 방식은 서버 내에서 요청을 새로운 리소스로 전달하므로,
		   모든 처리는 동일한 서블릿 컨테이너 내에서 수행됨
 		*리다이렉션은 클라이언트에게 새로운 요청을 보내고,
		 클라이언트가 새로운 요청을 서버로 다시 보내는 방식
		 => 클라이언트에게 새로운 URL로 이동하도록 요청

- 공유 데이터 유지: Dispatcher 방식을 사용하면 request 객체를 공유할 수 있으므로,
		 이전 서블릿에서 설정한 데이터를 새로운 서블릿 또는 JSP로 전달할 수 있음
		- request.setAttribute()를 통해 데이터를 저장
		- 새로운 리소스에서 request.getAttribute()를 사용하여 데이터에 액세스

- URL 변경 없음: Dispatcher 방식은 클라이언트의 URL이 변경되지 않음
		브라우저의 주소 표시줄에 올바른 URL을 표시하여
		사용자에게 투명한 방식으로 서버에서 리소스를 제공





