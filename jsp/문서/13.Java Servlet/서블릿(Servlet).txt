* 서블릿(Servlet)
 : Java 언어로 작성된 웹 애플리케이션의 서버 측 구성 요소 중 하나
	- 동적 웹 페이지를 생성하고,
	  웹 애플리케이션의 서버 측 로직을 처리하는 데 사용됨
	- Java로 웹 애플리케이션을 개발할 때 매우 유용한 기술
	- 서블릿을 사용하면 동적 웹 애플리케이션을 구축하고,
 	  웹 요청 및 응답을 처리하는 데 많은 유연성과 제어를 제공


o 서블릿 클래스
 : Java로 작성된 웹 애플리케이션의 서버 측 로직을 정의하는 클래스
	- 웹 요청과 응답을 처리하는 메서드를 구현하도록 확장되어 있음
	- 주요 메서드: doGet, doPost, doPut, doDelete 
		      각각 HTTP 요청 메서드에 대한 처리를 담당
1. 대부분 HttpServlet 클래스를 확장하며, javax.servlet.http 패키지에서 제공됨
	- HttpServlet 클래스는 HTTP 프로토콜을 기반으로 작업하는 데
	  필요한 메서드를 제공

2. 클라이언트의 HTTP 요청을 처리하기 위해 HttpServletRequest 객체를 받아들이고,
   HTTP 응답을 생성하기 위해 HttpServletResponse 객체를 사용
	- 이 객체들을 이용하여 요청을 분석하고 응답을 생성할 수 있음
	- 서블릿은 HTTP 요청을 받아들이고, 요청을 분석하여 
	  클라이언트의 요청에 따라 적절한 서버 로직을 실행한 후
   	  HTTP 응답을 생성하여 클라이언트에게 반환
	- 동적 웹 페이지를 생성하고 데이터베이스 연동, 세션 관리 등의 작업을 수행할 수 있음

3. 생명주기 메서드 (Lifecycle Methods)
 : 서블릿은 초기화 및 종료를 위한 메서드와
    HTTP 요청을 처리하는 메서드로 이루어진 생명주기를 가짐
	- 주요 생명주기 메서드: init, service, doGet, doPost, destroy
	1. init(): 서블릿 초기화 시 호출되며,
		   일반적으로 서블릿 초기화 매개변수를 설정하거나 
		   필요한 자원을 로드하는 데 사용됨

	2. service(): 모든 HTTP 요청은 이 메서드를 통해 처리됨
		-  요청 유형에 따라 doGet(), doPost(), doPut(), doDelete() 등과 같은
		  구체적인 메서드로 전달됨

	3. doGet(), doPost(), 등: HTTP 요청 유형 (GET, POST, 등)에 따라
				 실제 요청 처리 로직을 구현하는 메서드

	4. destroy(): 서블릿이 제거되기 전에 호출되며,
		      리소스 정리 및 정리 작업을 수행하는 데 사용됨


4. @WebServlet 어노테이션 또는 web.xml 설정 파일을 사용하여
   서블릿 클래스를 URL 패턴에 매핑
	- 이를 통해 클라이언트의 HTTP 요청이 특정 서블릿으로 라우팅됨


5. 웹 컨테이너 (Web Container)
 : 서블릿은 웹 컨테이너 또는 서블릿 컨테이너 내에서 실행됨
	- 서블릿의 생명주기를 관리하고,
	  HTTP 요청을 받아들이고 서블릿을 호출하여 응답을 생성함
	- 가장 일반적인 웹 컨테이너: Apache Tomcat, Jetty, 웹로직(WebLogic)


6. 동적 웹 페이지 생성
  : 서블릿은 HTML, XML, JSON 등 다양한 형식의 응답을 생성하고
     동적 웹 페이지를 생성하는 데 사용됨
	- 데이터베이스와 연동하거나 다른 서버측 로직을 수행하는 데도 적합


o 웹 애플리케이션 배포 (Web Application Deployment)
 : 서블릿은 웹 애플리케이션 내에서 사용됨
	- 웹 애플리케이션은 서블릿 클래스 및 관련 설정 파일 (web.xml)과 함께
	   WAR(웹 애플리케이션 아카이브) 파일로 패키징되어 웹 컨테이너에 배포됨






