* EL(Expression Language)은 다양한 산술 연산자를 제공하여
 수학적 계산을 수행하는 데 사용됨


o EL의 산술연산자
	- 변수나 속성 사이의 수학 연산을 수행 가능
1. 덧셈 (+): + 연산자는 두 피연산자를 더함
	ex) ${a + b}

2. 뺄셈 (-): - 연산자는 두 피연산자를 뺌
	ex) ${x - y}

3. 곱셈 (*): * 연산자는 두 피연산자를 곱함
	ex) ${m * n}

4. 나눗셈 (/): / 연산자는 두 피연산자를 나눔
	ex) ${p / q}

5. 나머지 (%): % 연산자는 첫 번째 피연산자를 두 번째 피연산자로 나눈 나머지를 반환
	ex) ${r % s}



o EL의 논리연산자
	- 논리적 비교와 변수 또는 속성 간의 조건을 평가하고,
	  조건에 따라 코드의 실행 흐름을 제어할 수 있음
1. 논리 AND (&&): && 연산자는 양쪽 피연산자가 모두 true인 경우에만 true를 반환
	ex) ${a && b}

2. 논리 OR (||): || 연산자는 양쪽 피연산자 중 하나라도 true인 경우에 true를 반환
	ex) ${x || y}

3. 논리 NOT (!): ! 연산자는 단일 피연산자의 논리 부정을 수행하며,
		true는 false로, false는 true로 변경됨
	ex) ${!condition}


o EL의 비교연산자
	- 변수 또는 속성 간의 비교를 수행하고 조건을 만족하는지 확인하는 데 사용됨
	- 주로 조건문 및 반복문에서 사용되어 변수 또는 속성의 값을 비교하고,
	  이에 따라 코드의 실행 흐름을 제어함
1. 동등 비교 (Equal) (==): == 연산자는 두 피연산자가 값적으로 동일한지를 비교
			두 값이 동일하면 true를 반환하고, 그렇지 않으면 false를 반환
	ex) ${a == b}

2. 부정 동등 비교 (Not Equal) (!=): != 연산자는 두 피연산자가 값적으로 다른지를 비교
				두 값이 다르면 true를 반환하고, 같으면 false를 반환
	ex) ${x != y}

3. 크기 비교 (Greater Than) (>): > 연산자는 왼쪽 피연산자가
				  오른쪽 피연산자보다 큰 경우 true를 반환
	ex) ${m > n}

4. 작음 비교 (Less Than) (<): < 연산자는 왼쪽 피연산자가
				오른쪽 피연산자보다 작은 경우 true를 반환
	ex) ${p < q}

5. 크거나 같음 (Greater Than or Equal To) (>=)
 : >= 연산자는 왼쪽 피연산자가 오른쪽 피연산자보다 크거나 같은 경우 true를 반환
	ex) ${r >= s}

6. 작거나 같음 (Less Than or Equal To) (<=)
 : <= 연산자는 왼쪽 피연산자가 오른쪽 피연산자보다 작거나 같은 경우 true를 반환
	ex) ${u <= v}



o EL의 empty 연산자
 : 표현식이 비어 있거나 null이면 true를 반환하고, 그렇지 않으면 false를 반환
	- 주어진 표현식이 비어 있거나 null인지를 확인하는 데 사용됨
	  => 데이터의 유효성을 확인하고 조건부로 동작을 수행할 수 있음
	- 주로 컬렉션, 맵, 문자열, 배열 등과 같은 데이터 구조가 비어 있는지 확인하거나
	  객체가 null인지 여부를 검사할 때 유용
	1) 특정 컬렉션이나 배열이 비어 있는지 확인
		${empty myList}
	2) 맵이 비어 있는지 확인
		${empty myMap}
	3) 문자열의 길이가 0인지 확인
		${empty myString}
	4) 객체가 null인지 확인
		${empty myObject}

구문)	empty expression
	- expression: 비어 있는지 확인하려는 표현식을 나타냄








