* cookie 객체
 : 클라이언트와 서버 간의 상태를 유지하는 데 사용
	- cookie 내장 객체를 사용하면 클라이언트 측에서 데이터를 저장하고
	  다음 요청에서 해당 데이터를 검색할 수 있음

o 쿠키 생성
 : 1) javax.servlet.http.Cookie 클래스를 사용하여 쿠키를 만듦
    2) response 객체의 addCookie() 메소드를 사용하여 응답에 추가

	- 쿠키를 응답 헤더에 추가하면, 그 이후에 클라이언트로 전송됨
	- 클라이언트는 이 쿠키를 저장하고, 이후의 요청에서 서버로 다시 전송할 수 있음
구문)	<% 
		// 쿠키 객체 생성
    		Cookie myCookie = new Cookie(cookieName, cookieValue);
		// 쿠키를 응답에 추가
    		response.addCookie(myCookie);
	%>
			- cookieName : 생성하려는 쿠키의 이름
			- cookieValue : 쿠키에 저장될 값(쿠키 값에 할당될 값)


o 쿠키 읽기
 : 클라이언트로부터 쿠키를 가져와 읽으려면 request 객체의 getCookies메소드를 사용
	- request.getCookies() 
	  : JSP 페이지에서 클라이언트로부터 전송된 모든 쿠키를 가져오는 메소드

	- 현재 요청에서 클라이언트로부터 받은 모든 쿠키를 Cookie 객체의 배열로 반환
		- 각 Cookie 객체는 쿠키의 이름, 값 및 다른 속성을 포함하고 있음
	- 이 배열을 반복문을 사용하여 원하는 쿠키를 찾고 해당 쿠키의 값을 읽을 수 있음
구문)	Cookie[] cookies = request.getCookies();

ex)	<%
    		Cookie[] cookies = request.getCookies();
    		if (cookies != null) {
        		for (Cookie cookie : cookies) {
				// "username"이라는 이름의 쿠키를 찾고 그 값을 읽어서 출력
            			if (cookie.getName().equals("username")) {
                			String username = cookie.getValue();
                			out.println("Username from Cookie: " + username);
            			}
        		}
    		}
	%>



o 쿠키 속성 설정
 : 쿠키에는 유효 기간, 경로, 도메인 등의 속성을 설정하여 쿠키의 동작을 조정할 수 있음
	1) 유효 시간 설정 (setMaxAge)
	 - setMaxAge(int seconds)
		: 쿠키의 유효 기간을 설정
		   이 메소드를 사용하여 쿠키가 클라이언트 측에서 얼마 동안 유지될지 지정 가능
			- 초 단위로 설정
			- 음수 값은 브라우저가 닫힐 때까지 쿠키를 유지하고 
			  0은 쿠키를 삭제하는 것을 의미
	ex)	쿠키를 1시간 동안 유지
		myCookie.setMaxAge(3600); // 1 hour

	2) 경로 설정 (setPath)
 	 - setPath(String path)
		: 쿠키의 경로를 설정
		  이 메소드를 사용하여 쿠키가 어떤 경로에서 사용 가능한지를 결정
		  경로를 설정하면 해당 경로와 하위 경로에서만 쿠키에 접근할 수 있음
	ex)	쿠키를 "/myapp" 경로에서만 사용 가능하게 설정
		myCookie.setPath("/myapp");

	3) 도메인 설정 (setDomain)
 	 - setDomain(String domain)
		: 쿠키의 도메인을 설정
		  이 메소드를 사용하여 쿠키를 어떤 도메인에서 사용 가능한지를 결정
		  기본적으로 현재 도메인에만 쿠키가 사용 가능하도록 설정되어 있음
	ex)	쿠키를 ".example.com" 도메인으로 설정
		myCookie.setDomain(".example.com");


	4) 보안 속성 설정 (setSecure)
	 - setSecure(boolean secure)
		: 쿠키를 안전한 연결(HTTPS)에서만 전송할지 여부를 설정
		   true로 설정하면 쿠키는 HTTPS 연결에서만 전송됨
	ex)	쿠키를 안전한 연결에서만 사용하려면 다음과 같이 설정
		myCookie.setSecure(true);


o Cookie 관련 메소드
1. response.addCookie(Cookie cookie)
 : 쿠키를 클라이언트에게 전송하고 클라이언트의 쿠키 저장소에 저장하기 위해 사용
	- cookie: 응답에 추가할 Cookie 객체
	- 쿠키를 응답에 추가하면 클라이언트로 해당 쿠키가 전송되어,
	  클라이언트는 이 쿠키를 저장하고 이후의 요청에서 서버로 다시 전송할 수 있음


2. request.getCookies()
 : 현재 클라이언트로부터 수신한 모든 쿠키를 가져오는 데 사용
	-  클라이언트가 현재 요청에서 서버로 전송한 모든 쿠키가
	    Cookie 객체의 배열로 반환됨
	- 각 Cookie 객체는 클라이언트로부터 수신한 쿠키의 이름, 값 및 다른 속성을 포함하고 있음



o Cookie 클래스 메소드
1. Cookie(String name, String value)
  : 생성자 메소드로, 쿠키 객체를 생성할 때 쿠키의 이름과 값을 설정

구문)	Cookie cookie = new Cookie("name", "value");
			- name: 쿠키의 이름. 쿠키를 식별하는 데 사용되는 고유한 식별자
			- value: 쿠키의 값을 나타냄. 쿠키에 연결된 데이터


2. setMaxAge(int expiry)
  : 쿠키의 유효 시간/수명(초 단위)을 설정
	- 쿠키를 클라이언트 측에서 얼마 동안 유지할지를 초 단위로 지정
	- expiry: 쿠키의 유효 시간을 초 단위로 설정
		  음수 값은 브라우저가 닫힐 때까지 쿠키를 유지하도록 하며,
		  0은 쿠키를 즉시 삭제하는 것을 의미
		  양수 값은 해당 초 동안 쿠키를 유지함

ex)	cookie.setMaxAge(3600); // 1시간 동안 유지 (초 단위)


3. setPath(String path)
  : 쿠키의 경로를 설정
	- path: 쿠키의 경로를 나타냄. 쿠키가 어떤 경로에서 사용 가능한지를 결정
	- 쿠키가 어떤 경로에서 사용 가능한지를 결정
	  => 쿠키의 경로를 지정하면 해당 경로 및 하위 경로에서만 쿠키에 접근할 수 있음

ex)	cookie.setPath("/myapp"); // 특정 경로로 제한


4. getName()
 : 쿠키의 이름을 문자열로 반환
	- 쿠키의 이름은 쿠키를 식별하는 데 사용
구문)	String name = cookie.getName();

	
5. getValue()
 : 쿠키의 값을 문자열로 반환
	- 쿠키의 값 = 쿠키에 저장된 데이터
구문)	String value = cookie.getValue();




o 쿠키 값 변경
단계1. 쿠키 가져오기 또는 생성하기
	- 현재 요청에 대한 쿠키를 가져오거나 새로운 쿠키를 생성
	- 기존의 쿠키 값을 변경하려면 해당 쿠키를 가져와야 함
구문)	Cookie[] cookies = request.getCookies();


단계2. 원하는 새로운 값을 설정
방법1) 기존의 Cookie객체를 가져와서 값을 직접 변경
	- 쿠키의 값을 변경하려면 Cookie 객체의 setValue 메소드를 사용하여 원하는 값을 설정
구문)	if (cookies != null) {
    		for (Cookie cookie : cookies) {
        		if ("username".equals(cookie.getName())) {
            			// 원하는 새로운 값을 설정
				cookie.setValue("새로운_값");


방법2) Cookie객체를 새로 생성하여 변경
	- 새로운 쿠키를 생성하여 기존 쿠키를 대체하는 경우 사용
구문)	if (cookies != null) {
    		for (Cookie cookie : cookies) {
        		if ("username".equals(cookie.getName())) {
				Cookie newCookie = new Cookie("username", "new_username");


단계3. 변경된 쿠키를 응답에 추가
	- 변경된 쿠키를 클라이언트에게 반영하려면 해당 쿠키를 응답에 추가하면
	   클라이언트로 변경된 쿠키가 전송됨
구문)	response.addCookie(newCookie);


ex)	<%
	    // 쿠키 가져오기
	    Cookie[] cookies = request.getCookies();
	    Cookie updatedCookie = null;

	    if (cookies != null) {
	        for (Cookie cookie : cookies) {
	            if (cookie.getName().equals("username")) {
	                // 원하는 새로운 값을 설정
	                String newUsername = "new_john_doe";
	                cookie.setValue(URLEncoder.encode("자바와 JSP"));
	                updatedCookie = cookie;
	                break; // 쿠키를 찾았으므로 반복문 종료
	            }
	        }
	    }

	    if (updatedCookie != null) {
	        // 변경된 쿠키를 응답에 추가
	        response.addCookie(updatedCookie);
	    }
	%>




o 쿠키를 삭제하는 방법
단계1. 기존 쿠키 가져오기
	- 기존에 설정된 쿠키를 가져오기 위해 request.getCookies()를 사용
	- 져온 쿠키 배열을 반복하여 원하는 쿠키를 찾음
구문)	Cookie[] cookies = request.getCookies();


단계2. 쿠키 삭제
	- 해당 쿠키의 값을 변경해서 쿠키 삭제
	- 쿠키를 삭제하려면 쿠키의 값을 무효한 값(예: 빈 문자열)으로 설정하고,
	  쿠키의 유효 시간을 0으로 설정
구문)	if (cookies != null) {
	    for (Cookie cookie : cookies) {
	        if ("username".equals(cookie.getName())) {
	            // 쿠키 값을 무효화(빈 문자열로 설정)
	            cookie.setValue("");
		    // Cookie객체를 새로 생성하여 변경 가능
		    // Cookie cookie = new Cookie("name", "");
	            
	            // 쿠키의 유효 시간을 0으로 설정 => 발행되자마자 쿠키 정보 삭제됨
	            cookie.setMaxAge(0);



단계 3: 변경된 쿠키를 응답에 추가
	- 삭제된 쿠키를 클라이언트에게 반영하려면 변경된 쿠키를 응답에 추가
	  => 클라이언트에서 해당 쿠키를 삭제하게 됨
구문)		    // 변경된 쿠키를 응답에 추가
            	    response.addCookie(cookie);
	            break; // 쿠키를 찾았으므로 반복문 종료
	        }
	    }
	}





