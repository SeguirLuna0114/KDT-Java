o JSP(Model 1 아키텍처)
: JavaServer Pages의 전통적인 아키텍처
  웹 애플리케이션을 개발하는 데 사용되는 방법 중 하나
	- 비즈니스 로직과 프레젠테이션 로직을
	  모두 JSP 페이지에 포함하는 간단한 방식의 웹 애플리케이션 개발 방법
	- 1) JavaBean을 사용하여 데이터를 저장하고 가져오고
	  2) DTO를 사용하여 데이터를 전송하며
	  3) DAO를 사용하여 데이터베이스 액세스를 처리

	- 간단한 웹 애플리케이션을 개발하거나 학습 목적으로 사용


o Model 1 아키텍처에서 주요한 개념
0. JSP 페이지 (View)
 : 웹 애플리케이션의 사용자 인터페이스를 표시하는 데 사용됨
	- HTML 코드와 함께 Java 코드를 포함할 수 있으며,
	  사용자에게 동적으로 생성된 콘텐츠를 제공함
		- <% %> 태그 내에 Java 코드를 삽입하여 동적인 콘텐츠를 생성
	- JSP 페이지는 주로 프레젠테이션 로직을 처리하며 사용자에게 정보를 표시


1. JavaBean
 : 데이터를 저장하고 접근하기 위한 Java 클래스
	- 일반적으로 프로퍼티(속성)를 가짐
	  : 각 프로퍼티는 private으로 선언되고,
	   해당 프로퍼티에 접근할 수 있는 public getter 및 setter 메서드를 제공
	- JavaBean은 비즈니스 로직을 포함하지 않으며,
	  주로 데이터 저장과 접근을 위해 사용됨
	- JSP 페이지에서 JavaBean 객체를 생성하고 데이터를 설정하거나
	 가져와서 프레젠테이션 로직을 수행


2. DTO (Data Transfer Object)
 : 데이터를 전송하거나 저장하기 위한 객체로서 주로 데이터의 컨테이너 역할
	- DTO 클래스 객체는 필드(멤버 변수)를 가지며,
	  이 필드들의 값을 저장하고 가져오는 메서드(getter 및 setter)를 가지고 있음
	- DTO는 주로 데이터를 JSP 페이지와 비즈니스 로직 사이에서 전달하거나
	 데이터를 데이터베이스와 상호작용할 때 사용됨
	- 데이터 전송을 간소화하고 데이터 구조를 일관성 있게 유지하는 데 도움

ex) 사용자 정보를 담고 있는 DTO 클래스
public class UserDTO {
    private String username;
    private String email;

    // Getter and Setter methods for username
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    // Getter and Setter methods for email
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}



3. DAO (Data Access Object)
 : 데이터베이스와의 상호작용을 처리하는 객체로 사용
	- 데이터베이스 연결, 쿼리 실행, 데이터 검색 및 업데이트와 같은
	  데이터 액세스 작업을 수행
	- 주로 데이터베이스 관련 로직을 캡슐화하여
	 데이터베이스 연결 및 쿼리 작성을 JSP 페이지 밖에서 처리
	 => 코드 재사용성과 유지보수성이 향상됨

	- 스레드 안전성을 위해 싱글톤 패턴으로 작성
	* 싱글톤 패턴은 클래스의 인스턴스가 하나만 생성되도록 보장하며,
	  전역적으로 접근할 수 있는 단일 객체를 제공

ex) 사용자 DAO 클래스의 구조
public class UserDAO {

    // 싱글톤 객체를 저장할 private static 변수
    private static UserDAO instance = new UserDAO();

    // 싱글톤 객체 반환 - 여러 스레드가 동시에 메소드에 접근해도 1개의 객체만 반환
    private static UserDAO getInstance() {
        return instance;
    }
  
    // 다른 DAO 메소드들을 작성
    // 사용자 정보를 데이터베이스에서 가져오는 메서드
    public UserDTO getUserByUsername(String username) {
        UserDTO user = null;
        String sql = "SELECT * FROM users WHERE username = ?";
        
        try {
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, username);
            ResultSet resultSet = preparedStatement.executeQuery();
            
            if (resultSet.next()) {
                user = new UserDTO();
                user.setUsername(resultSet.getString("username"));
                user.setEmail(resultSet.getString("email"));
            }
            
            resultSet.close();
            preparedStatement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return user;
    }


    // 데이터베이스에서 모든 데이터를 검색하고 
    // 그 결과를 List 컬렉션에 저장한 다음 반환하는 메서드 - DTO클래스 데이터타입으로 활용
    public List<YourDTOClass> getAllData() {
        List<YourDTOClass> dataList = new ArrayList<>();
        String sql = "SELECT * FROM your_table_name"; // 적절한 테이블 이름을 사용해야 합니다.

        try {
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                YourDTOClass data = new YourDTOClass();

                // 결과셋에서 필드 값을 DTO 객체에 설정
                data.setField1(resultSet.getString("field1"));
                data.setField2(resultSet.getInt("field2"));
                // 필드에 따라서 적절한 타입과 메서드를 사용해야 합니다.

                dataList.add(data); // DTO 객체를 리스트에 추가
            }

            resultSet.close();
            preparedStatement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return dataList;
    }

       // 다른 데이터베이스 액세스 메서드를 추가할 수 있음
}


4. Servlet (Controller)
 : 서블릿은 클라이언트 요청을 받아들이고,
  필요한 JavaBean을 생성하거나 수정하며 데이터를 가져온 뒤(비즈니스 로직수행),
  결과를 DTO클래스 또는 JavaBean객체에 저장한 후, JSP페이지에 데이터를 전달하는 역할




