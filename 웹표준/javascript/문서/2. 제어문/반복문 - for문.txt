* for문
 : 반복 작업을 수행하는 데 사용되는 제어 구조
	- 초기화, 조건 검사 및 반복 후 실행할 코드 블록을 포함

구문)	for (초기화; 조건; 반복 표현식) {
    		// 반복해서 실행할 코드
	}

		- 초기화: 반복을 시작하기 전에 초기화하는 부분
			   보통 카운터 변수를 설정
		- 조건: 반복을 계속할지 여부를 판단하는 부분
			조건이 참일 경우 반복이 계속됨
		- 반복 표현식: 각 반복 후에 실행되는 부분
			     일반적으로 카운터 변수를 증가시키는 등의 작업을 수행
		- 반복 코드 블록: 조건이 참일 때 실행되는 코드 블록으로, 여러 번 반복 실행


	1) 초기화 부분에서 카운터 변수를 설정하거나 다른 변수를 초기화 가능
		for (var i = 0; i < 5; i++) {
    			// 초기화 부분: 변수 i를 0으로 초기화
    			// 반복할 코드
		}


	2) 조건은 각 반복마다 평가되며, 조건이 거짓이 되면 반복이 종료
		for (var i = 0; i < 5; i++) {
    			// 조건: i가 5보다 작은 동안 반복
    			// 반복할 코드
		}

	3) for문의 반복 표현식은 각 반복 후에 실행됨
		for (var i = 0; i < 5; i++) {
    			// 반복 표현식: i를 1씩 증가
    			// 반복할 코드
		}


	4) break와 continue 사용: 
		- for문 내부에서 break를 사용하여 반복을 종료
		- continue를 사용하여 반복을 건너뛸 수 있음
		for (var i = 0; i < 5; i++) {
    			if (i === 3) {
        			break; // i가 3일 때 반복 종료
    			}
    			console.log(i);
		}



o for...of 루프
 : 반복 가능한(iterable) 객체를 순회할 때 사용
	- 주로 배열과 같은  반복/순회 가능한(iterable) 객체를 순환하는 데 활용됨
	  (배열, 문자열, Map, Set과 같은 순회 가능한 객체를 간편하게 순회할 때 특히 유용)
	- 반복 중에 객체의 요소 값을 가져와서 처리할 수 있음

구문)	for (const 변수 of iterable) {
    		// 반복할 코드
	}

		- 변수: 현재 요소의 값을 저장할 변수를 지정
		- iterable: 순회 가능한(iterable) 객체, 
			    즉 배열, 문자열, Map, Set 등을 나타내는 변수나 표현식

ex)	const numbers = [1, 2, 3, 4, 5];

	for (const num of numbers) {
    		console.log(num); // 배열 요소를 순회
	}



o for...in 루프
 : 객체의 속성을 열거할 때 사용됨
	- 객체의 속성(프로퍼티)을 반복하며 키(key)를 가져올 수 있음
	- 객체의 속성을 열거하는 데 사용됨
ex)	const person = {
    		name: 'John',
    		age: 30,
   		occupation: 'Engineer'
	};

	for (const key in person) {
    		onsole.log(key, person[key]); // 객체의 속성을 순회
	}













