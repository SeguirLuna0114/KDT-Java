* 배열을 조작하고 다루는 배열 관련 메서드

1. join()
 : 배열의 모든 요소를 문자열로 결합하여 반환
	- 배열의 모든 요소를 지정된 구분 문자열(separator)을 사용하여 결합
	  => 하나의 문자열로 반환
	- 원본 배열은 변경되지 않음
	- 배열의 요소를 특정 형식의 문자열로 조립할 때 유용하게 사용
	  (CSV 형식의 문자열을 생성하거나 URL 쿼리 문자열을 생성하는 데에 활용)

구문)	array.join(separator);
		- separator (선택 사항): 요소 사이에 삽입할 구분 문자열
				이 구분 문자열을 지정하지 않으면 기본적으로 쉼표 ,가 사용됨

ex)	var fruits = ["apple", "banana", "cherry"];
	var result = fruits.join(", "); // "apple, banana, cherry"


2. reverse() 메서드
 : 배열의 요소 순서를 뒤집어주는 메서드
	- 배열의 첫 번째 요소가 마지막 요소로, 마지막 요소가 첫 번째 요소로 이동
	- 원본 배열을 변경하며 새로운 배열을 반환하지 않음

구문)	array.reverse();

ex)	var fruits = ["apple", "banana", "cherry"];
	fruits.reverse();
	console.log(fruits); // ["cherry", "banana", "apple"]


3. sort() 메서드
 : 배열을 정렬하는 데 사용되는 내장 메서드
	- 배열의 요소를 기본적으로는 문자열로 정렬하며, 
	  정렬 순서를 지정할 수도 있음
	- 요소를 문자열로 변환하고,
	  유니코드 코드 포인트 값을 기반으로 오름차순(ascending)으로 정렬
	- 원본 배열을 변경하며, 변경된 배열을 반환

구문)	array.sort();

ex)	var fruits = ["banana", "apple", "cherry"];
	fruits.sort();
	console.log(fruits); // ["apple", "banana", "cherry"]


o sort() 메서드를 사용하여 숫자 배열을 정렬
	- 정렬 순서를 지정하는 함수를 제공할 수 있음
구문)	array.sort(compareFunction);
		- compareFunction (선택 사항): 정렬 순서를 지정하는 함수
				이 함수는 두 개의 인수를 받아서 비교하고 결과에 따라 정렬
				비교 함수를 제공하지 않으면, 배열은 문자열로 변환되어 정렬됨
	1) 오름차순 정렬
	- a가 b보다 작으면 음수를 반환하여 오름차순 정렬을 수행
	array.sort(function(a, b) {
    		return a - b; // 오름차순 정렬
	});

	2) 내림차순 정렬
	- b가 a보다 작으면 음수를 반환하여 내림차순 정렬을 수행
	array.sort(function(a, b) {
    		return b - a; // 내림차순 정렬
	});


ex) a가 b보다 작으면 음수를 반환하여 오름차순 정렬을 수행
	var numbers = [3, 1, 5, 2, 4];
	numbers.sort(function(a, b) {
    		return a - b; // 오름차순 정렬
	});
	console.log(numbers); // [1, 2, 3, 4, 5]



4. slice()
 :  배열의 일부를 추출하여 새로운 배열을 반환하는 메서드
	- 원본 배열을 변경하지 않고 배열 요소의 일부를 선택해 새로운 배열을 반환
	- 시작 인덱스는 포함되고, 종료 인덱스는 포함되지 않음
	- 음수 인덱스 지원 : start나 end에 음수 값을 사용하면 
			   배열의 끝에서부터 역방향으로 추출할 수 있음

구문)	array.slice([start], [end])
		- array: 배열에서 slice() 메서드를 호출할 배열
		- start (선택 사항): 추출을 시작할 인덱스를 나타내는 정수 값
				    이 인덱스의 요소가 포함됨
				    생략하면 0으로 간주하고, 배열의 첫 번째 요소부터 추출
		- end (선택 사항): 추출을 종료할 인덱스를 나타내는 정수 값
				  이 인덱스의 요소는 포함되지 않음	
				  생략하면 배열의 끝까지 추출

ex)	const array = [1, 2, 3, 4, 5];

	// 전체 배열 추출
	const fullArray = array.slice();
	console.log(fullArray); // [1, 2, 3, 4, 5]

	// 인덱스 1부터 3까지 추출
	const fromIndex1To3 = array.slice(1, 4);
	console.log(fromIndex1To3); // [2, 3, 4]

	// 음수 인덱스를 사용한 역방향 추출
	const reverseSubArray = array.slice(-3, -1); // [3, 4]



5. concat()
 : 두 개 이상의 배열을 결합하여 새로운 배열을 생성하는 데 사용
	- 원본 배열을 변경하지 않고 새로운 배열을 반환
	  => 원본 배열을 변경하지 않고 새로운 배열을 반환할 때 유용
	- concat() 메서드는 배열뿐만 아니라 다른 데이터 유형(숫자, 문자열, 객체 등)도
	  인수로 받을 수 있음

구문)	const newArray = array1.concat(array2, array3, ...);
		- newArray: concat() 메서드를 호출한 배열(array1)과 
			   다른 배열들(array2, array3, ...)을 결합해 생성한 새로운 배열
		- array1: 결합할 첫 번째 배열
		- array2, array3, ...: 결합할 다른 배열들. 여러 배열을 연속해서 전달O
	
o concat() 메서드를 사용한 중첩 배열 풀기
 : concat() 메서드를 사용하여 배열 내에 중첩된 배열을 풀어서 
  하나의 배열로 결합할 수 있음
	- 중첩 배열을 풀 때는 배열 전개 연산자 (...)를 사용
	  => 각 중첩된 배열의 요소를 개별적으로 추출

ex)	// 중첩 배열 풀기
	const nestedArray = [[1, 2], [3, 4], [5, 6]];
	const flatArray = [].concat(...nestedArray);

	console.log(flatArray); // [1, 2, 3, 4, 5, 6]



6. pop()
: 배열에서 마지막 요소를 제거하고 그 요소를 반환하는 메서드
	- 메서드를 사용하면 배열의 길이가 1 감소하고 마지막 요소를 얻을 수 있음
	- 배열에서 마지막 요소를 제거
	- 제거된 마지막 요소를 반환
	   => 따라서 이 값을 변수에 할당하거나 사용할 수 있음
	- 원본 배열을 변경하며, 배열의 길이를 1만큼 감소시킴
	- 배열이 비어 있는 경우 pop()을 호출하면 undefined가 반환됨

구문)	array.pop()
		- array: pop() 메서드를 호출할 배열
		- pop(): 배열에서 마지막 요소를 제거하고 해당 요소를 반환하는 메서드



7. push() 메서드
 : 배열 끝에 하나 이상의 요소를 추가하는 데 사용
	-  배열에 요소가 추가된 후의 배열 길이를 반환
  	   (배열에 요소가 추가된 후의 길이를 나타냄)
	- 여러 개의 요소를 한 번에 추가할 수 있음
	  이 경우, 배열 전개 연산자(...)를 사용하여 요소들을 전달 가능

구문)	array.push(element1, element2, ..., elementN)
		- array: push() 메서드를 호출할 배열
		- element1, element2, ..., elementN: 배열 끝에 추가할 요소(들)
						 필요한 만큼 인수로 전달할 수 있음

ex)	const fruits = ["apple", "banana"];

	// 여러 개의 요소를 한 번에 추가
	const moreFruits = ["cherry", "grape", "orange"];
	fruits.push(...moreFruits);

	console.log(fruits); // ["apple", "banana", "cherry", "grape", "orange"]


8. shift() 메서드
 : 배열의 첫 번째 요소를 제거하고, 제거된 첫 번째 요소를 반환하는 메서드
	-  배열의 길이가 1만큼 감소하고, 첫 번째 요소를 얻을 수 있음
	- 배열이 비어 있는 경우 shift()을 호출하면 undefined가 반환됨

구문)	array.shift()
		- array: shift() 메서드를 호출할 배열
	


9. unshift() 메서드
 : 배열의 맨 앞에 요소(또는 요소들)를 추가하고, 
   추가된 후의 배열 길이를 반환하는 메서드
	-  배열의 길이가 늘어나고, 새로운 요소가 배열의 맨 앞에 추가됨
	- 호출할 때 여러 개의 요소를 한 번에 추가할 수 있음
	  이 경우, 배열 전개 연산자(...)를 사용하여 요소들을 전달 가능

구문)	array.unshift(element1, element2, ..., elementN)
		- array: unshift() 메서드를 호출할 배열
		- element1, element2, ..., elementN: 배열의 맨 앞에 추가할 요소(들)
						필요한 만큼 인수로 전달할 수 있음

ex) 	const fruits = ["banana", "cherry"];

	// 여러 개의 요소를 한 번에 추가
	const moreFruits = ["apple", "grape", "orange"];
	fruits.unshift(...moreFruits);

	console.log(fruits);
	// ["apple", "grape", "orange", "banana", "cherry"]










