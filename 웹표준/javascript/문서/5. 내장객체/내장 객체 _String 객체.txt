* String 객체
: 문자열을 다루는 데 사용되는 내장 객체
	- 문자열은 텍스트 데이터를 나타내는 데 사용됨
	- String 객체는 문자열을 생성하고 조작하는 데 필요한 다양한 메서드를 제공

cf> 원시 문자열은 불변하며, 문자열을 수정하려면 새로운 문자열을 생성해야 함
    단, String 객체는 문자열 수정 및 조작하는 메소드를 제공


o String 객체의 몇 가지 주요 기능과 메서드
1. 문자열 생성
방법1) 문자열 리터럴 (String Literal)을 사용한 방법
	- 문자열 리터럴: 큰 따옴표(") 또는 작은 따옴표(')로 감싸인 문자열

ex)	var str1 = "안녕하세요";   // 큰 따옴표로 문자열 생성
	var str2 = 'JavaScript'; // 작은 따옴표로 문자열 생성

방법2) String 객체를 사용하여 문자열을 생성
	- 문자열을 직접 생성하는 대신 문자열을 다루거나 조작해야 할 때 유용

ex)	var strObj1 = new String("안녕하세요");   // String 객체로 문자열 생성
	var strObj2 = new String('JavaScript'); // String 객체로 문자열 생성


2. 문자열 길이 확인 - 문자열의 length 속성
	- length 속성은 문자열에 포함된 문자(글자)의 개수를 반환

구문)	var stringLength = 문자열.length;
		- 문자열: 길이를 확인하려는 문자열
		- stringLength: 문자열의 길이가 저장됨


3. 문자열 합치기/연결(concatenation)
방법1) + 연산자를 사용
	var str1 = "안녕";
	var str2 = "하세요";
	var combined = str1 + str2;

	console.log(combined); // 출력: "안녕하세요"


방법2) concat() 메서드를 사용
	-  하나 이상의 문자열을 결합하여 새로운 문자열을 생성
	- concat() 메서드는 원본 문자열을 변경하지 않고 새로운 문자열을 반환

구문)	var newString = 문자열.concat(문자열1, 문자열2, ...);
		- 문자열: 원본 문자열에 추가할 문자열
		- 문자열1, 문자열2, ...: 결합하려는 다른 문자열
					필요한 만큼의 문자열을 추가할 수 있음
ex)	var str1 = "안녕";
	var str2 = "하세요";
	var combined = str1.concat(" ", str2);

	console.log(combined); // 출력: "안녕 하세요"


방법3) 템플릿 리터럴 사용
	- 백틱(`)을 사용하여 템플릿 리터럴을 정의하고(문자열을 감싸고)
	   ${}`를 사용하여 변수나 표현식을 문자열에 삽입

구문)	var result = `문자열 ${변수} 표현식`;
		- `(백틱) 내부에 있는 문자열은 템플릿 리터럴로 감싸여 있음
		- ${} 안에 변수나 표현식을 넣어 문자열 안에 삽입할 수 있음

ex)	var name = "Alice";
	var greeting = `안녕하세요, ${name}!`;

	console.log(greeting); // 출력: "안녕하세요, Alice!"


4. 문자열 자르기
	- slice(), substring(), substr() 함수 등을 사용
	1) slice(start, end) 메서드
		- start: 추출을 시작할 인덱스. 양수 또는 음수 값을 가질 수 있음(O)
		- end (선택 사항): 추출을 종료할 인덱스 (포함되지 않음). 
				  양수 또는 음수 값을 가질 수 있음
		- slice() 메서드: 원본 문자열을 변경하지 않고 새로운 부분 문자열을 반환

	ex)	var str = "안녕하세요";
		var sliced = str.slice(0, 2); // "안녕"


	2) substring(start, end) 메서드
		- start: 추출을 시작할 인덱스. 음수 값을 사용할 수 없음(X)
		- end (선택 사항): 추출을 종료할 인덱스 (포함되지 않음). 
				  음수 값을 사용할 수 없음
		- substring() 메서드도 원본 문자열을 변경하지 않고 새로운 부분 문자열을 반환

	3) substr(start, length) 메서드
		- start: 추출을 시작할 인덱스. 음수 값을 사용할 수 있음(O)
		- length: 추출할 문자의 개수를 나타내는 양의 정수.
		- substr() 메서드는 원본 문자열을 변경하지 않고 새로운 부분 문자열을 반환


5. 문자열 탐색 - 특정 패턴을 찾는 방법
	1) indexOf(substring, idx) 메서드
	: 특정 부분 문자열 substring을 찾고, 시작 인덱스 idx부터 검색을 시작하여 
	  해당 부분 문자열의 첫 번째 등장 인덱스를 반환
		- substring: 찾으려는 부분 문자열
		- idx (선택 사항): 검색을 시작할 인덱스(음수 사용 가능O)
				 문자열의 어느 위치에서 검색을 시작할지를 지정하는데 사용
		- 문자열에서 첫 번째로 발견되는 substring의 인덱스를 반환하며,
		  찾지 못한 경우 -1을 반환

	2) lastIndexOf(substring) 메서드
	: 문자열에서 마지막으로 발견되는 substring의 인덱스를 반환
		- substring: 찾으려는 부분 문자열입니다.
		- 찾지 못한 경우 -1을 반환

	3) includes(substring) 메서드
 	: 문자열에 substring이 포함되어 있는지 여부를 불리언 값으로 반환
		- substring: 문자열에 포함되어 있는지 확인하려는 부분 문자열

	4) startsWith(substring) 메서드
	: 문자열이 substring으로 시작하는지 여부를 확인
		- substring: 문자열의 시작 부분에 있는지 확인하려는 부분 문자열

	5) endsWith(substring) 메서드
	: 문자열이 substring으로 끝나는지 여부를 확인
		- substring: 문자열의 끝 부분에 있는지 확인하려는 부분 문자열



6. 문자열 치환 - replace() 메서드를 사용
	- replace() 메서드
	 : 원본 문자열에서 특정 패턴을 찾아 다른 문자열로 대체할 수 있음

구문)	var newString = 원본문자열.replace(찾을문자열 또는 정규표현식, 대체할문자열);
		- 원본문자열: 치환 작업을 수행할 원본 문자열
		- 찾을문자열 또는 정규표현식: 대체하려는 문자열 또는 정규 표현식
		- 대체할문자열: 찾을 문자열 또는 패턴을 대체할 새로운 문자열


7. 문자열 분할 - split() 메서드
	- split(separator) 메서드
	: 문자열을 separator를 기준으로 분할하여 배열로 반환
		- separator: 문자열을 분할할 구분자(공백, 쉼표, 또는 다른 문자열)

구문)	var parts = 문자열.split(구분자);
		- 문자열: 분할할 원본 문자열
		- 구분자: 문자열을 나눌 때 사용할 구분자


8. 대/소문자 변환
	- toUpperCase() 메서드: 문자열의 모든 문자를 대문자로 변환
구문)	var upperCaseString = 문자열.toUpperCase();

	- toLowerCase() 메서드: 문자열의 모든 문자를 소문자로 변환
구문)	var lowerCaseString = 문자열.toLowerCase();

	- 첫 글자만 대문자로 변환
	 : charAt(0).toUpperCase() + slice(1)



9. 문자열 비교
방법1)	동등성 비교 (== 및 === 연산자)
	== 연산자: 값만 비교하며 형 변환을 수행
		    두 문자열의 값이 같으면 true를 반환
	=== 연산자: 값과 데이터 타입을 모두 비교
		   값과 데이터 타입이 모두 같아야 true를 반환

방법2)	localeCompare() 메서드: 문자열을 로캘(언어 및 국가)을 고려하여 비교
	- 두 문자열이 동일하면 0을 반환
	- 첫 번째 문자열이 두 번째 문자열보다 앞서면 음수,
	 				 뒤에 위치하면 양수를 반환

방법3)	사전식 순서 비교 with 비교 연산자(<, >)
		- 문자열의 각 문자를 비교하여 앞선 문자열을 결정



10. 문자열 조작 및 확인 메소드
	charAt(index): 지정된 인덱스의 문자를 반환
		-  문자열 내부의 특정 위치에 있는 문자를 가져오는 데 사용
구문)	var character = 문자열.charAt(인덱스);
		- 문자열: 문자를 가져올 원본 문자열
		- 인덱스: 가져올 문자의 위치를 나타내는 정수값
			 문자열의 첫 번째 문자는 인덱스 0부터 시작










