* 변수: 값이 저장되는 메모리 공간
	해당 값에 접근하거나 수정하는 데 사용
	
	- 변수에 값을 할당할 때는 = 연산자를 사용
	- 변수에 저장된 값을 읽을 때는 변수 이름을 사용


o JavaScript에서 변수를 선언하는 방법
 : var, let, 또는 const 키워드를 사용

1) var	
	- 함수 스코프를 가짐
	- 변수 재선언/할당 가능: 변수를 여러 번 선언해도 오류가 발생하지 않음
	- 호이스팅(hoisting)이 발생하여 변수가 선언되기 전에도 접근이 가능

구문)	var x = 10;


2) let
	- 블록 스코프를 가지며, 블록 내에서만 접근 가능
	- 변수 재할당 가능
	- 변수 재선언이 불가능
	- 호이스팅은 발생하지만 초기화 전에는 접근할 수 없음

구문)	let y = 20;


3) const
	- 상수(constant)를 선언하는 데 사용
	- 블록 스코프를 가짐
	   :  변수가 선언된 블록 내에서만 유효

	- const 변수를 선언할 때 반드시 초기값을 할당해야 함
	- 변수를 재선언하거나 재할당할 수 없음
	  : const를 사용하여 변수를 선언하면 해당 변수에 할당한 값은 변경할 수 없음
	  = 한 번 초기화되면 그 값을 변경할 수 없다

	- 객체나 배열을 const로 선언하면 해당 객체나 배열의 내용은 변경할 수 있음

구문)	const z = 30;


4) 선언자 없이 변수를 만드는 경우
	- 이러한 변수는 자동으로 전역 스코프(global scope)에 생성됨
	  => 전역변수로 취급
	- 암시적(global) 변수: 변수 이름이 없는 값을 저장하는데 사용됨

구문)	myVariable = "암시적(global) 변수입니다.";




o 변수명을 설정시 주의사항
1) 유효한 식별자 사용
	- 식별자는 영문자, 숫자, 밑줄(_), 달러 기호($)로 구성
	- 변수명은 반드시 글자로 시작
	  숫자로 시작하는 것은 허용되지 않음


2) 의미 있는 이름 사용
	- 변수명은 해당 변수의 역할과 의미를 나타내야 함
	- 의미 없는 약어나 단축어를 사용하지 않고, 
	  변수의 역할을 이해하기 쉽게 작성
	좋은 예: firstName, totalPrice, isLoggedin
	피해야 할 예: x, temp, flag


3) 대소문자 구분
	-JavaScript는 변수명을 대소문자를 구분하여 처리
	 : myVar와 myvar는 서로 다른 변수로 간주됨


4) 예약어 피하기
	- JavaScript의 예약어(Reserved Keywords)는 
	  변수명으로 사용할 수 없음
	  : 예약어는 JavaScript 언어 자체의 기능을 나타내므로
	     변수로 사용해서는 안 됨
	- 예약어 목록: if, else, for, while, function, return, 등

5)의미 있는 케이스 스타일 선택
	- 변수명을 작성할 때 언더스코어(_)나 카멜 케이스(Camel Case) 등의
	   스타일을 사용할 수 있음
		- 언더스코어: my_variable_name
		- 카멜 케이스: myVariableName









