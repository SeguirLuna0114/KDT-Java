* JavaScript에서 사용되는 연산자(operators)
	- 변수, 상수, 리터럴 등의 값을 조작하고 조건을 검사하는 데 사용

o  연산자 종류
1) 산술 연산자 (Arithmetic Operators)
	더하기 (+): 숫자 더하기
		- 문자열과 숫자를 결합할 때 사용O
		  => 문자열과 숫자를 문자열로 변환하여 연결
	
	빼기 (-): 숫자 빼기
	곱하기 (*): 숫자 곱하기
	나누기 (/): 숫자 나누기(나눗셈의 결과를 반환 => 소수점 형태 가능)
	나머지 (%): 나머지 값 계산

   * 증감 연산자(Increment and Decrement Operators) : 변수 값을 1씩 증가 또는 감소
	증가 연산자 (++): 변수의 값을 1씩 증가시킴
			 변수에 ++를 붙이거나(선행연산) 변수 뒤에 ++를 붙이는(후행연산) 방법
	감소 연산자 (--): 변수의 값을 1씩 감소시킴
			 변수에 --를 붙이거나(선행연산) 변수 뒤에 --를 붙이는(후행연산) 방법


2) 확장 대입 연산자(Extended Assignment Operators) / 할당 연산자(Assignment Operators)  
 : 변수에 값을 할당하면서 산술 연산을 동시에 
   수행하는 단축 표현식을 제공
  - 변수의 현재 값과 다른 값을 조합하여 새로운 값을 변수에 저장하는 데 유용
	대입 (=): 변수에 값을 할당
	추가 할당 (+=, -=, *=, /=, %=): 변수에 다른 값과 연산하여 결과를 변수에 할당
		+= (더하기 대입 연산자)
		-= (빼기 대입 연산자)
		*= (곱하기 대입 연산자)
		/= (나누기 대입 연산자)
		%= (나머지 대입 연산자)


3) 비교 연산자 (Comparison Operators)
	동등 (==): 값이 같은지 비교
	일치 (===): 값과 데이터 유형이 같은지 비교
	부등 (!=): 값이 다른지 비교
	부등 (!==): 값과 데이터 유형이 다른지 비교
	크다(>), 작다(<), 크거나 같다(>=), 작거나 같다(<=): 숫자 비교


4) 논리 연산자 (Logical Operators)
	논리 AND (&&): 모든 조건이 참일 때 참
	논리 OR (||): 적어도 하나의 조건이 참이면 참
	논리 NOT (!): 조건의 반대


5) 비트 연산자 (Bitwise Operators):
	비트 AND (&): 비트 단위 AND 연산
	비트 OR (|): 비트 단위 OR 연산
	비트 XOR (^): 비트 단위 XOR 연산
	비트 NOT (~): 비트 반전
	왼쪽 시프트 (<<): 비트를 왼쪽으로 이동
	오른쪽 시프트 (>>): 비트를 오른쪽으로 이동


6) 조건(삼항) 연산자 (Conditional(Ternary) Operator)
	변수 = 조건 ? 참일 때의 값 : 거짓일 때의 값
		- 조건: 평가되어 참 또는 거짓(Boolean) 값을 반환하는 표현식
		- 참일 때의 표현식: 조건이 참일 경우 실행되고 반환되는 표현식
		- 거짓일 때의 표현식: 조건이 거짓일 경우 실행되고 반환되는 표현식

	- 간단한 조건문의 축약형
	- 두 가지 다른 표현식 중 하나를 선택하고 해당 표현식의 결과를 반환
	- 변수에 값을 할당하거나 함수의 반환 값을 설정할 수 있음


7) 타입 연산자 (Type Operators)
	typeof: 변수 또는 표현식의 데이터 유형을 확인


8) 인스턴스 연산자 (Instanceof Operator)
	instanceof: 객체가 특정 클래스 또는 생성자의 인스턴스인지 확인


9) 연결 연산자 (String Concatenation Operator)
	문자열 연결 (+): 문자열을 연결


10) 콤마 연산자 (Comma Operator)
	콤마 (,): 여러 표현식을 결합하고 마지막 표현식의 결과를 반환





