* on() 메서드
 : jQuery에서 이벤트를 연결하고 핸들러 함수를 등록하는 데 사용
	- 여러 이벤트 유형에 대해 하나의 핸들러 함수를 등록하거나,
	  여러 요소에 대해 이벤트 핸들러를 일괄적으로 연결할 수 있음
	- on() 메서드를 사용하여 이벤트를 연결하면
	  여러 이벤트 핸들러를 한 요소에 연결하거나, 
	  동적으로 생성된 요소에 이벤트 핸들러를 연결하는 등
	  다양한 유연한 기능을 활용할 수 있음


구문)	$(선택자).on(이벤트_유형, 이벤트_핸들러_함수);
		- $(선택자): 이벤트를 연결할 요소를 선택
		- 이벤트_유형: 연결할 이벤트의 유형을 나타내며 문자열 형태로 지정
			      예를 들어, "click", "keydown", "submit" 등이 가능
		- 이벤트_핸들러_함수: 이벤트가 발생했을 때 실행할 핸들러 함수를 정의
				     이 함수는 이벤트 객체를 매개변수로 받을 수 있음
				     이벤트 처리 로직을 구현

ex)	버튼을 클릭했을 때 알림을 표시하는 코드
	$("button").on("click", function () {
    		alert("버튼이 클릭되었습니다.");
	});


o 단일 이벤트 유형에 대한 핸들러 등록
	- 특정 이벤트에 대한 핸들러를 등록할 때 사용
구문)	$(선택자).on("이벤트_유형", function () {
    		// 이벤트 핸들러 코드
	});

ex)	버튼 클릭 이벤트에 대한 핸들러 등록 시
	$(선택자).on("이벤트_유형", function () {
    		// 이벤트 핸들러 코드
	});



o 여러 이벤트 유형에 대한 핸들러 등록
	- 여러 이벤트 유형에 대해 하나의 핸들러를 등록할 때 사용
구문)	$(선택자).on("이벤트_유형1 이벤트_유형2", function () {
    		// 이벤트 핸들러 코드
	});


ex)	입력 필드가 포커스되거나 블러될 때 동일한 핸들러를 등록할 때
	$("input").on("focus blur", function () {
    		// 입력 필드가 포커스되거나 블러될 때 실행될 코드
	});



o 동적으로 생성된 요소에 이벤트 핸들러 등록
구문)	$(부모_요소_선택자).on("이벤트_유형", "동적_요소_선택자", function () {
    		// 이벤트 핸들러 코드
	});


ex)	동적으로 생성된 버튼에 대한 클릭 이벤트 핸들러를 등록	
	$(document).on("click", "button.dynamic", function () {
    		// 동적으로 생성된 버튼 클릭 시 실행될 코드
	});



o 이벤트 위임
	- 부모 요소에 이벤트 핸들러를 등록하고, 
	  자식 요소에서 이벤트를 처리하려는 경우 사용
구문)	$(부모_요소_선택자).on("이벤트_유형", "자식_요소_선택자", function () {
    		// 이벤트 핸들러 코드
	});

ex)	리스트 아이템에 대한 클릭 이벤트 핸들러를 부모 <ul> 요소에 등록
	$("ul").on("click", "li", function () {
    		// 리스트 아이템 클릭 시 실행될 코드
	});




